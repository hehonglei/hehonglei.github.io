<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>可了头i的博客</title>
 <link href="http://127.0.0.1/atom.xml" rel="self"/>
 <link href="http://127.0.0.1/"/>
 <updated>2016-11-16T21:02:59+08:00</updated>
 <id>http://127.0.0.1</id>
 <author>
   <name>Rizky Ariestiyansyah</name>
   <email>ariestiyansyah.rizky@gmail.com</email>
 </author>

 
 <entry>
   <title>浅谈MVC架构模式分析与设计</title>
   <link href="http://127.0.0.1/mvc/2016/09/01/mvc-talk-lightly/"/>
   <updated>2016-09-01T00:00:00+08:00</updated>
   <id>http://127.0.0.1/mvc/2016/09/01/MVC_talk lightly</id>
   <content type="html">&lt;hr /&gt;

&lt;!-- more --&gt;

&lt;p&gt;MVC全名是Model View Controller ,是模型-视图-控制器的缩写。&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;视图：我们能能直观的看到的web界面。&lt;/p&gt;

&lt;p&gt;控制器：向系统发出指令的工具和帮手。&lt;/p&gt;

&lt;p&gt;模型：模型的工作是按要求从数据库取出数据。&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;学习MVC的目的：&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;1、快速上手各大主流PHP框架，列如YII框架、thinkphp、ci等&lt;/p&gt;

&lt;p&gt;2、快速适应多数公司的web开发需求&lt;/p&gt;

&lt;p&gt;3、逐步接触和了解web系统架构的知识、为日后成为系统架构的中坚力量做准备&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;MVC解决的问题：&lt;/p&gt;

&lt;p&gt;```
在PHP还不支持面向对象之前，是过程化的方式来创建的，它们将 Model View Controller 三层的代码混在一起，十分混乱。&lt;/p&gt;

&lt;p&gt;它解决的问题有：维护难、开发速度慢、二次开发难度高，工作量大&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;MVC的优势：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/PHP学习/MVC_1.jpg&quot; alt=&quot;MVC_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MVC的工作流程初步认识：&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;1、浏览者 -&amp;gt; 调用控制器，对它发出指令
2、控制器 -&amp;gt; 按指令选取一个合适的模型
3、模型 -&amp;gt; 安控制器指令去相应数据
4、控制器 -&amp;gt; 按指令选取相应视图
5、视图 -&amp;gt; 把第三步取到的数据按用户想要的样子显示出来&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;NVC的目录结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/PHP学习/MVC_2.jpg&quot; alt=&quot;MVC_2&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP事物处理</title>
   <link href="http://127.0.0.1/php/2016/08/05/php-thing/"/>
   <updated>2016-08-05T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2016/08/05/PHP_thing</id>
   <content type="html">&lt;hr /&gt;

&lt;!-- more --&gt;

&lt;p&gt;事务处理在各种管理系统中都有着广泛的应用。比如人员管理系统，很多同步数据库操作大都需要用到事务处理。&lt;/p&gt;

&lt;p&gt;比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！&lt;/p&gt;

&lt;p&gt;例子：删除的SQL语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete from userinfo where ~~~
delete from mail where ~~
delete from article where~~
~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有事务处理，在你删除的过程中，假设出错了，只执行了第一句，那么其后果是难以想象的！&lt;/p&gt;

&lt;p&gt;但用事务处理。如果删除出错，你只要rollback就可以取消删除操作（其实是只要你没有commit你就没有确实的执行该删除操作）&lt;/p&gt;

&lt;p&gt;一般来说，在商务级的应用中，都必须考虑事务处理的！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看inodb信息&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  shell&amp;gt; /usr/local/mysql -u root -p

  mysql&amp;gt; show variables like &quot;have_%&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;系统会提示：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;+——————+——-+
| Variable_name     | Value |
+——————+——-+
| have_bdb          | YES    |
| have_crypt        | YES    |
| have_innodb       | YES    |
| have_isam         | YES    |
| have_raid         | YES    |
| have_symlink      | YES    |
| have_openssl      | NO     |
| have_query_cache | YES    |
+——————+——-+
8 rows in set (0.05 sec)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果是这样的，那么我们就可以创建一张支持事务处理的表来试试了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先简单介绍一下事务吧！事务是DBMS得执行单位。它由有限得数据库操作序列组成得。但不是任意得数据库操作序列都能成为事务。&lt;/p&gt;

&lt;p&gt;一般来说，事务是必须满足4个条件（ACID）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;原子性（Autmic）：事务在执行性，要做到“要么不做，要么全做！”，就是说不允许事务部分得执行。

即使因为故障而使事务不能完成，在rollback时也要消除对数据库得影响！

一致性（Consistency）：事务得操作应该使数据库从一个一致状态转变倒另一个一致得状态！

就拿网上购物来说吧，你只有即让商品出库，又让商品进入顾客得购物篮才能构成事务！ 

隔离性（Isolation）：如果多个事务并发执行，应象各个事务独立执行一样！

持久性（Durability）：一个成功执行得事务对数据库得作用是持久得，即使数据库应故障出错，也应该能够恢复！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MYSQL的事务处理主要有两种方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1、用begin,rollback,commit来实现

	begin 开始一个事务

    rollback 事务回滚

    commit  事务确认

2、直接用set来改变mysql的自动提交模式

	MYSQL默认是自动提交的，也就是你提交一个QUERY，它就直接执行！我们可以通过

	set autocommit=0	禁止自动提交

	set autocommit=1 	开启自动提交来实现事务的处理。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但注意当你用 set autocommit=0 的时候，你以后所有的SQL都将做为事务处理，直到你用commit确认或rollback结束。&lt;/p&gt;

&lt;p&gt;注意当你结束这个事务的同时也开启了个新的事务！按第一种方法只将当前的作为一个事务！&lt;/p&gt;

&lt;p&gt;个人推荐使用第一种方法！&lt;/p&gt;

&lt;p&gt;注：MYSQL中只有INNODB和BDB类型的数据表才能支持事务处理！其他的类型是不支持的！（切记！）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MYSQL5.0 WINXP下测试通过～   ^_^&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; use test;
Database changed
mysql&amp;gt; CREATE TABLE &lt;code&gt;dbtest&lt;/code&gt;(
     -&amp;gt; id int(4)
     -&amp;gt; ) TYPE=INNODB;
Query OK, 0 rows affected, 1 warning (0.05 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select * from dbtest
     -&amp;gt; ;
Empty set (0.01 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; insert into dbtest value(5);
Query OK, 1 row affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; insert into dbtest value(6);
Query OK, 1 row affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select * from dbtest;
+——+
| id    |
+——+
|     5 |
|     6 |
+——+
2 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; begin;
Query OK, 0 rows affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; insert into dbtest values(7);
Query OK, 1 row affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; rollback;
Query OK, 0 rows affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select * from dbtest;
+——+
| id    |
+——+
|     5 |
|     6 |
+——+
2 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;[PHP]
function Tran( $sql ) {
         $judge = 1;
         mysql_query(‘begin’);
         foreach ($sql as $v) {
                 if ( !mysql_query($v) ) {
                         $judge = 0;
                 }
         }
         if ($judge == 0) {
                 mysql_query(‘rollback’);
                 return false;
         }
         elseif ($judge == 1) {
                 mysql_query(‘commit’);
                 return true;
         }
}
[/PHP]&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;?php
$handler=mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;&quot;);
mysql_select_db(&quot;task&quot;);
mysql_query(&quot;SET AUTOCOMMIT=0&quot;);//设置为不自动提交，因为MYSQL默认立即执行
mysql_query(&quot;BEGIN&quot;);//开始事务定义
if(!mysql_query(&quot;insert into trans (id) values(&#39;2&#39;)&quot;))
{
mysql_query(&quot;ROOLBACK&quot;);//判断当执行失败时回滚
}
if(!mysql_query(&quot;insert into trans (id) values(&#39;4&#39;)&quot;))
{
mysql_query(&quot;ROOLBACK&quot;);//判断执行失败回滚
}
mysql_query(&quot;COMMIT&quot;);//执行事务
mysql_close($handler);

?&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP魔术方法</title>
   <link href="http://127.0.0.1/php/2016/08/03/magic-methods/"/>
   <updated>2016-08-03T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2016/08/03/Magic methods</id>
   <content type="html">&lt;hr /&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;strong&gt;1、__get、__set&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__get( $property ) 当调用一个未定义的属性时访问此方法

__set( $property, $value ) 给一个未定义的属性赋值时调用

注意：这两个方法是为 在类和他们的父类中没有声明的属性而设计的。

这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性（即没有权限访问的属性）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2、__isset、__unset&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__isset( $property ) 当在一个未定义的属性上调用isset()函数时调用此方法

__unset( $property ) 当在一个未定义的属性上调用unset()函数时调用此方法

注意：与__get方法和__set方法相同。

这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性（即没有权限访问的属性）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3、__call&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__call( $method, $arg_array ) 当调用一个未定义的方法时调用此请求

注意：这里的未定义的方法包括没有权限访问的方法
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4、__autoload&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__autoload 函数，它会在试图使用尚未被定义的类时自动调用。

通过调用此函数，脚本引擎在 PHP 	出错失败前有了最后一个机会加载所需的类。

注意: 在 __autoload 函数中抛出的异常不能被 catch 语句块捕获并导致致命错误。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5、__construct、__destruct&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__construct 构造方法，当一个对象创建时调用此方法，使用此方法的好处是：

可以使构造方法有一个独一无二的名称,无论它所在的类的名称是什么。这样你在改变类的名称时,就不需要改变构造方法的名称。

__destruct 析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法。

注意：默认情况下,PHP仅仅释放对象属性所占用的内存并销毁对象相关的资源。

析构函数允许你在使用一个对象之后执行任意代码来清除内存。

当PHP决定你的脚本不再与对象相关时,析构函数将被调用。

在一个函数的命名空间内,这会发生在函数return的时候。

对于全局变量,这发生于脚本结束的时候。

如果你想明确地销毁一个对象,你可以给指向该对象的变量分配任何其它值。

通常将变量赋值勤为NULL或者调用unset。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6、__clone&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PHP5中的对象赋值是使用的引用赋值。

如果想复制一个对象则需要使用clone方法，在调用此方法时 对象会自动调用__clone魔术方法。

如果在对象复制需要执行某些初始化操作，可以在__clone方法实现。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7、__toString&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__toString方法在将一个对象转化成字符串时自动调用。

比如使用echo打印对象时，如果类没有实现此方法，则无法通过echo打印对象，

否则会显示：Catchable fatal error: Object of class test could not be converted to string in.

此方法必须返回一个字符串

在PHP 5.2.0之前，__toString方法只有结合使用echo() 或 print()时 才能生效。

PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过printf()，使用%s修饰符），但不能用于非字符串环境（如使用%d修饰符）。

从PHP 5.2.0，如果将一个未定义__toString方法的对象 转换为字符串，会报出一个E_RECOVERABLE_ERROR错误。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;8、__sleep、__wakeup&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__sleep 串行化的时候用

__wakeup 反串行化的时候调用

serialize() 检查类中是否有魔术名称 __sleep 的函数。

如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。

使用 __sleep 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。

此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。

相反地，unserialize() 检查具有魔术名称 __wakeup 的函数的存在。

如果存在，此函数可以重建对象可能具有的任何资源。

使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;9、__set_state&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;当调用var_export()时，这个静态方法会被调用（自PHP 5.1.0起有效）。

本方法的唯一参数是一个数组，其中包含按array(’property’ =&amp;gt; value, …)格式排列的类属性。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;10、__invoke&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;当尝试以调用函数的方式调用一个对象时，__invoke 方法会被自动调用。PHP5.3.0以上版本有效
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;11、__callStatic&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;它的工作方式类似于 __call() 魔术方法，__callStatic() 是为了处理静态方法调用，PHP5.3.0以上版本有效

PHP 确实加强了对 __callStatic() 方法的定义；它必须是公共的，并且必须被声明为静态的。

同样，__call() 魔术方法必须被定义为公共的，所有其他魔术方法都必须如此。
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>浅谈正则表达式中的分组和引用</title>
   <link href="http://127.0.0.1/javascript/2016/05/06/regular-expression-group/"/>
   <updated>2016-05-06T11:40:18+08:00</updated>
   <id>http://127.0.0.1/javascript/2016/05/06/regular-expression-group</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;我的答案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;问题&lt;/h2&gt;

&lt;p&gt;在外刊君读者群中看到有人提出这样的一个需求：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;把字符串切成连续相同字符的正则怎么写？比如&lt;code&gt;abbcccdddd&lt;/code&gt;切成&lt;code&gt;a,bb,ccc,dddd&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;我的答案&lt;/h2&gt;

&lt;p&gt;先给出我的答案吧：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
&#39;abbccddd&#39;.match(/(\w)\1*/g) // [&quot;a&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;ddd&quot;]
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;说明&lt;/h2&gt;

&lt;p&gt;拿到这个问题，首先要匹配字符&lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;，这里直接使用&lt;code&gt;\w&lt;/code&gt;。然后是全局匹配，在最后加上&lt;code&gt;g&lt;/code&gt;。难点在于怎么判断重复。&lt;/p&gt;

&lt;p&gt;翻看了犀牛书后，又读了一遍分组和引用的部分。使用小括号&lt;code&gt;()&lt;/code&gt;将字符作为一个最小单元，同时小括号还能记忆这个组合相匹配的字符串。再使用反斜杠&lt;code&gt;\&lt;/code&gt;引用前面分组的表达式，数字1表示第一个小括号。这时完成了2个字符重复的要求。最后再使用&lt;code&gt;*&lt;/code&gt;来匹配出现0次或n次。这个正则表达式就写完了。&lt;/p&gt;

&lt;p&gt;下面详细说说分组和引用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正则表达式的选择、分组和引用字符表&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;选择，匹配的是该符号左边的子表达式或右边的子表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(...)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;组合，将几个项组合为一个单元，这个单元可通过&lt;code&gt;*&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;?&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; 等符号加以修饰，&lt;strong&gt;而且可以记住和这个组合相匹配的字符串以提供伺候的引用使用&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;(?:...)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;只组合，把项组合到一个段元，但不记忆与该组相匹配的字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;和第n个分组第一次匹配的字符相匹配，组是圆括号中的子表达式（也有可能是嵌套的），组索引是从左到右的左括号数，&lt;code&gt;(?:&lt;/code&gt;形式的分组不编码&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>对这个 jekyll 博客主题的改版和重构</title>
   <link href="http://127.0.0.1/jekyll/2016/03/12/jekyll-theme-version-2-0/"/>
   <updated>2016-03-12T11:40:18+08:00</updated>
   <id>http://127.0.0.1/jekyll/2016/03/12/jekyll-theme-version-2.0</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;改版重构说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rubygems-ssl-&quot; id=&quot;markdown-toc-rubygems-ssl-&quot;&gt;RubyGems 无法访问，SSL 证书问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;错误呈现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-paginate-&quot; id=&quot;markdown-toc-jekyll-paginate-&quot;&gt;jekyll-paginate 依赖缺失&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;错误呈现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#foxit-pdf-reader-4000&quot; id=&quot;markdown-toc-foxit-pdf-reader-4000&quot;&gt;被 Foxit pdf reader 占用4000端口&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;错误呈现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文主要说明对这个博客主题的改版和代码重构的过程。这个简洁高雅的博客主题受到了很多朋友的喜欢。在写第一版界面时，我对前端并不是很熟悉，对&lt;code&gt;Jekyll&lt;/code&gt;也不熟悉。现在距离当时也一年了，对自己当时写的代码也不太满意了，同时&lt;code&gt;Jekyll&lt;/code&gt;如今也已经升级了，目前最新版为3.1.2。因此我在临近毕业尚未入职前做一下博客主题的代码重构和改版吧。&lt;/p&gt;

&lt;p&gt;主要想做这些事情有：添加归档，添加标签，添加分类页面，主页显示文章摘要，代码去除 jQuery 和 BootStrap，优化移动端显示，将所有变量写入配置文件&lt;code&gt;_config.yml&lt;/code&gt;中等。再优化一些细节吧。希望更多人会喜欢。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;改版重构说明&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;使用 GitHub 风格的代码块 Markdown 写法 (Fenced code blocks)。&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;即 GFM(github flavored markdown) 的方式。&lt;/p&gt;

    &lt;p&gt;Jekyll 已经升级至 3.1.2（2016-03），其中有一些新的要注意的地方，比如官网上说使用了 &lt;code&gt;Rouge&lt;/code&gt; 去做代码高亮而不是默认的 &lt;code&gt;Pygments&lt;/code&gt;，因为 &lt;code&gt;Jekyll&lt;/code&gt; 本身是基于 Ruby 的，因此我看到官方说希望不再使用基于 Python 的 &lt;code&gt;Pygments&lt;/code&gt; 了，而是都使用基于 Ruby 的代码。详情见官网升级说明 &lt;a href=&quot;https://jekyllrb.com/docs/upgrading/2-to-3/#syntax-highlighter-changed&quot;&gt;syntax-highlighter-changed&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;首页中添加摘要&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;摘要可以在每一篇 md 文件头中使用 excerpt 属性写出来。也可以在正文中，4个换行符来分割，这个设置见配置文件&lt;code&gt;_config.yml&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;添加归档&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;上一版中没有归档，现在专门做了一个归档页面，当文章很多时方便根据年份快速查阅。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;添加标签&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;标签还是很有必要添加的，上一版中也没有这个功能。现在也可以根据标签查找文章了。同时标签还有一个重要的作用是，用来获取相似文章的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;添加分类页&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;之前的分类就是在首页中直接完成的，现在和标签和归档类似，我将分类单独制作为一页，方便查阅。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;去掉 jQuery 和 BootStrap&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;我觉得太重了，没必要使用这两个库，使用原生 JavaScript 和 CSS就可以做到一样的效果，代码量大大减轻，载入速度略有提高。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;重写了demo页的瀑布流布局&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;改变数据写死的方式，将数据用 json 格式录入，由 JavaScript 拼接为 HTML 代码。同时，使用 &lt;a href=&quot;http://masonry.desandro.com/&quot;&gt;Masonry&lt;/a&gt;，重写了瀑布流布局。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;简化评论配置，支持 多说 和 disqus&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;在&lt;code&gt;_config.yml&lt;/code&gt;中评论配置直接添加自己的&lt;code&gt;short_name&lt;/code&gt;，评论就能正常使用了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面列举一些可能遇到的问题，至少我是遇到了：&lt;/p&gt;

&lt;h2 id=&quot;rubygems-ssl-&quot;&gt;RubyGems 无法访问，SSL 证书问题&lt;/h2&gt;

&lt;p&gt;以前我使用的是 RubyGems 的淘宝镜像&lt;a href=&quot;https://ruby.taobao.org/&quot;&gt;https://ruby.taobao.org/&lt;/a&gt;。现在这个镜像已经不再维护了，作者 &lt;a href=&quot;https://ruby-china.org/huacnlee&quot;&gt;huacnlee (李华顺)&lt;/a&gt; 转到 &lt;a href=&quot;https://ruby-china.org/&quot;&gt;Ruby China&lt;/a&gt; 中继续维护了，详情见 &lt;a href=&quot;https://gems.ruby-china.org/&quot;&gt;RubyGems 镜像- Ruby China&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;错误呈现&lt;/h3&gt;

&lt;p&gt;在执行任何&lt;code&gt;gem&lt;/code&gt;命令的时候出现以下错误：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)
    SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://gems.ruby-china.org/specs.4.8.gz)
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;根据 &lt;a href=&quot;https://gems.ruby-china.org/&quot;&gt;https://gems.ruby-china.org/&lt;/a&gt; 页面最下方提供的 GitHub Issue 地址。&lt;/p&gt;

&lt;p&gt;可以进入这个 issue：&lt;a href=&quot;https://github.com/ruby-china/rubygems-mirror/issues/3&quot;&gt;https://github.com/ruby-china/rubygems-mirror/issues/3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中 sanlengjingvv 给出了一个链接地址 &lt;a href=&quot;https://gist.github.com/fnichol/867550&quot;&gt;https://gist.github.com/fnichol/867550&lt;/a&gt; 里面提供了方法。我就是采用这里面的方法解决的。&lt;/p&gt;

&lt;p&gt;我使用的是 &lt;a href=&quot;https://gist.github.com/fnichol/867550#the-manual-way-boring&quot;&gt;The Manual Way&lt;/a&gt;，因为 &lt;a href=&quot;https://gist.github.com/fnichol/867550#the-ruby-way-fun&quot;&gt;The Ruby Way&lt;/a&gt; 我没有成功，不知道什么原因，有兴趣的朋友可以试试。下面说说我的具体操作吧。&lt;/p&gt;

&lt;p&gt;首先从 &lt;a href=&quot;https://curl.haxx.se/ca/cacert.pem&quot;&gt;https://curl.haxx.se/ca/cacert.pem&lt;/a&gt; 将文件&lt;code&gt;cacert.pem&lt;/code&gt;下载至 &lt;code&gt;C:\RailsInstaller\cacert.pem&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后执行&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
set SSL_CERT_FILE=C:\RailsInstaller\cacert.pem
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就成功了，不会再出现 SSL 错误了。&lt;/p&gt;

&lt;p&gt;最后原文中说，为了长久设置，将这个目录存入控制面板中。我没理解是什么意思，是指环境变量吗？有朋友知道的话，欢迎留言告知我。&lt;/p&gt;

&lt;p&gt;我存入环境变量后，还是会出现 SSL 错误，这时再次执行上面那条命令即可。&lt;/p&gt;

&lt;h2 id=&quot;jekyll-paginate-&quot;&gt;jekyll-paginate 依赖缺失&lt;/h2&gt;

&lt;p&gt;因为 jekyll 3 中默认安装已经没有这个分页组件了，官方把这个分页组件插件化了，因此要独立安装。详情见 &lt;a href=&quot;https://jekyllrb.com/docs/pagination/&quot;&gt;https://jekyllrb.com/docs/pagination/&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;错误呈现&lt;/h3&gt;

&lt;p&gt;在启动 jekyll 服务的时候出现以下错误：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
jekyll serve
Configuration file: c:/gitWorkSpace/blog-based-on-jekyll-3/_config.yml
  Dependency Error: Yikes! It looks like you don&#39;t have jekyll-paginate or one of its dependencies installed. In order to use Jekyll as currently configured, you&#39;ll need to install this gem. The full error message from Ruby is: &#39;cannot load such file -- jekyll-paginate&#39; If you run into trouble, you can find helpful resources at http://jekyllrb.com/help/!
jekyll 3.1.2 | Error:  jekyll-paginate
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;我们安装这个插件到本地即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
gem install jekyll-paginate
Fetching: jekyll-paginate-1.1.0.gem (100%)
Successfully installed jekyll-paginate-1.1.0
Parsing documentation for jekyll-paginate-1.1.0
Installing ri documentation for jekyll-paginate-1.1.0
Done installing documentation for jekyll-paginate after 3 seconds
1 gem installed
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;foxit-pdf-reader-4000&quot;&gt;被 Foxit pdf reader 占用4000端口&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;错误呈现&lt;/h3&gt;

&lt;p&gt;在本地使用命令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
jekyll serve
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;出现错误，如下&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
jekyll serve
Configuration file: E:/GitWorkSpace/blog/_config.yml
           Source: E:/GitWorkSpace/blog
      Destination: E:/GitWorkSpace/blog/_site
Incremental build: disabled. Enable with --incremental
     Generating...
                   done in 0.547 seconds.
 Please add the following to your Gemfile to avoid polling for changes:
   gem &#39;wdm&#39;, &#39;&amp;gt;= 0.1.0&#39; if Gem.win_platform?
Auto-regeneration: enabled for &#39;E:/GitWorkSpace/blog&#39;
Configuration file: E:/GitWorkSpace/blog/_config.yml
jekyll 3.1.1 | Error:  Permission denied - bind(2) for 127.0.0.1:4000
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;网上查阅后，这篇博文解决了我的问题。&lt;a href=&quot;http://lxconan.github.io/2016/01/07/who-is-using-my-port/&quot;&gt;谁占了我的端口 for Windows –By Liu Xia, ThoughtWorks Senior Consultant. .NET Expert&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上述报错主要原因是，jekyll 启动使用的4000端口被福昕pdf阅读器的自动更新进程占用了，关掉这个进程，jekyll在本地调试启动服务时就没有问题了。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;简单的解决方法是：&lt;/p&gt;

&lt;p&gt;输入命令，查看各端口被占用情况&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
netstat -ano
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;找到4000端口被占用的&lt;code&gt;PID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我的结果如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
协议  本地地址          外部地址          状态           PID
TCP  0.0.0.0:80        0.0.0.0:0         LISTENING     4
TCP  0.0.0.0:135       0.0.0.0:0         LISTENING     836
TCP  0.0.0.0:445       0.0.0.0:0         LISTENING     4
TCP  0.0.0.0:1801      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:2103      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:2105      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:2107      0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:3306      0.0.0.0:0         LISTENING     2404
TCP  0.0.0.0:3389      0.0.0.0:0         LISTENING     1172
TCP  0.0.0.0:49664     0.0.0.0:0         LISTENING     584
TCP  0.0.0.0:49665     0.0.0.0:0         LISTENING     1072
TCP  0.0.0.0:49666     0.0.0.0:0         LISTENING     460
TCP  0.0.0.0:49667     0.0.0.0:0         LISTENING     1000
TCP  0.0.0.0:49670     0.0.0.0:0         LISTENING     696
TCP  0.0.0.0:49678     0.0.0.0:0         LISTENING     2312
TCP  0.0.0.0:49692     0.0.0.0:0         LISTENING     688
TCP  127.0.0.1:4000    0.0.0.0:0         LISTENING     2476
TCP  127.0.0.1:4000    127.0.0.1:55160   ESTABLISHED   2476
TCP  127.0.0.1:4012    0.0.0.0:0         LISTENING     12724
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看到4000端口的PID是2476。下面查看是什么进程，命令行中输入：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
tasklist /svc /FI &quot;PID eq 2476&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;得到结果：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
映像名称                       PID 服务
========================= ======== ============================================
FoxitProtect.exe              2476 FxService
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看到正是福昕阅读器。下面关掉这个服务就好了。在 win10 中进入任务管理器，选择服务选项卡，关闭这个服务就好了，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7011d6cfjw1f1ty28wwj4j20g00aiju7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然也可以在启动jekyll服务的时候指定端口号，如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
jekyll serve --port 3000
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样在浏览器中输入 http://localhost:3000/ 就可以访问了。&lt;/p&gt;

&lt;p&gt;还可以在配置文件&lt;code&gt;_config.yml&lt;/code&gt;中添加端口号设置（参考&lt;a href=&quot;https://jekyllrb.com/docs/configuration/#serve-command-options&quot;&gt;官网文档-Serve Command OptionsPermalink&lt;/a&gt;），如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
# port
port: 1234
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时，启动jekyll服务后，访问 http://localhost:1234/ 即可&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>php微信支付开发教程 </title>
   <link href="http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2016/02/16/weixin/"/>
   <updated>2016-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2016/02/16/weixin</id>
   <content type="html">&lt;p&gt;1、下载微信官方支付API https://mp.weixin.qq.com/paymch/readtemplate?t=mp/business/course3_tmpl&amp;amp;lang=zh_CN&lt;/p&gt;

&lt;p&gt;2、将WxPayPubHelper文件夹拷贝到wp下的ThinkPHP\Library\Vendor\WxPay 目录下&lt;/p&gt;

&lt;p&gt;3、配置WxPay.pub.config.PHP&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924175001777&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4、配置微信公众平台&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150924175325013&quot; alt=&quot;&quot; /&gt;
5、编写支付控制器代码 
&lt;img src=&quot;http://img.blog.csdn.net/20150924180008680&quot; alt=&quot;&quot; /&gt;
6、编写支付界面代码 
&lt;img src=&quot;http://img.blog.csdn.net/20150924180242721&quot; alt=&quot;&quot; /&gt;
7、支付成功后验证订单 
&lt;img src=&quot;http://img.blog.csdn.net/20150924180433112&quot; alt=&quot;&quot; /&gt;
注意&lt;/p&gt;

&lt;p&gt;1、在第五步，编写控制器代码时，必须Vendor（）配置WxPayPubHelper&lt;/p&gt;

&lt;p&gt;2、注意 $jsApi = new \JsApi_pub();以及其他对象创建时的”\”一定要有。&lt;/p&gt;

&lt;p&gt;3、刚进入方法时可以从后台获取到sport_id参数，通过code获取openid之后，sport_id参数会丢失。因为调用了配置中的支付页面地址，重新加载了此页面。所以重新在支付页面地址后面加上参数。&lt;/p&gt;

&lt;p&gt;4、支付金额以“分”为单位，注意转换单位&lt;/p&gt;

&lt;p&gt;5、上面描述和总金额必须闯入字符串类型。否则会报错。&lt;/p&gt;

&lt;p&gt;6、支付成功之后，回调状态未必是正确的(官方说明)，所以验证订单号。此时可以继续处理业务逻辑。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>前端处理动态 url 和 pushStatus 的使用</title>
   <link href="http://127.0.0.1/javascript/2016/01/01/history-api/"/>
   <updated>2016-01-01T07:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2016/01/01/History-API</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;起因&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#history&quot; id=&quot;markdown-toc-history&quot;&gt;History&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#back-forward-go-length&quot; id=&quot;markdown-toc-back-forward-go-length&quot;&gt;&lt;code&gt;back()&lt;/code&gt;, &lt;code&gt;forward()&lt;/code&gt;, &lt;code&gt;go()&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pushstate-replacestate&quot; id=&quot;markdown-toc-pushstate-replacestate&quot;&gt;&lt;code&gt;pushState()&lt;/code&gt;, &lt;code&gt;replaceState()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pjax&quot; id=&quot;markdown-toc-pjax&quot;&gt;pjax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;起因是这样的，在尝试前后端分离的这条道路上，我自己也在不断摸索，感觉要把大部分的坑都踩踩了。目前我用的技术是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;webpack 自动构建&lt;/li&gt;
  &lt;li&gt;AMD 模块化 js&lt;/li&gt;
  &lt;li&gt;Sass 预处理 CSS&lt;/li&gt;
  &lt;li&gt;使用前端模板引擎 handlebars 解决动态操作将 html 拼接在 js 中的问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但最近写了一个项目类似知乎这样的多页网站。前端 url 的处理让我觉得不够优雅。我使用的是 hash 的方式处理动态 url 的，为此我专门在知乎上提了一个问题：&lt;a href=&quot;https://www.zhihu.com/question/38802932&quot;&gt;前端如何处理动态url？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里我将问题描述如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;前后端彻底分离的情况下，页面跳转页全部由前端控制。那么如何更好的处理动态url地址？
例如本问题的url为
https://www.zhihu.com/question/38802932
这肯定是用后台路由处理的url&lt;/p&gt;

  &lt;p&gt;纯前端怎么处理？用hash吗，如下:
https://www.zhihu.com/question#38802932
那如果本页跳转，只改变hash的话，页面不会刷新。
使用&lt;code&gt;location.reload()&lt;/code&gt;倒是可以解决。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;但总觉得这样处理不够优雅。大家在工作中是如何处理此类场景的？还是用传统的后台路由来提供动态url？&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感谢郑海波和剧中人的热心回答。都提到了&lt;code&gt;history&lt;/code&gt;对象中的&lt;code&gt;pushState&lt;/code&gt;，这是我第一次接触到这方面的内容（顿时觉得自己真是才疏学浅）。&lt;/p&gt;

&lt;p&gt;同时也有人提到了&lt;code&gt;pjax&lt;/code&gt;，这个就是&lt;code&gt;pushState&lt;/code&gt;+&lt;code&gt;Ajax&lt;/code&gt;的封装，也很有意思。&lt;/p&gt;

&lt;p&gt;下面就来研究和实践一下吧。&lt;/p&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;window&lt;/code&gt;对象通过&lt;code&gt;history&lt;/code&gt;对象提供对浏览器历史记录的访问能力。它暴露了一些非常有用的方法和属性，让你在历史记录中自由前进和后退，而在 HTML5 中，更可以操纵历史记录中的数据。&lt;/p&gt;

&lt;h3 id=&quot;back-forward-go-length&quot;&gt;&lt;code&gt;back()&lt;/code&gt;, &lt;code&gt;forward()&lt;/code&gt;, &lt;code&gt;go()&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;浏览器的历史记录就好像一个栈，最新的在最上面，较早之前看过的在下面。&lt;/p&gt;

&lt;p&gt;如下图，Chrome的历史记录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7011d6cfjw1ezb16fn2bfj20k008htan.jpg&quot; alt=&quot;chrome history&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面介绍怎么在这些历史记录中跳转，但要&lt;strong&gt;注意&lt;/strong&gt;，上图中的浏览器历史记录和本文说的 history 还不太同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;back()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;在历史记录中后退&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  history.back();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;forward()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;在历史记录中前进&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  history.forward();
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;go()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;移动到指定的历史记录点&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  history.go(-1);
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;通过指定一个相对于当前页面位置的数值，你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;go()不填参数或参数为go(0)时，页面会刷新，即&lt;code&gt;history.go()&lt;/code&gt;或&lt;code&gt;history.go(0)&lt;/code&gt;相当于&lt;code&gt;location.reload()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;length&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;length&lt;/code&gt;为history的属性，显示history长度。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本节在线demo见：&lt;a href=&quot;http://gaohaoyang.github.io/history-pjax-demo/&quot;&gt;History &amp;amp; pjax demo&lt;/a&gt; 源代码：&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;经过亲自测试，&lt;code&gt;history&lt;/code&gt;对象只记录同一个 tab 页内的历史。如果是在新窗口打开的，则无效。如：在a标签中添加&lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt;，或按住&lt;code&gt;ctrl&lt;/code&gt;点击，这类场景下，在新的tab页中，&lt;code&gt;history&lt;/code&gt;对象也是新的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;且&lt;code&gt;history&lt;/code&gt;对象记录的信息与是否同源也无关，所以唯一要满足的就是同一个标签页。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;pushstate-replacestate&quot;&gt;&lt;code&gt;pushState()&lt;/code&gt;, &lt;code&gt;replaceState()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;HTML5 引进了&lt;code&gt;history.pushState()&lt;/code&gt;方法和&lt;code&gt;history.replaceState()&lt;/code&gt;方法，它们允许你逐条地添加和修改历史记录条目，能够在不加载新页面的情况下没改变浏览器的URL。这些方法可以协同&lt;code&gt;window.onpopstate&lt;/code&gt;事件一起工作。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;history.pushState()&lt;/code&gt;会改变&lt;code&gt;referrer&lt;/code&gt;的值，而在你调用方法后创建的  XMLHttpRequest 对象会在 HTTP 请求头中使用这个值。&lt;code&gt;referrer的&lt;/code&gt;值则是创建  XMLHttpRequest 对象时所处的窗口的 URL。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;pushState(any data, string title, [string url])&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;第一个参数为&lt;code&gt;history&lt;/code&gt;对象的&lt;code&gt;state&lt;/code&gt;属性值，可以放任意数据，记录历史状态。第二个参数是新状态的标题，目前浏览器基本不支持。第三个参数为可选的相对url。&lt;/p&gt;

    &lt;p&gt;执行&lt;code&gt;pushState&lt;/code&gt;后，可以在不加载新页面的情况下，更改url。同时&lt;code&gt;history&lt;/code&gt;栈中新增一条数据。&lt;/p&gt;

    &lt;p&gt;例如，我们有这样一段代码：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;button id=&quot;push1&quot;&amp;gt;pushState()&amp;lt;/button&amp;gt;

  document.querySelector(&#39;#push1&#39;).addEventListener(&#39;click&#39;, function() {
      history.pushState(&#39;abc&#39;,&#39;pushStatePageTitle&#39;,&#39;pushState.html&#39;);
      document.querySelector(&#39;#length&#39;).innerHTML = history.length;//重新读取历史长度
  });
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;当点击按钮的时候，页面不会刷新，但&lt;code&gt;url&lt;/code&gt;地址的最后已经变为&lt;code&gt;pushState.html&lt;/code&gt;。这一点非常像&lt;code&gt;hash&lt;/code&gt;的作用，但比&lt;code&gt;hash&lt;/code&gt;更优雅。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;replaceState(any data, string title, [string url])&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;与&lt;code&gt;pushState()&lt;/code&gt;类似，只是在&lt;code&gt;history&lt;/code&gt;栈中不是新增记录，而是替换一条记录。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是：&lt;/strong&gt;&lt;code&gt;pushState()&lt;/code&gt;和&lt;code&gt;replaceState()&lt;/code&gt;方法存在安全方面的限制，本地测试是无效的，会报错，可以简单放到任何服务端测试，或者使用&lt;code&gt;http-server&lt;/code&gt;开启简单服务器，通过访问&lt;code&gt;localhost&lt;/code&gt;来查看效果。&lt;/p&gt;

&lt;p&gt;本节demo见：&lt;a href=&quot;http://gaohaoyang.github.io/history-pjax-demo/index.html&quot;&gt;History &amp;amp; pjax demo - pushState&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pjax&quot;&gt;pjax&lt;/h2&gt;

&lt;p&gt;现在再看本文一开始提出的问题，如何让前端优雅的控制 url，这里就可以考虑 pjax 技术了。我们把 pushState + ajax 进行封装，合起来简称为 pjax。虽然不是什么新的技术，但概念已然不同。&lt;/p&gt;

&lt;p&gt;如果不使用 pjax。我们依然可以使用&lt;code&gt;hash&lt;/code&gt;来实现文本开始的需求。但会不利于 SEO，看着也不够优雅。&lt;/p&gt;

&lt;p&gt;Pjax的原理十分简单。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;拦截 a 标签的默认跳转动作或某些按钮的点击事件。&lt;/li&gt;
  &lt;li&gt;使用 Ajax 请求新页面。&lt;/li&gt;
  &lt;li&gt;将返回的 Html 替换到页面中。&lt;/li&gt;
  &lt;li&gt;使用 HTML5 的&lt;code&gt;pushState()&lt;/code&gt;修改Url。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;个人理解3中也可以仅仅请求数据，再由浏览器渲染。&lt;/p&gt;

&lt;p&gt;每当同一个文档的浏览历史（即history对象）出现变化时，会触发&lt;code&gt;window.onpopstate&lt;/code&gt;事件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onpopstate = function(event) {
    console.log(event.state);
    console.log(location);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样在用户点击前进后退时也可以很好的监听url，来做相应的页面渲染。&lt;/p&gt;

&lt;p&gt;若用户刷新了页面，但没有相应的页面资源，这时页面就会显示不存在。所以我认为较好的方法是在写&lt;code&gt;pushState()&lt;/code&gt;第三个参数的时候，写为&lt;code&gt;?a=1&lt;/code&gt;这样的参数形式。&lt;a href=&quot;https://github.com/browserstate/history.js&quot;&gt;History.js&lt;/a&gt; 也是这么写的。但是这样应该会多一次请求。也许使用 nodeJS 作为中间层会好一些吧。&lt;/p&gt;

&lt;p&gt;对于上述的探索，不知道是不是我还不够深入，总觉得还是不够完美。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;MDN History&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/DOM/Manipulating_the_browser_history&quot;&gt;MDN 操纵浏览器的历史记录&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20289254&quot;&gt;pjax 是如何工作的？ 知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/hustskyking/p/history-api-in-html5.html&quot;&gt;PJAX的实现与应用 小胡子哥&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/03/url_hash.html&quot;&gt;URL的井号-阮一峰&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/bom/history.html&quot;&gt;history对象 JavaScript 标准参考教程（alpha） 阮一峰&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ayqy.net/blog/pjaxpushstate-and-ajax/&quot;&gt;Pjax(pushState and Ajax) 黯羽轻扬&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.clanfei.com/2012/09/1646.html&quot;&gt;操纵历史，利用HTML5 History API实现无刷新跳转 蓝飞&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000002920768&quot;&gt;前端：将网站打造成单页面应用SPA（一） Coffce&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Coffcer/coffce-pjax&quot;&gt;coffce-pjax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/browserstate/history.js&quot;&gt;History.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/defunkt/jquery-pjax&quot;&gt;defunkt/jquery-pjax GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/welefen/pjax&quot;&gt;welefen/pjax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP文件上传类(支持单文件上传，也支持多文件上传)</title>
   <link href="http://127.0.0.1/php/2015/10/03/fileclass/"/>
   <updated>2015-10-03T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2015/10/03/fileClass</id>
   <content type="html">&lt;hr /&gt;
&lt;!-- more --&gt;

&lt;p&gt;```
&amp;lt;?php&lt;br /&gt;
  /**
    file: fileupload.class.php 文件上传类FileUpload 
    本类的实例对象用于处理上传文件，可以上传一个文件，也可同时处理多个文件上传 
  */&lt;br /&gt;
  class FileUpload { &lt;br /&gt;
    private $path = “./uploads”;          //上传文件保存的路径&lt;br /&gt;
    private $allowtype = array(‘jpg’,’gif’,’png’); //设置限制上传文件的类型&lt;br /&gt;
    private $maxsize = 1000000;           //限制文件上传大小（字节）&lt;br /&gt;
    private $israndname = true;           //设置是否随机重命名文件， false不随机&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private $originName;              //源文件名  
private $tmpFileName;              //临时文件名  
private $fileType;               //文件类型(文件后缀)  
private $fileSize;               //文件大小  
private $newFileName;              //新文件名  
private $errorNum = 0;             //错误号  
private $errorMess=&quot;&quot;;             //错误报告消息  
   
/** 
 * 用于设置成员属性（$path, $allowtype,$maxsize, $israndname） 
 * 可以通过连贯操作一次设置多个属性值 
 *@param  string $key  成员属性名(不区分大小写) 
 *@param  mixed  $val  为成员属性设置的值 
 *@return  object     返回自己对象$this，可以用于连贯操作 
 */  
function set($key, $val){  
  $key = strtolower($key);   
  if( array_key_exists( $key, get_class_vars(get_class($this) ) ) ){  
    $this-&amp;gt;setOption($key, $val);  
  }  
  return $this;  
}  
   
/** 
 * 调用该方法上传文件 
 * @param  string $fileFile  上传文件的表单名称  
 * @return bool        如果上传成功返回数true  
 */  
   
function upload($fileField) {  
  $return = true;  
  /* 检查文件路径是滞合法 */  
  if( !$this-&amp;gt;checkFilePath() ) {         
    $this-&amp;gt;errorMess = $this-&amp;gt;getError();  
    return false;  
  }  
  /* 将文件上传的信息取出赋给变量 */  
  $name = $_FILES[$fileField][&#39;name&#39;];  
  $tmp_name = $_FILES[$fileField][&#39;tmp_name&#39;];  
  $size = $_FILES[$fileField][&#39;size&#39;];  
  $error = $_FILES[$fileField][&#39;error&#39;];  
   
  /* 如果是多个文件上传则$file[&quot;name&quot;]会是一个数组 */  
  if(is_Array($name)){      
    $errors=array();  
    /*多个文件上传则循环处理 ， 这个循环只有检查上传文件的作用，并没有真正上传 */  
    for($i = 0; $i &amp;lt; count($name); $i++){   
      /*设置文件信息 */  
      if($this-&amp;gt;setFiles($name[$i],$tmp_name[$i],$size[$i],$error[$i] )) {  
        if(!$this-&amp;gt;checkFileSize() || !$this-&amp;gt;checkFileType()){  
          $errors[] = $this-&amp;gt;getError();  
          $return=false;   
        }  
      }else{  
        $errors[] = $this-&amp;gt;getError();  
        $return=false;  
      }  
      /* 如果有问题，则重新初使化属性 */  
      if(!$return)            
        $this-&amp;gt;setFiles();  
    }  
   
    if($return){  
      /* 存放所有上传后文件名的变量数组 */  
      $fileNames = array();        
      /* 如果上传的多个文件都是合法的，则通过销魂循环向服务器上传文件 */  
      for($i = 0; $i &amp;lt; count($name); $i++){   
        if($this-&amp;gt;setFiles($name[$i], $tmp_name[$i], $size[$i], $error[$i] )) {  
          $this-&amp;gt;setNewFileName();   
          if(!$this-&amp;gt;copyFile()){  
            $errors[] = $this-&amp;gt;getError();  
            $return = false;  
          }  
          $fileNames[] = $this-&amp;gt;newFileName;    
        }            
      }  
      $this-&amp;gt;newFileName = $fileNames;  
    }  
    $this-&amp;gt;errorMess = $errors;  
    return $return;  
  /*上传单个文件处理方法*/  
  } else {  
    /* 设置文件信息 */  
    if($this-&amp;gt;setFiles($name,$tmp_name,$size,$error)) {  
      /* 上传之前先检查一下大小和类型 */  
      if($this-&amp;gt;checkFileSize() &amp;amp;&amp;amp; $this-&amp;gt;checkFileType()){   
        /* 为上传文件设置新文件名 */  
        $this-&amp;gt;setNewFileName();   
        /* 上传文件  返回0为成功， 小于0都为错误 */  
        if($this-&amp;gt;copyFile()){   
          return true;  
        }else{  
          $return=false;  
        }  
      }else{  
        $return=false;  
      }  
    } else {  
      $return=false;   
    }  
    //如果$return为false, 则出错，将错误信息保存在属性errorMess中  
    if(!$return)  
      $this-&amp;gt;errorMess=$this-&amp;gt;getError();    
   
    return $return;  
  }  
}  
   
/**  
 * 获取上传后的文件名称 
 * @param  void   没有参数 
 * @return string 上传后，新文件的名称， 如果是多文件上传返回数组 
 */  
public function getFileName(){  
  return $this-&amp;gt;newFileName;  
}  
   
/** 
 * 上传失败后，调用该方法则返回，上传出错信息 
 * @param  void   没有参数 
 * @return string  返回上传文件出错的信息报告，如果是多文件上传返回数组 
 */  
public function getErrorMsg(){  
  return $this-&amp;gt;errorMess;  
}  
   
/* 设置上传出错信息 */  
private function getError() {  
  $str = &quot;上传文件&amp;lt;font color=&#39;red&#39;&amp;gt;{$this-&amp;gt;originName}&amp;lt;/font&amp;gt;时出错 : &quot;;  
  switch ($this-&amp;gt;errorNum) {  
    case 4: $str .= &quot;没有文件被上传&quot;; break;  
    case 3: $str .= &quot;文件只有部分被上传&quot;; break;  
    case 2: $str .= &quot;上传文件的大小超过了HTML表单中MAX_FILE_SIZE选项指定的值&quot;; break;  
    case 1: $str .= &quot;上传的文件超过了php.ini中upload_max_filesize选项限制的值&quot;; break;  
    case -1: $str .= &quot;未允许类型&quot;; break;  
    case -2: $str .= &quot;文件过大,上传的文件不能超过{$this-&amp;gt;maxsize}个字节&quot;; break;  
    case -3: $str .= &quot;上传失败&quot;; break;  
    case -4: $str .= &quot;建立存放上传文件目录失败，请重新指定上传目录&quot;; break;  
    case -5: $str .= &quot;必须指定上传文件的路径&quot;; break;  
    default: $str .= &quot;未知错误&quot;;  
  }  
  return $str.&#39;&amp;lt;br&amp;gt;&#39;;  
}  
   
/* 设置和$_FILES有关的内容 */  
private function setFiles($name=&quot;&quot;, $tmp_name=&quot;&quot;, $size=0, $error=0) {  
  $this-&amp;gt;setOption(&#39;errorNum&#39;, $error);  
  if($error)  
    return false;  
  $this-&amp;gt;setOption(&#39;originName&#39;, $name);  
  $this-&amp;gt;setOption(&#39;tmpFileName&#39;,$tmp_name);  
  $aryStr = explode(&quot;.&quot;, $name);  
  $this-&amp;gt;setOption(&#39;fileType&#39;, strtolower($aryStr[count($aryStr)-1]));  
  $this-&amp;gt;setOption(&#39;fileSize&#39;, $size);  
  return true;  
}  
   
/* 为单个成员属性设置值 */  
private function setOption($key, $val) {  
  $this-&amp;gt;$key = $val;  
}  
   
/* 设置上传后的文件名称 */  
private function setNewFileName() {  
  if ($this-&amp;gt;israndname) {  
    $this-&amp;gt;setOption(&#39;newFileName&#39;, $this-&amp;gt;proRandName());    
  } else{   
    $this-&amp;gt;setOption(&#39;newFileName&#39;, $this-&amp;gt;originName);  
  }   
}  
   
/* 检查上传的文件是否是合法的类型 */  
private function checkFileType() {  
  if (in_array(strtolower($this-&amp;gt;fileType), $this-&amp;gt;allowtype)) {  
    return true;  
  }else {  
    $this-&amp;gt;setOption(&#39;errorNum&#39;, -1);  
    return false;  
  }  
}  
   
/* 检查上传的文件是否是允许的大小 */  
private function checkFileSize() {  
  if ($this-&amp;gt;fileSize &amp;gt; $this-&amp;gt;maxsize) {  
    $this-&amp;gt;setOption(&#39;errorNum&#39;, -2);  
    return false;  
  }else{  
    return true;  
  }  
}  
   
/* 检查是否有存放上传文件的目录 */  
private function checkFilePath() {  
  if(empty($this-&amp;gt;path)){  
    $this-&amp;gt;setOption(&#39;errorNum&#39;, -5);  
    return false;  
  }  
  if (!file_exists($this-&amp;gt;path) || !is_writable($this-&amp;gt;path)) {  
    if (!@mkdir($this-&amp;gt;path, 0755)) {  
      $this-&amp;gt;setOption(&#39;errorNum&#39;, -4);  
      return false;  
    }  
  }  
  return true;  
}  
   
/* 设置随机文件名 */  
private function proRandName() {      
  $fileName = date(&#39;YmdHis&#39;).&quot;_&quot;.rand(100,999);      
  return $fileName.&#39;.&#39;.$this-&amp;gt;fileType;   
}  
   
/* 复制上传文件到指定的位置 */  
private function copyFile() {  
  if(!$this-&amp;gt;errorNum) {  
    $path = rtrim($this-&amp;gt;path, &#39;/&#39;).&#39;/&#39;;  
    $path .= $this-&amp;gt;newFileName;  
    if (@move_uploaded_file($this-&amp;gt;tmpFileName, $path)) {  
      return true;  
    }else{  
      $this-&amp;gt;setOption(&#39;errorNum&#39;, -3);  
      return false;  
    }  
  } else {  
    return false;  
  }  
}     }   ``` **文件上传类的应用过程：**
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本列的文件上传类FileUpload，不仅支持单文件上传，也支持多文件上传。
  在处理方式上没有区别，只不过在编写上传表单时，多个文件上传一定要以数组方式传递给服务器。
  单个文件上传表单如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/PHP学习/fileClass_1.jpg&quot; alt=&quot;fileClass_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面表单都是，都将提交的位置指向了同一个文件upload.php，
  所以不难看出单个和多个文件上传是一样的处理方式，upload.php代码如下所示：
```
      &amp;lt;?php&lt;br /&gt;
      //包含一个文件上传类中的上传类&lt;br /&gt;
      include “fileupload.class.php”;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $up = new fileupload;  
  //设置属性(上传的位置， 大小， 类型， 名是是否要随机生成)  
  $up -&amp;gt; set(&quot;path&quot;, &quot;./images/&quot;);  
  $up -&amp;gt; set(&quot;maxsize&quot;, 2000000);  
  $up -&amp;gt; set(&quot;allowtype&quot;, array(&quot;gif&quot;, &quot;png&quot;, &quot;jpg&quot;,&quot;jpeg&quot;));  
  $up -&amp;gt; set(&quot;israndname&quot;, false);  
 
  //使用对象中的upload方法， 就可以上传文件， 方法需要传一个上传表单的名子 pic, 如果成功返回true, 失败返回false  
  if($up -&amp;gt; upload(&quot;pic&quot;)) {  
      echo &#39;&amp;lt;pre&amp;gt;&#39;;  
      //获取上传后文件名子  
      var_dump($up-&amp;gt;getFileName());  
      echo &#39;&amp;lt;/pre&amp;gt;&#39;;  
 
  } else {  
      echo &#39;&amp;lt;pre&amp;gt;&#39;;  
      //获取上传失败以后的错误提示  
      var_dump($up-&amp;gt;getErrorMsg());  
      echo &#39;&amp;lt;/pre&amp;gt;&#39;;  
  }     ?&amp;gt;&amp;lt;span id=&quot;transmark&quot; style=&quot;display: none; width: 0px; height: 0px;&quot;&amp;gt;&amp;lt;/span&amp;gt;   ```
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>Db类</title>
   <link href="http://127.0.0.1/mysql/2015/10/01/dbclass/"/>
   <updated>2015-10-01T00:00:00+08:00</updated>
   <id>http://127.0.0.1/mysql/2015/10/01/dbClass</id>
   <content type="html">&lt;hr /&gt;
&lt;!-- more --&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;class Db{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private $host;
private $host_name;
private $host_pwd;
private $dbname;

/*
 * 初始化数据
 */
function __construct(){
	$this-&amp;gt;host=&quot;127.0.0.1&quot;;
    $this-&amp;gt;host_name=&quot;root&quot;;
    $this-&amp;gt;host_pwd=&quot;root&quot;;
    $this-&amp;gt;dbname=&quot;my_php&quot;;
}

/*
 * 连接数据库
 */
function connect(){
	mysql_connect($this-&amp;gt;host,$this-&amp;gt;host_name,$this-&amp;gt;host_pwd) or die(&quot;连接数据库失败&quot;);
    mysql_select_db($this-&amp;gt;dbname) or die(&quot;选择数据库失败&quot;);
    mysql_query(&quot;set names utf8&quot;);
}

/*
 * 执行sql语句
 */
function db_query($sql){
    return mysql_query($sql);
}

/*
 * 添加数据
 * @param string $table 表名
 * @param array $arr 数据
 * @return  bool
 */
function addData($table,$arr){
    //对数据进行处理 得到键名串  得到值的串
    $str_key=&quot;&quot;;
    $str_val=&quot;&quot;;
    foreach($arr as $k=&amp;gt;$v){
        $str_key.=$k.&quot;,&quot;;
        $str_val.=&quot;&#39;$v&#39;,&quot;;
    }

    $keys=trim($str_key,&#39;,&#39;);
    $vals=trim($str_val,&#39;,&#39;);

    //写添加sql
    $sql=&quot;insert into $table($keys) values($vals)&quot;;

    //调用执行sql语句方法
    $bool=db_query($sql);
    if($bool){
        return true;
    }else{
        return false;
    }
}


/*
 * 查询多条数据
 * @param string $table 表名
 * @param $where 条件 可以不写
 * @return array或者bool
 */
function selectAll($table,$where=1){
    $sql=&quot;select * from $table where $where&quot;;

    //调用执行sql语句方法
    $re=db_query($sql);  //结果集

    //判断结果集中是否有数据
    if(mysql_num_rows($re)&amp;gt;0){
        while($arr=mysql_fetch_assoc($re)){
            $data[]=$arr;
        }
        return $data;
    }else{
        return false;
    }
}

/*
 * 查询一条数据
 * @param string $table 表名
 * @param string $where 条件
 * @return array或者bool
 */
function selectOne($table,$where){
    $sql=&quot;select * from $table where $where&quot;;

    //调用执行sql语句方法
    $re=db_query($sql);

    if(mysql_num_rows($re)&amp;gt;0){
        //取出数据
        $arr=mysql_fetch_assoc($re);
        return $arr;
    }else{
        return false;
    }
}

/*
 * 删除
 * @param string $table 表名
 * @param string $where 条件
 * @return bool
 */
function del($table,$where){
    $sql=&quot;delete from $table where $where&quot;;

    //调用执行sql语句方法
    $re=db_query($sql);
    //判断执行删除sql之后受影响的行数  mysql_affacted_rows
    if(mysql_affected_rows()&amp;gt;0){
        return true;
    }else{
        return false;
    }
}

/*
 * 修改
 * @param string $table 表名
 * @param array $data 要修改的数据
 * @param string $where 条件
 * @return $bool
 */
function upData($table,$data,$where=1){
    $str=&quot;&quot;;
    foreach($data as $k=&amp;gt;$v){
        $str.=($k.&quot;=&#39;$v&#39;,&quot;);
    }
    $new_str=rtrim($str,&#39;,&#39;);
    $sql=&quot;update $table set $new_str where $where&quot;;

    //调用执行sql语句方法
   $re=db_query($sql);

    //判断受影响的行数
    if(mysql_affected_rows()&amp;gt;0){
        return true;
    }else{
        return false;
    }
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pdo数据库操作</title>
   <link href="http://127.0.0.1/php/2015/08/05/pdo-and-database/"/>
   <updated>2015-08-05T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2015/08/05/pdo and database</id>
   <content type="html">&lt;hr /&gt;
&lt;!-- more --&gt;

&lt;h2 id=&quot;pdo&quot;&gt;PDO数据库总结&lt;/h2&gt;

&lt;p&gt;1 PDO 使用的必要性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Mysqli  虽然比MySQL更加优化但是只支持mysql 数据库，PDO 支持大部分数据库。而PDO支持大部分数据库，同时又很好的与处理机制、错误处理机制、面向对象的变成模式。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 PDO   数据库的流程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  （实例化PDO 对象 à 通过传递的数据库类型判断炒作数据库的方法，然后通过传过来的数据库信息连接数据库 à 连接成功通过PDO 的方法、属性及常量操作数据库进行增删改查）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个过程就是PDO 数据库抽象层&lt;/p&gt;

&lt;p&gt;3   PDO：mysql 官方封装的，采用的是面向对象的编程思想，使用c 语言开发的数据库抽象层&lt;/p&gt;

&lt;p&gt;4   如何使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  B 实例化PDO 对象，调用属性，方法。

  &amp;lt;?PHP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//连接数据库的信息&lt;/p&gt;

&lt;p&gt;//第一个参数:   连接数据库的类型:主机名；数据库名&lt;/p&gt;

&lt;p&gt;$db=”mysql:host=localhost;dbname=user”;&lt;/p&gt;

&lt;p&gt;$user=”root”;&lt;/p&gt;

&lt;p&gt;$pas=””;&lt;/p&gt;

&lt;p&gt;$pdo =new PDO($db,$user,$pas);&lt;/p&gt;

&lt;p&gt;$sql=”select* from user limit 2”;&lt;/p&gt;

&lt;p&gt;//查询语句使用  query() 返回的是PDOstatement对象&lt;/p&gt;

&lt;p&gt;//如果想获得具体的数据   则需要获得这个对象的方法   fetchAll()参数是类常量，表示返回什么格式的数据&lt;/p&gt;

&lt;p&gt;$result=$pdo-&amp;gt;query($sql);&lt;/p&gt;

&lt;p&gt;$rows=$result-&amp;gt;fetchAll(PDO::FETCH_BOTH);&lt;/p&gt;

&lt;p&gt;var_dump($rows);&lt;/p&gt;

&lt;p&gt;//增删改使用   PDOstatement 对象的exec()&lt;/p&gt;

&lt;p&gt;$sql1=”updateuser set user_name=’he’ where user_id=’1’”;&lt;/p&gt;

&lt;p&gt;$e=$pdo-&amp;gt;exec($sql1);&lt;/p&gt;

&lt;p&gt;var_dump($e);&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;5 预编译处理机制&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  流程：把操作的代码与要操作的数据分离开 à用PDO-&amp;gt;prepare() 把操作的代码预编译 à然后用预编译后返回的pdostatement对象的bindparam()绑定上数据à用预编译后返回的pdostatement对象的excute()方法执行代码

  &amp;lt;?php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//预编译：  PDO::prepare($sql);   返回PDOstatement对象&lt;/p&gt;

&lt;p&gt;//给预编译的结果绑定数据：PDOstatement-&amp;gt;bindParam();&lt;/p&gt;

&lt;p&gt;//执行编译结果：PDOstatement-&amp;gt;execute();&lt;/p&gt;

&lt;p&gt;$db=”mysql:host=localhost;dbname=user”;&lt;/p&gt;

&lt;p&gt;$user=”root”;&lt;/p&gt;

&lt;p&gt;$pas=””;&lt;/p&gt;

&lt;p&gt;$pdo =new PDO($db,$user,$pas);&lt;/p&gt;

&lt;p&gt;//先将sql语句中的数据部分用占位符代替     : 占位符名&lt;/p&gt;

&lt;p&gt;$sql=”insertinto user values(null,:name,:pass,:email)”;&lt;/p&gt;

&lt;p&gt;//预编译  prepre() 参数是不带任何数据的sql语句&lt;/p&gt;

&lt;p&gt;$re=$pdo-&amp;gt;prepare($sql);             //返回一个PDOstatement对象&lt;/p&gt;

&lt;p&gt;//绑定数据       返回的PDOstatement-&amp;gt;bindParam();&lt;/p&gt;

&lt;p&gt;$name=”hai”;&lt;/p&gt;

&lt;p&gt;$pass_word=’123’;&lt;/p&gt;

&lt;p&gt;$email=”com”;&lt;/p&gt;

&lt;p&gt;$re-&amp;gt;bindParam(‘:name’,$name);&lt;/p&gt;

&lt;p&gt;$re-&amp;gt;bindParam(‘:pass’,$pass_word);&lt;/p&gt;

&lt;p&gt;$re-&amp;gt;bindParam(‘:email’,$email);&lt;/p&gt;

&lt;p&gt;$re-&amp;gt;execute();&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;6 PDO 错误处理机制&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  在mysql中mysql_error()  mysql_errno() 获得错误的信息和错误的编号

  PDO 默认情况下不提示错误，只提示语法错误

  ErrorInfo() 获得错误的信息

  ErrorCode() 获得错误的编号

  &amp;lt;?php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//PDO::quote()方法，处理用户数据&lt;/p&gt;

&lt;p&gt;//习惯上，我们将需要参与sql执行的用户数据，采用quote方法进行处理，保证数据的正确性&lt;/p&gt;

&lt;p&gt;$db=”mysql:host=localhost;dbname=user”;&lt;/p&gt;

&lt;p&gt;$user=”root”;&lt;/p&gt;

&lt;p&gt;$pas=””;&lt;/p&gt;

&lt;p&gt;$pdo =new PDO($db,$user,$pas);&lt;/p&gt;

&lt;p&gt;$sql=”select* from goods limit 2”;&lt;/p&gt;

&lt;p&gt;$re=$sql-&amp;gt;fetchAll(PDO::FETCH_BOTH);&lt;/p&gt;

&lt;p&gt;$pdo-&amp;gt;errorInfo();&lt;/p&gt;

&lt;p&gt;?&amp;gt;&lt;/p&gt;

&lt;p&gt;通常默认的是静默模式：不提示&lt;/p&gt;

&lt;p&gt;警告模式：发出警告但是不影响代码继续向下执行&lt;/p&gt;

&lt;p&gt;异常模式：出现错误后抛出一个异常，需要捕获异常并作出处理否则会出现致命错误不再向下执行。&lt;/p&gt;

&lt;p&gt;如何切换模式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  使用pdo 的setAttribute(模式名称，模式的值)

  模式名称：PDO：：ATTR——ERRMODE

  模式的值：PDO::ERRMODE_WARNING警告 

        PDO::ERRMODE_SILENT 静默 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PDO::ERRMODE_EXCEPTION异常&lt;/p&gt;

&lt;p&gt;抛出异常及处理：&lt;/p&gt;

&lt;?php

$db=&quot;mysql:host=localhost;dbname=user&quot;;

$user=&quot;root&quot;;

$pas=&quot;&quot;;

$pdo =new PDO($db,$user,$pas);

//默认情况下 PDO是静默模式，如何切换呢？通过setAttribute()来切换模式，使用PDO这个类的方法

   //同样，errorInfo()  errorCode() 这些方法也是属于PDO这个类的，那么只能是PDO这个类的实例才能调用

   //模式也是

   //$pdo -&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);

   //异常模式：

   $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);

   $sql = &#39;select* from good&#39;;

   try{

        //尝试可能会出错误的代码

        $pdo -&gt;query($sql);

   }catch(PDOException$e){

        //现在捕获异常后，自己看着办，是让他显示出来呢，还是输出到日志文件里呢？

        //通常是将错误信息输出到日志文件里

        //var_dump($e-&gt;getMessage());

        file_put_contents(&#39;D://mysql.log&#39;,$e-&gt;getMessage());

   }

?&gt;

&lt;p&gt;补充：&lt;/p&gt;

&lt;p&gt;1，测试 PDO类的quote() 方法的作用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  quote可以给数据加上自身所带的符号，例如传递过来的变量值需要加单引号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2，比较PDOStatement对象的fetch(), fetchAll(), fetchColumn()方法的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  fetchAll()    获取pdostatement对象中的所有行数据 参数有FETCH_BOTH，FETCH_NUM，FETCH_ASSOC

  fetch()获取查询结果中一行记录并可以通过参数的不同显示的方式不同，可用循环实现显示所有航记录

  fetchColumn()  获得下一行的一列  可以通过循环获取多行的单一的列
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Mysqli数据库操作</title>
   <link href="http://127.0.0.1/php/2015/08/03/mysqli-and-database/"/>
   <updated>2015-08-03T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2015/08/03/mysqli and database </id>
   <content type="html">&lt;hr /&gt;

&lt;!-- more --&gt;

&lt;p&gt;1.　　与Mysql数据库交互时，首先要建立连接，最后要断开连接，这包括与服务器连接并选择一个数据库，以及最后关闭连接。与Mysql几乎所有的特性一样，这一点可以使用面向对象的方法来完成，也可以采用过程的方式完成。&lt;/p&gt;

&lt;p&gt;1.1　　创建一个Mysqli的对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 &amp;lt;?php
2 $mysqli=new mysqli();//实例化mysqli
3 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.2　　连接Mysql的主机、用户、密码、数据库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 &amp;lt;?php
2 $mysqli=new mysqli();//实例化mysqli
3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
4 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.3　　创建连接参数的Mysqli对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 &amp;lt;?php
2 $mysqli=new mysqli(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);//实例化mysqli
3 //$mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
4 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.4　　更换默认连接的数据库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 &amp;lt;?php
2 $mysqli=new mysqli();//实例化mysqli
3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
4 $mysqli-&amp;gt;select_db(&#39;abc&#39;);//更换连接默认的数据库为abc数据库
5 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
6 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2　　处理连接错误&lt;/p&gt;

&lt;p&gt;2.1　　如果无法连接Mysql数据库，那么这个页面不太可能继续完成预期的工作，因此，一定要注意监视连接错误并相应地做出反应。Mysqli拓展包含有很多特性可以用来抓取错误信息，例如：mysqli_connect_errno() 和 mysqli_connect_error()方法。&lt;/p&gt;

&lt;p&gt;1 mysqli_connect_errno()函数返回链接数据库返回的错误号。
2 mysqli_connect_error()函数返回连接数据库返回的错误代码。&lt;/p&gt;

&lt;p&gt;使用方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     echo&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error();
 6     exit();
 7 }else{
 8     echo &#39;数据库连接成功&#39;;
 9 }
10 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
11 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　这里用了面向过程的方法来判断数据库是否连接成功。那么为什么不用面向对象的方法判断呢？我的理解是 判断数据库连接成功 之前首先要证明你要实例化的对象是否可用。。所以用了面向过程的方法来判断。（如果有不对的地方大家也可以一起讨论讨论，我自己也是个小学渣）&lt;/p&gt;

&lt;p&gt;2.2　　mysqli_error——返回数据库操作错误信息。mysqli_errno——返回数据库操作错误代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     echo&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error();
 6     exit();
 7 }else{
 8     echo &#39;数据库连接成功&amp;lt;br/&amp;gt;&#39;;
 9 }
10 if (!$mysqli-&amp;gt;query(&quot;SET a=1&quot;)) {//$mysqli-&amp;gt;query()执行sql语句
11     echo &quot;错误信息是: &quot;.$mysqli-&amp;gt;error.&#39;&amp;lt;br/&amp;gt;&#39;;
12     echo &quot;错误代码是: &quot;.$mysqli-&amp;gt;errno;
13 }
14 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
15 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;数据库连接成功
错误信息是: Unknown system variable ‘a’
错误代码是: 1193&lt;/p&gt;

&lt;p&gt;3　　与数据库进行交互。&lt;/p&gt;

&lt;p&gt;① 绝大多数查询都与创建(Creation)、获取(Retrieval)、更新(Update)和删除(Deletion)任务有关，这些任务统称为CRUD。&lt;/p&gt;

&lt;p&gt;② 获取数据网页程序大多数工作都是在获取和格式化所请求的数据。为此，要向数据库发送SELECT查询，再对结果进行迭代处理，将各行输出给浏览器，并按照自己的要求输出。　&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 print_r($result-&amp;gt;fetch_row());//将结果集的第一行输出
11 $result-&amp;gt;free();//释放查询内存(销毁)
12 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
13 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/mysql.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;Array ( [0] =&amp;gt; 1 [1] =&amp;gt; 秋田嘉 [2] =&amp;gt; 123456 )&lt;/p&gt;

&lt;p&gt;3.1　　解析查询结果&lt;/p&gt;

&lt;p&gt;一旦执行了查询并准备好结果集，下面就可以解析获取到的结果行了。你可以使用多个方法来获取各行中的字段，具体选择哪一个方法主要取决于个人喜好，因为只是引用字段的方法有所不同。&lt;/p&gt;

&lt;p&gt;3.1.1　　将结果集放到对象中由于你可能会使用mysqli的面向对象的语法，所以完全可以采用面向对象的方式管理结果集。&lt;/p&gt;

&lt;p&gt;可以使用　　fetch_object()　　方法来完成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 /*
11 $row = $result-&amp;gt;fetch_object();//将结果集包装成对象
12 echo $row-&amp;gt;user;//输出对象中的一个字段（属性）
13 */
14 while (!!$row = $result-&amp;gt;fetch_object()){////遍历所有的用户名称
15 echo $row-&amp;gt;user.&quot;&amp;lt;br&amp;gt;&quot;;
16 var_dump($row);
17 }
18 $result-&amp;gt;free();//释放查询内存(销毁)
19 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
20 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;秋田嘉&lt;/p&gt;

&lt;p&gt;object(stdClass)#3 (3) { [“id”]=&amp;gt; string(1) “1” [“user”]=&amp;gt; string(9) “秋田嘉” [“psw”]=&amp;gt; string(6) “123456” }
刘德华&lt;/p&gt;

&lt;p&gt;object(stdClass)#4 (3) { [“id”]=&amp;gt; string(1) “2” [“user”]=&amp;gt; string(9) “刘德华” [“psw”]=&amp;gt; string(6) “654321” }&lt;/p&gt;

&lt;p&gt;3.1.2　　使用索引数组和关联数组　　fetch_array();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 
11 $row = $result-&amp;gt;fetch_array();//将结果集包装成数组(索引+关联)
12 echo $row[1].&#39;&amp;lt;br/&amp;gt;&#39;;//输出下标是1的字段（属性）
13 var_dump($row);
14 /*
15 while (!!$row = $result-&amp;gt;fetch_array()){//遍历全部
16 echo $row[1].&quot;&amp;lt;br/&amp;gt;&quot;;
17 }*/
18 
19 $result-&amp;gt;free();//释放查询内存(销毁)
20 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
21 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;秋田嘉
array(6) { [0]=&amp;gt; string(1) “1” [“id”]=&amp;gt; string(1) “1” [1]=&amp;gt; string(9) “秋田嘉” [“user”]=&amp;gt; string(9) “秋田嘉” [2]=&amp;gt; string(6) “123456” [“psw”]=&amp;gt; string(6) “123456” }&lt;/p&gt;

&lt;p&gt;3.1.3　　使用索引数组　　fetch_row();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 $row = $result-&amp;gt;fetch_row();//将结果集包装成索引数组
11 echo $row[2];
12 $result-&amp;gt;free();//释放查询内存(销毁)
13 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
14 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;123456&lt;/p&gt;

&lt;p&gt;3.1.4　　使用关联数组　　fetch_assoc();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 $row = $result-&amp;gt;fetch_assoc();//将结果集包装成关联数组
11 echo $row[&#39;psw&#39;];
12 $result-&amp;gt;free();//释放查询内存(销毁)
13 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
14 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;123456&lt;/p&gt;

&lt;p&gt;4　　确定所选择的行和受影响的行&lt;/p&gt;

&lt;p&gt;　　通常希望能够确定SELECT查询返回的行数，或者受INSERT、UPDATE或DELET查询影响的行数。&lt;/p&gt;

&lt;p&gt;我们可以使用num_rows和affected_rows两个属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 echo $result-&amp;gt;num_rows;//当使用查询时，想了解SELECT查询了多少行，可以使用num_rows。
11 echo&quot;&amp;lt;br/&amp;gt;&quot;;
12 echo $mysqli-&amp;gt;affected_rows;//当使用查询时，想了解SELECT、INSERT、UPDATE、DELETE查询时影响的行数，可以使用affected_rows;注意，它是$mysqli下的属性
13 $result-&amp;gt;free();//释放查询内存(销毁)
14 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
15 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;2
2&lt;/p&gt;

&lt;p&gt;5　　移动指针的操作和获取字段&lt;/p&gt;

&lt;p&gt;　　当你并不想从第一条数据开始获取，或者并不想从第一个字段获取，你可以使用数据指针移动或者字段指针移动的方式调整到恰当的位置。当然，你还可以获取字段的名称及其相关的属性&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 $sql=&#39;select * from user&#39;;//创建一句SQL语句
 9 $result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
10 echo $result-&amp;gt;field_count;//计算有多少条字段
11 echo&quot;&amp;lt;br/&amp;gt;&quot;;//输出 3
12 $field = $result-&amp;gt;fetch_field();//获取字段的名称
13 echo $field-&amp;gt;name;//输出id
14 echo &#39;&amp;lt;br/&amp;gt;&#39;;
15 while (!!$field = $result-&amp;gt;fetch_field()) {//遍历字段
16 echo $field-&amp;gt;name.&#39;&amp;lt;br /&amp;gt;&#39;;
17 }
18 $result-&amp;gt;free();//释放查询内存(销毁)
19 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
20 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;p&gt;3
id
user
psw&lt;/p&gt;

&lt;p&gt;5.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$mysqli=new mysqli();//实例化mysqli
$mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
if(mysqli_connect_error()){
    exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
}
$mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
$sql=&#39;select * from user&#39;;//创建一句SQL语句
$result=$mysqli-&amp;gt;query($sql);//执行sql语句把结果集赋给$result
print_r($result-&amp;gt;fetch_fields());//一次性取得字段数组
$result-&amp;gt;free();//释放查询内存(销毁)
$mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 Array
 2 (
 3     [0] =&amp;gt; stdClass Object
 4         (
 5             [name] =&amp;gt; id
 6             [orgname] =&amp;gt; id
 7             [table] =&amp;gt; user
 8             [orgtable] =&amp;gt; user
 9             [def] =&amp;gt; 
10             [db] =&amp;gt; test
11             [catalog] =&amp;gt; def
12             [max_length] =&amp;gt; 1
13             [length] =&amp;gt; 11
14             [charsetnr] =&amp;gt; 63
15             [flags] =&amp;gt; 49667
16             [type] =&amp;gt; 3
17             [decimals] =&amp;gt; 0
18         )
19 
20     [1] =&amp;gt; stdClass Object
21         (
22             [name] =&amp;gt; user
23             [orgname] =&amp;gt; user
24             [table] =&amp;gt; user
25             [orgtable] =&amp;gt; user
26             [def] =&amp;gt; 
27             [db] =&amp;gt; test
28             [catalog] =&amp;gt; def
29             [max_length] =&amp;gt; 9
30             [length] =&amp;gt; 765
31             [charsetnr] =&amp;gt; 33
32             [flags] =&amp;gt; 4097
33             [type] =&amp;gt; 253
34             [decimals] =&amp;gt; 0
35         )
36 
37     [2] =&amp;gt; stdClass Object
38         (
39             [name] =&amp;gt; psw
40             [orgname] =&amp;gt; psw
41             [table] =&amp;gt; user
42             [orgtable] =&amp;gt; user
43             [def] =&amp;gt; 
44             [db] =&amp;gt; test
45             [catalog] =&amp;gt; def
46             [max_length] =&amp;gt; 6
47             [length] =&amp;gt; 765
48             [charsetnr] =&amp;gt; 33
49             [flags] =&amp;gt; 4097
50             [type] =&amp;gt; 253
51             [decimals] =&amp;gt; 0
52         )
53 
54 )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.2　　&lt;/p&gt;

&lt;p&gt;1 $result-&amp;gt;data_seek(1);//移动数据指针
2 $result-&amp;gt;field_seek(1);//移动字段指针&lt;/p&gt;

&lt;p&gt;6　　执行多条SQL语句&lt;/p&gt;

&lt;p&gt;　　有的时候，我们需要在一张页面上同时执行多条SQL语句，之前的方法就是分别创建多个结果集然后使用。但这样资源消耗很大，也不利于管理。 PHP提供了执行多条SQL语句的方法$mysqli-&amp;gt;multi_query();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 //创建多条SQL语句
 9 $sql .= &quot;SELECT * FROM user;&quot;;
10 $sql .= &quot;SELECT * FROM photo;&quot;;
11 $sql .= &quot;SELECT * FROM article&quot;;
12 if ($mysqli-&amp;gt;multi_query($sql)) {//开始执行多条SQL语句
13 $result = $mysqli-&amp;gt;store_result();
14 print_r($result-&amp;gt;fetch_array());//开始获取第一条SQL语句的结果集
15 $mysqli-&amp;gt;next_result();//将结果集指针移到下一个
16 $result = $mysqli-&amp;gt;store_result();
17 print_r($result-&amp;gt;fetch_array());
18 $mysqli-&amp;gt;next_result();
19 $result = $mysqli-&amp;gt;store_result();
20 print_r($result-&amp;gt;fetch_array());
21 } else {
22 echo &#39;sql语句有误！&#39;;
23 }
24 $result-&amp;gt;free();//释放查询内存(销毁)
25 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
26 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7　　执行数据库事务&lt;/p&gt;

&lt;p&gt;事务(transaction)是作为整个一个单元的一组有序的数据库操作。如果一组中的所有操作都成功，则认为事务成功，即使只有一个失败操作，事务也不成功。如果所有操作成功完成，事务则提交(commit)，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚(roll back)，该事务所有操作的影响都将取消。首先，您的MySQL是InnoDB或BDB引擎的一种，一般来说，你安装了AppServ的集成包，你选择InnoDB的引擎的数据库即可。如果你建立的表不是InnoDB，可以在phpmyadmin里修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1 &amp;lt;?php
 2 $mysqli=new mysqli();//实例化mysqli
 3 $mysqli-&amp;gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;admin&#39;,&#39;test&#39;);
 4 if(mysqli_connect_error()){
 5     exit(&#39;数据库连接错误,错误信息是.&#39;.mysqli_connect_error());
 6 }
 7 $mysqli-&amp;gt;set_charset(&quot;UTF8&quot;);//设置数据库编码
 8 //首先你必须关闭自动提交数据
 9 $mysqli-&amp;gt;autocommit(false);
10 //创建一个SQL语句，必须同时运行成功，不能出现一个成功，一个失败
11 $sql .= &quot;UPDATE `friend` SET state=state+5 WHERE id=1;&quot;;
12 $sql .= &quot;UPDATE `flower` SET tg_flower=flower-5 WHERE id=1;&quot;;
13 //执行两条SQL语句
14 if ($mysqli-&amp;gt;multi_query($sql)) {
15 //获取第一条SQL一影响的行数
16 $success = $mysqli-&amp;gt;affected_rows == 1 ? true : false;
17 //下移，第二条SQL
18 $mysqli-&amp;gt;next_result();
19 //获取第二条SQL影响的行数
20 $success2 = $mysqli-&amp;gt;affected_rows == 1 ? true : false;
21 //判断是否都正常通过了，两个SQL
22 if ($success &amp;amp;&amp;amp; $success2) {
23 $mysqli-&amp;gt;commit();
24 echo &#39;完美提交！&#39;;
25 } else {
26 $mysqli-&amp;gt;rollback();
27 echo &#39;程序出现异常！&#39;;}
28 } else {
29 echo &quot;SQL语句有误：&quot;.$mysqli-&amp;gt;errno.$mysqli-&amp;gt;error;
30 }
31 //最后还必须开启自动提交
32 $mysqli-&amp;gt;autocommit(true);
33 $result-&amp;gt;free();//释放查询内存(销毁)
34 $mysqli-&amp;gt;close();//别忘了关闭你的&quot;小资源&quot;;
35 ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 阶段总结</title>
   <link href="http://127.0.0.1/javascript/2015/07/09/javascript-net/"/>
   <updated>2015-07-09T08:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/07/09/JavaScript-Net</id>
   <content type="html">&lt;p&gt;做了一张思维导图。总结这几个月对 JavaScript 的学习吧，也是一个复习。也是我目前的技能树。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-JavaScriptNet2.png&quot; alt=&quot;JavaScriptNet&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web App 相关技术</title>
   <link href="http://127.0.0.1/javascript/2015/06/17/web-app/"/>
   <updated>2015-06-17T22:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/06/17/web-app</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#head-&quot; id=&quot;markdown-toc-head-&quot;&gt;head 标签&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;页面切换动画&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#css-processing&quot; id=&quot;markdown-toc-css-processing&quot;&gt;CSS Processing&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;编译&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;补充&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;安全&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;分类&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#xss&quot; id=&quot;markdown-toc-xss&quot;&gt;关于 XSS&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#xss-&quot; id=&quot;markdown-toc-xss-&quot;&gt;XSS 防护&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;性能优化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;模块化&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#amd&quot; id=&quot;markdown-toc-amd&quot;&gt;AMD规范&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#commonjs&quot; id=&quot;markdown-toc-commonjs&quot;&gt;CommonJS规范&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#requirejs&quot; id=&quot;markdown-toc-requirejs&quot;&gt;为什么要用 requireJS&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#requirejs-1&quot; id=&quot;markdown-toc-requirejs-1&quot;&gt;requireJS&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#amdcmd&quot; id=&quot;markdown-toc-amdcmd&quot;&gt;AMD和CMD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;前端工程化&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;最终作品&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#todo-webapp-version&quot; id=&quot;markdown-toc-todo-webapp-version&quot;&gt;ToDo WebApp Version&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#details&quot; id=&quot;markdown-toc-details&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;其他&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#webkit-tap-highlight-color-&quot; id=&quot;markdown-toc-webkit-tap-highlight-color-&quot;&gt;&lt;code&gt;-webkit-tap-highlight-color&lt;/code&gt; 属性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#textarea--disabled-&quot; id=&quot;markdown-toc-textarea--disabled-&quot;&gt;textarea 标签 disabled 颜色&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;往前推2到3年，前端工程师还在忧心忡忡地想，移动互联网时代下，前端是不是没有生存空间了。但今天一看，在我们团队，前端工程师超过一半的工作都是在做移动端的Web或者APP的开发。移动Web或者APP在技术本质上是和做桌面端Web没有本质区别，但是移动端的坑那是非常的多，通过学习这部分内容，让你成为一名桌面移动通吃的前端开发工程师。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;概念&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;参考： &lt;a href=&quot;http://junmer.github.io/mobile-dev-get-started/&quot;&gt;移动 Web 开发入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面这个 slide 资料讲的非常好，算是一个入门的介绍吧。带我们建立基本的移动 web 开发知识体系和常见问题的实践。包含以下几个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本概念
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Native&lt;/p&gt;

        &lt;p&gt;本地应用 使用 Java \ Objective-C \ Swift 开发&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;WebApp&lt;/p&gt;

        &lt;p&gt;网页应用 html5 开发&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Hybrid&lt;/p&gt;

        &lt;p&gt;混合应用 ooxx(native, web)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;对比&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;视觉
    &lt;ul&gt;
      &lt;li&gt;设备的像素&lt;/li&gt;
      &lt;li&gt;文字单位使用 rem&lt;/li&gt;
      &lt;li&gt;viewport 属性&lt;/li&gt;
      &lt;li&gt;横屏竖屏&lt;/li&gt;
      &lt;li&gt;Flex 伸缩布局&lt;/li&gt;
      &lt;li&gt;响应式设计&lt;/li&gt;
      &lt;li&gt;软键盘&lt;/li&gt;
      &lt;li&gt;隐藏地址栏&lt;/li&gt;
      &lt;li&gt;苹果设备添加到主屏图标&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;交互
    &lt;ul&gt;
      &lt;li&gt;Touch&lt;/li&gt;
      &lt;li&gt;click 延迟&lt;/li&gt;
      &lt;li&gt;Scroll&lt;/li&gt;
      &lt;li&gt;Gestures(hammer –A javascript library for multi-touch gestures)&lt;/li&gt;
      &lt;li&gt;手指友好设计&lt;/li&gt;
      &lt;li&gt;HTML5 APIS（图像，摇动，声音等）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实践
    &lt;ul&gt;
      &lt;li&gt;屏蔽点击元素时的阴影&lt;/li&gt;
      &lt;li&gt;图像（像素、矢量图标、base64 减少请求、lazyload）&lt;/li&gt;
      &lt;li&gt;CSS3（合理使用渐变/圆角/阴影、代替 js 动画、translate3d、解决动画闪烁）&lt;/li&gt;
      &lt;li&gt;localStorage&lt;/li&gt;
      &lt;li&gt;避免（iframe、fixed + input）&lt;/li&gt;
      &lt;li&gt;SPA 或 Multi page&lt;/li&gt;
      &lt;li&gt;can I use&lt;/li&gt;
      &lt;li&gt;压缩合并&lt;/li&gt;
      &lt;li&gt;@G/3G 下建立连接时间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;调试
    &lt;ul&gt;
      &lt;li&gt;浏览器自己的调试工具，模拟手机设备&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;weinre&lt;/p&gt;

        &lt;p&gt;关于 weinre 我写了一篇博客介绍它。&lt;a href=&quot;http://gaohaoyang.github.io/2015/06/18/weinre/&quot;&gt;Weinre –WebApp 调试工具&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;head-&quot;&gt;head 标签&lt;/h2&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.css88.com/archives/5480&quot;&gt;移动前端不得不了解的html5 head 头标签&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的链接详细的讲解了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DOCTYPE&lt;/li&gt;
  &lt;li&gt;charset&lt;/li&gt;
  &lt;li&gt;lang属性&lt;/li&gt;
  &lt;li&gt;优先使用 IE 最新版本和 Chrome&lt;/li&gt;
  &lt;li&gt;360 使用Google Chrome Frame&lt;/li&gt;
  &lt;li&gt;SEO 优化部分：页面标题&lt;title&gt;标签(head 头部必须)，页面关键词 keywords，页面描述内容 description，定义网页作者 author，网页搜索引擎索引方式&lt;/title&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为移动设备添加 viewport&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;viewport&lt;/code&gt; 可以让布局在移动浏览器上显示的更好。 通常会写&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```html&lt;/p&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot; /&gt;

&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;content 参数：
    &lt;ul&gt;
      &lt;li&gt;width viewport 宽度(数值/device-width)&lt;/li&gt;
      &lt;li&gt;height viewport 高度(数值/device-height)&lt;/li&gt;
      &lt;li&gt;initial-scale 初始缩放比例&lt;/li&gt;
      &lt;li&gt;maximum-scale 最大缩放比例&lt;/li&gt;
      &lt;li&gt;minimum-scale 最小缩放比例&lt;/li&gt;
      &lt;li&gt;user-scalable 是否允许用户缩放(yes/no)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ios 设备，iOS 图标，Android，Windows 8&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt; &lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;&lt;/p&gt;
&lt;html lang=&quot;zh-cmn-Hans&quot;&gt; &lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;
&lt;head&gt;
    &lt;!-- 声明文档使用的字符编码 --&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;
    &lt;!-- 页面描述 --&gt;
    &lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot; /&gt;
    &lt;!-- 页面关键词 --&gt;
    &lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
    &lt;!-- 网页作者 --&gt;
    &lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot; /&gt;
    &lt;!-- 搜索引擎抓取 --&gt;
    &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;
    &lt;!-- 为移动设备添加 viewport --&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no&quot; /&gt;
    &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;

    &lt;!-- iOS 设备 begin --&gt;
    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot; /&gt;
    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;
    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;
    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;

    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot; /&gt;
    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;
    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;
    &lt;!-- 设置苹果工具栏颜色 --&gt;
    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;
    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;
    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;
    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot; /&gt;
    &lt;!-- 避免IE使用兼容模式 --&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;
    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;
    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot; /&gt;
    &lt;!-- 微软的老式浏览器 --&gt;
    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot; /&gt;
    &lt;!-- uc强制竖屏 --&gt;
    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot; /&gt;
    &lt;!-- QQ强制竖屏 --&gt;
    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot; /&gt;
    &lt;!-- UC强制全屏 --&gt;
    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot; /&gt;
    &lt;!-- QQ强制全屏 --&gt;
    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot; /&gt;
    &lt;!-- UC应用模式 --&gt;
    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot; /&gt;
    &lt;!-- QQ应用模式 --&gt;
    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot; /&gt;
    &lt;!-- windows phone 点击无高光 --&gt;
    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot; /&gt;
    &lt;!-- iOS 图标 begin --&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot; /&gt;
    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot; /&gt;
    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;
    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot; /&gt;
    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;
    &lt;!-- iOS 图标 end --&gt;

    &lt;!-- iOS 启动画面 begin --&gt;
    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot; /&gt;
    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;
    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot; /&gt;
    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;
    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot; /&gt;
    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;
    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot; /&gt;
    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;

    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot; /&gt;
    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;
    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot; /&gt;
    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;
    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot; /&gt;
    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;
    &lt;!-- iOS 启动画面 end --&gt;

    &lt;!-- iOS 设备 end --&gt;
    &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot; /&gt;
    &lt;!-- Windows 8 磁贴颜色 --&gt;
    &lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot; /&gt;
    &lt;!-- Windows 8 磁贴图标 --&gt;

    &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot; /&gt;
    &lt;!-- 添加 RSS 订阅 --&gt;
    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot; /&gt;
    &lt;!-- 添加 favicon icon --&gt;

    &lt;title&gt;标题&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;页面切换动画&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html&quot;&gt;移动端重构系列13——页面切换&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/css3-3d-transform.html&quot;&gt;CSS3 3D Transform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 HammerJS 的一个中文文档&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/iamlilinfeng/p/4239957.html&quot;&gt;Hammer.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;css-processing&quot;&gt;CSS Processing&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;CSS语言由于其自身语言设计的问题，加上一些浏览器兼容性问题，往往会使得我们在写它的时候，要写很多冗余代码，或者为了兼容性对同一个样式设定写好几遍。针对这些问题，诞生了CSS预处理和后处理的概念及相关方法、工具。&lt;/p&gt;

  &lt;p&gt;这些工具和方法帮助我们能够更加高效地书写可维护性更强的CSS代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里我尝试使用了 Sass，果然很好用。下面记录几个 sass 教程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/sassguide/&quot;&gt;Sass入门-w3cplus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/06/sass.html&quot;&gt;SASS用法指南-阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;首先要有 ruby 环境。&lt;/p&gt;

&lt;p&gt;由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的 https://rubygems.org 源，然后添加淘宝的源 https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入 sass 安装命令 &lt;code&gt;gem install sass&lt;/code&gt; 了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources --remove https://rubygems.org/
$ gem sources -a https://ruby.taobao.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install sass
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;编译&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sass --watch style.scss:style.css --style expanded
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;补充&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;rem&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;字体单位使用 rem，用户在手机上设置了字体大小时，不会打破布局，造成混乱。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/define-font-size-with-css3-rem&quot;&gt;CSS3的REM设置字体大小-w3cplus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.iyunlu.com/view/css-xhtml/76.html&quot;&gt;响应式十日谈第一日：使用 rem 设置文字大小-一丝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;安全&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;安全是大家经常容易忽视，但其实一旦出现影响会非常大的问题，尤其对于没有经历过企业开发，或者没有踩过坑的同学，如果等到公司工作，做实际项目后非常容易发生安全问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-6&quot;&gt;分类&lt;/h3&gt;

&lt;p&gt;WEB基本攻击大致可以分为三大类：“资源枚举”、“参数操纵” 和 “其它攻击”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源枚举&lt;/li&gt;
  &lt;li&gt;参数操纵
    &lt;ul&gt;
      &lt;li&gt;SQL注入&lt;/li&gt;
      &lt;li&gt;XPath注入&lt;/li&gt;
      &lt;li&gt;cgi命令执行&lt;/li&gt;
      &lt;li&gt;XXS（cross-site scripting跨域脚本攻击）其重点是“跨域”和“客户端执行”
        &lt;ul&gt;
          &lt;li&gt;Reflected XSS ——基于反射的XSS攻击。主要依靠站点服务端返回脚本，在客户端触发执行从而发起WEB攻击。&lt;/li&gt;
          &lt;li&gt;DOM-based or local XSS——基于DOM或本地的XSS攻击&lt;/li&gt;
          &lt;li&gt;Stored XSS——基于存储的XSS攻击&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;会话劫持&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其它攻击
    &lt;ul&gt;
      &lt;li&gt;CSRF（cross-site request forgery）跨站请求伪造&lt;/li&gt;
      &lt;li&gt;钓鱼攻击指的是网站的伪造，比如ta0bao.com，然后在其中应用XSS等方式发起攻击。&lt;/li&gt;
      &lt;li&gt;拒绝服务（DoS）指的是向网站发起洪水一样的请求（Traffic Floor），导致服务器超负荷并关闭，处理方法常规是采用QoS（Quality of Service）的软硬件解决方案。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xss&quot;&gt;关于 XSS&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;跨网站脚本&lt;/strong&gt;（Cross-site scripting，通常简称为XSS或跨站脚本或跨站脚本攻击）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。&lt;/p&gt;

  &lt;p&gt;XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java， VBScript， ActiveX， Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。&lt;/p&gt;

  &lt;p&gt;——维基百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;xss-&quot;&gt;XSS 防护&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器解析顺序：&lt;/p&gt;

    &lt;p&gt;HTML Parser » CSS Parser » JavaScript Parser&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器解码顺序：&lt;/p&gt;

    &lt;p&gt;HTML Decoding » URL Decoding » JavaScript Decoding&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;具体的防护方式：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;验证输入并且基于语境和按照正确的顺序转义不可信数据
        &lt;ul&gt;
          &lt;li&gt;HTML 中的字符串&lt;/li&gt;
          &lt;li&gt;HTML 属性中的字符串&lt;/li&gt;
          &lt;li&gt;事件句柄属性和 JavaScript 中的字符串&lt;/li&gt;
          &lt;li&gt;HTML 属性中的 URL 路径&lt;/li&gt;
          &lt;li&gt;HTML 风格属性和 CSS 中的字符串&lt;/li&gt;
          &lt;li&gt;JavaScript 中的 HTML&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;始终遵循白名单优于黑名单的做法&lt;/li&gt;
      &lt;li&gt;使用 UTF-8 为默认的字符编码以及设置 content 为 text/html&lt;/li&gt;
      &lt;li&gt;不要将用户可以控制的文本放在&lt;meta /&gt;标签前。通过使用不同的字符集注射可以导致 XSS。&lt;/li&gt;
      &lt;li&gt;使用 &amp;lt;!DOCTYPE html&amp;gt;&lt;/li&gt;
      &lt;li&gt;使用推荐的 HTTP 响应头进行 XSS 防护&lt;/li&gt;
      &lt;li&gt;防止 CRLF 注入/HTTP 响应拆分&lt;/li&gt;
      &lt;li&gt;禁止 TRACE 和其他非必要方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于 innerHTML 的方式输出的，我们可以采用如下的方式转码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
/**
 * 转码 XSS 防护
 * @param  {String} str 用户输入的字符串
 * @return {String}     转码后的字符串
 */
function changeCode(str) {
    str = str.replace(/&amp;amp;/g, &quot;&amp;amp;amp;&quot;)
              .replace(/&amp;lt;/g, &quot;&amp;amp;lt;&quot;)
              .replace(/&amp;gt;/g, &quot;&amp;amp;gt;&quot;)
              .replace(/&quot;/g, &quot;&amp;amp;quot;&quot;)
              .replace(/&#39;/g, &quot;&amp;amp;#x27;&quot;)
              .replace(/\//g, &quot;&amp;amp;#x2f;&quot;);
    return str;
}
&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/vajoy/p/4176908.html&quot;&gt;浅谈WEB安全性（前端向）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.freebuf.com/articles/web/40520.html&quot;&gt;XSS的原理分析与解剖&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fooying.com/chinese-translationthe-ultimate-xss-protection-cheatsheet-for-developers/&quot;&gt;原创翻译：给开发者的终极XSS防护备忘录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;性能优化&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在自己做一些小项目时，可能是学校的一些网站项目，流量可能日均都不超过500，而且大多是校园局域网内访问；或者是开发一些实验室的MIS系统，这辈子你都不会去使用你开发的这个系统。在这样一些项目中，性能优化往往会被你忽略。&lt;/p&gt;

  &lt;p&gt;但是如果你是做一个日均PV数万、数十万、甚至更大的量级，开发的页面会被全国各地，不同网络条件的用户来进行访问。这个时候，性能问题就无法忽视了。在当今的网络条件下，如果你的页面3秒都无法完成首屏渲染，一定会让你的网站流失很多用户。&lt;/p&gt;

  &lt;p&gt;整个网站的性能优化有很多的环节和工作，大多数时候，不是前端工程师单独就能完成的，尤其在职能划分明确的公司中，往往需要前后端、运维、DBA等多个职位协同完成。所以，在我们的课程中，主要让你了解整个性能优化都涉及哪些方面的工作，同时，我们会专注介绍一些在前端领域可以重点关注的技术点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里就是网页的打开速度，如果你的网页打开速度很慢，那么一定会有用户的流失。所以性能优化很重要。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网页内容
    &lt;ul&gt;
      &lt;li&gt;减少http请求次数&lt;/li&gt;
      &lt;li&gt;减少DNS查询次数&lt;/li&gt;
      &lt;li&gt;避免页面跳转&lt;/li&gt;
      &lt;li&gt;缓存Ajax&lt;/li&gt;
      &lt;li&gt;延迟加载&lt;/li&gt;
      &lt;li&gt;提前加载&lt;/li&gt;
      &lt;li&gt;减少DOM元素数量&lt;/li&gt;
      &lt;li&gt;根据域名划分内容&lt;/li&gt;
      &lt;li&gt;减少iframe数量&lt;/li&gt;
      &lt;li&gt;避免404&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;服务器
    &lt;ul&gt;
      &lt;li&gt;使用CDN&lt;/li&gt;
      &lt;li&gt;添加Expires 或Cache-Control报文头&lt;/li&gt;
      &lt;li&gt;Gzip压缩传输文件&lt;/li&gt;
      &lt;li&gt;配置ETags&lt;/li&gt;
      &lt;li&gt;尽早flush输出&lt;/li&gt;
      &lt;li&gt;使用GET Ajax请求&lt;/li&gt;
      &lt;li&gt;避免空的图片src&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cookie
    &lt;ul&gt;
      &lt;li&gt;减少Cookie大小&lt;/li&gt;
      &lt;li&gt;页面内容使用无cookie域名&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CSS
    &lt;ul&gt;
      &lt;li&gt;将样式表置顶&lt;/li&gt;
      &lt;li&gt;避免CSS表达式&lt;/li&gt;
      &lt;li&gt;用&amp;lt;link&amp;gt;代替@import&lt;/li&gt;
      &lt;li&gt;避免使用Filters&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Javascript
    &lt;ul&gt;
      &lt;li&gt;将脚本置底&lt;/li&gt;
      &lt;li&gt;使用外部Javascirpt和CSS文件&lt;/li&gt;
      &lt;li&gt;精简Javascript和CSS&lt;/li&gt;
      &lt;li&gt;去除重复脚本&lt;/li&gt;
      &lt;li&gt;减少DOM访问&lt;/li&gt;
      &lt;li&gt;使用智能事件处理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;图片
    &lt;ul&gt;
      &lt;li&gt;优化图像&lt;/li&gt;
      &lt;li&gt;优化CSS Sprite&lt;/li&gt;
      &lt;li&gt;不要在HTML中缩放图片&lt;/li&gt;
      &lt;li&gt;使用小且可缓存的favicon.ico&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;移动客户端
    &lt;ul&gt;
      &lt;li&gt;保持单个内容小于25KB&lt;/li&gt;
      &lt;li&gt;打包组建成符合文档&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体细节参考文章：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/developersupport/p/webpage-performance-best-practices.html&quot;&gt;毫秒必争，前端网页性能最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我在 ToDo 这个任务中主要使用了 CDN 来加载静态资源。比如我使用了 &lt;a href=&quot;http://cdn.code.baidu.com/&quot;&gt;百度静态资源公共库&lt;/a&gt;。引用了里面的 fontawesome，速度果然比在 GitHub 仓库里快很多。下一步是压缩我自己写的静态资源。&lt;/p&gt;

&lt;p&gt;其他参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oschina.net/translate/front-end-performance-for-web-designers-and-front-end-developers#section:maximising-parallelisation&quot;&gt;给网页设计师和前端开发者看的前端性能优化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/?p=3152&quot;&gt;梳理：提高前端性能方面的处理以及不足&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/mofish/archive/2010/10/12/1849062.html&quot;&gt;css sprite原理优缺点及使用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.qianduan.net/css-sprites-useful-technique-or-potential-nuisance/&quot;&gt;CSS Sprites：鱼翅还是三鹿？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/leefreeman/p/3998757.html&quot;&gt;大型网站的灵魂——性能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://web.jobbole.com/35339/&quot;&gt;编写高效的 CSS 选择器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-8&quot;&gt;模块化&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于一个复杂项目，特别是多人协作的复杂项目，如何合理划分模块，如何更加方便地进行模块加载，如何管理模块之间的依赖，是一个项目团队都会面临的问题，目前业界已经有了一些较为普遍的解决方案，如AMD。这个部分希望你能够通过学习JavaScript的模块化，学习如何合理地规划项目模块，合理使用模块化工具来优化你的项目代码结构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。&lt;/p&gt;

&lt;p&gt;根据AMD规范，我们可以使用 &lt;code&gt;define&lt;/code&gt; 定义模块，使用 &lt;code&gt;require&lt;/code&gt; 调用模块。&lt;/p&gt;

&lt;p&gt;目前，通行的 js 模块规范主要有两种：&lt;code&gt;CommonJS&lt;/code&gt; 和 &lt;code&gt;AMD&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;amd&quot;&gt;AMD规范&lt;/h3&gt;

&lt;p&gt;AMD 即 Asynchronous Module Definition，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是 CommonJS&lt;/p&gt;

&lt;p&gt;模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。&lt;/p&gt;

&lt;p&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。&lt;/p&gt;

&lt;p&gt;详细 API 如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88)&quot;&gt;AMD（中文版）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;commonjs&quot;&gt;CommonJS规范&lt;/h3&gt;

&lt;p&gt;CommonJS 是服务器端模块的规范，Node.js 采用了这个规范。Node.JS 首先采用了 js 模块化的概念。&lt;/p&gt;

&lt;p&gt;根据 CommonJS 规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为 global 对象的属性。&lt;/p&gt;

&lt;p&gt;输出模块变量的最好方法是使用 module.exports 对象。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;requirejs&quot;&gt;为什么要用 requireJS&lt;/h3&gt;

&lt;p&gt;试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。&lt;/p&gt;

&lt;p&gt;RequireJS就是为了解决这两个问题而诞生的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（1）实现js文件的异步加载，避免网页失去响应；
（2）管理模块之间的依赖性，便于代码的编写和维护。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;requirejs-1&quot;&gt;requireJS&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://requirejs.org/&quot;&gt;requireJS 官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.requirejs.cn/&quot;&gt;requireJS 中文网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;amdcmd&quot;&gt;AMD和CMD&lt;/h3&gt;

&lt;p&gt;CMD（Common Module Definition） 通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。
CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/242&quot;&gt;CMD 模块定义规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AMD:提前执行（异步加载：依赖先执行）+延迟执行
CMD:延迟执行（运行到需加载，根据顺序执行）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-9&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/10/javascript_module.html&quot;&gt;Javascript模块化编程（一）：模块的写法–阮一峰&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html&quot;&gt;Javascript模块化编程（二）：AMD规范&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/11/require_js.html&quot;&gt;Javascript模块化编程（三）：require.js的用法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000000733959&quot;&gt;详解 JavaScript 模块开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/jinguangguo/archive/2013/04/06/3002515.html?utm_source=tuicool&quot;&gt;浅谈模块化的JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://div.io/topic/430&quot;&gt;再谈 SeaJS 与 RequireJS 的差异&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;玩转AMD系列 by erik@EFE
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://efe.baidu.com/blog/dissecting-amd-preface/&quot;&gt;玩转AMD - 写在前面&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://efe.baidu.com/blog/dissecting-amd-what/&quot;&gt;玩转AMD - 设计思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://efe.baidu.com/blog/dissecting-amd-how/&quot;&gt;玩转AMD - 应用实践&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://efe.baidu.com/blog/dissecting-amd-loader/&quot;&gt;玩转AMD - Loader&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-10&quot;&gt;前端工程化&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;业界目前有非常多的前端开发工具，完成一些开发过程中可以自动化完成的工作，提高研发效率，并且可以提高多人协作时的开发过程一致性，提高整个项目的运维效率。&lt;/p&gt;

  &lt;p&gt;在EFE日常工作中，我们是基于EDP，完成项目开发过程中的项目构建、包管理、调试、单测、静态检测、打包、压缩、优化、项目部署等一系列所有工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;如果网络不好，可以使用 &lt;a href=&quot;http://npm.taobao.org/&quot;&gt;淘宝 NPM 镜像&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://div.io/topic/439&quot;&gt;前端工程与模块化框架&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mweb.baidu.com/p/baidusearch-front-end-road.html&quot;&gt;手机百度前端工程化之路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/yunlong-on-fis&quot;&gt;对话百度前端工程师张云龙：F.I.S与前端工业化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ecomfe/edp&quot;&gt;EDP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/tools/grunt-tutorial-start-grunt.html&quot;&gt;Grunt教程——初涉Grunt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.open-open.com/lib/view/open1417068223049.html&quot;&gt;gulp入门指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3ctech.com/topic/134&quot;&gt;Gulp开发教程（翻译）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gulpjs.com.cn/&quot;&gt;Gulp 中文网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ericdum/mujiang.info/issues/6&quot;&gt;npm的package.json中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-12&quot;&gt;最终作品&lt;/h2&gt;

&lt;p&gt;在任务三中，做了一个 PC 端的 ToDo 应用。任务四是将它优化，以适应移动端设备。&lt;/p&gt;

&lt;h3 id=&quot;todo-webapp-version&quot;&gt;ToDo WebApp Version&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/task/task0004&quot;&gt;任务四要求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ToDo-WebApp&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ToDo-WebApp/&quot;&gt;在线 demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;手机查看 ↓ 二维码 ↓&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/task4-code-todoWebApp.png&quot; alt=&quot;todoWebApp&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io&quot;&gt;我的博客 HyG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;details&quot;&gt;Details&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;数据存储&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;以 JSON 模拟数据表的形式存储于 LocalStorage 中&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;   使用数据库的思想，构建3张表。
   cateJson 分类
   childCateJson 子分类
   taskJson 任务

   分类表 cate
   ----------------------
   id* | name | child(FK)
   ----------------------

   子分类表 childCate
   --------------------------------
   id* | pid(FK) | name | child(FK)
   --------------------------------

   任务表 task
   ----------------------------------------------
   id* | pid(FK) | finish | name | date | content
   ----------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;使用 &lt;code&gt;Sass&lt;/code&gt; 重构了 CSS 代码&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用分块、继承等方式，使得代码更加清晰明了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;响应式布局&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;针对手机端细节做了很多调整，更符合手机上的视觉交互习惯。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;加入页面切换效果&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 &lt;code&gt;translate3d()&lt;/code&gt;，纯 CSS3 切换动画效果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;处理了 XSS 防护&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;对可能造成破坏的字符进行转码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 CDN 处理静态资源 fontAwesome，压缩静态资源等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;模块化&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 requireJS 模块化 JavaScript 代码。重构 JavaScript 代码。优化之前写的耦合性高的绑定事件，重新绑定事件，降低耦合性。期间根据具体需求重写了事件代理的代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;前端工程化&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 gulp，自动编译 Sass，压缩 CSS 和 JavaScript 代码。并且配置了自动流程。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-13&quot;&gt;其他&lt;/h2&gt;

&lt;h3 id=&quot;webkit-tap-highlight-color-&quot;&gt;&lt;code&gt;-webkit-tap-highlight-color&lt;/code&gt; 属性&lt;/h3&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/fiona23&quot;&gt;fiona&lt;/a&gt; 指出。&lt;/p&gt;

&lt;p&gt;safari移动端点击的时候会闪一下加上 &lt;code&gt;-webkit-tap-highlight-color: transparent;&lt;/code&gt; 就不会闪了。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.css88.com/webkit/-webkit-tap-highlight-color/&quot;&gt;&lt;code&gt;-webkit-tap-highlight-color&lt;/code&gt;  css88&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ued.ctrip.com/webkitcss/prop/tap-highlight-color.html&quot;&gt;&lt;code&gt;-webkit-tap-highlight-color&lt;/code&gt; 属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;textarea--disabled-&quot;&gt;textarea 标签 disabled 颜色&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;为什么用 disabled 属性？&lt;/p&gt;

    &lt;p&gt;因为我发现仅仅使用 readonly 属性，在 IE 下是显示光标的。于是使用 disabled。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;出现的问题&lt;/p&gt;

    &lt;p&gt;各家浏览器对于 disabled 属性有自己的样式设定，比如 IE 下是灰色的。苹果设备下也是。改变这些样式的方法也不是统一的。如果要兼容 Safari 必须加上&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
background: #fff;
-webkit-text-fill-color: rgba(0, 0, 0, 1);
-webkit-opacity: 1;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;于是最终代码如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
textarea:disabled {
    color:#000;
    background: #fff;
    -webkit-text-fill-color: rgba(0, 0, 0, 1);
    -webkit-opacity: 1;
}
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参考：&lt;a href=&quot;http://stackoverflow.com/a/4648315&quot;&gt;Disabled input text color 中的评论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 面向对象</title>
   <link href="http://127.0.0.1/javascript/2015/06/15/javascript-object-oriented/"/>
   <updated>2015-06-15T22:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/06/15/JavaScript-Object-Oriented</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;基于原型的继承&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#prototype-&quot; id=&quot;markdown-toc-prototype-&quot;&gt;prototype 属性与原型&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;例&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;原型链&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#objectcreatenull--bindnull&quot; id=&quot;markdown-toc-objectcreatenull--bindnull&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt; &amp;amp; &lt;code&gt;.bind(null)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prototype--1&quot; id=&quot;markdown-toc-prototype--1&quot;&gt;prototype 属性&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#prototype&quot; id=&quot;markdown-toc-prototype&quot;&gt;改变 prototype&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#prototype--2&quot; id=&quot;markdown-toc-prototype--2&quot;&gt;内置构造器的 &lt;code&gt;prototype&lt;/code&gt; 属性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#new&quot; id=&quot;markdown-toc-new&quot;&gt;创建对象-new/原型链&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#instanceof&quot; id=&quot;markdown-toc-instanceof&quot;&gt;instanceof&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;实现继承的方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;模拟重载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;调用子类方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;链式调用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;抽象类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;模块化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文为慕课网 &lt;a href=&quot;http://www.imooc.com/learn/277&quot;&gt;JavaScript深入浅出&lt;/a&gt;  JavaScript 面向对象笔记。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;概念&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。&lt;/p&gt;

  &lt;p&gt;——维基百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一般面向对象包含：继承，封装，多态，抽象&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;基于原型的继承&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function Foo() {
    this.y = 2;
}
console.log(typeof Foo.prototype); //object

Foo.prototype.x = 1;
var obj3 = new Foo();

console.log(obj3.y); //2
console.log(obj3.x); //1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建函数 &lt;code&gt;Foo&lt;/code&gt; 的时候，就会有一个内置的 &lt;code&gt;Foo.prototype&lt;/code&gt; 属性，并且这个属性是对象。&lt;/p&gt;

&lt;p&gt;在使用 &lt;code&gt;new Foo();&lt;/code&gt; 创建对象实例时。&lt;code&gt;this&lt;/code&gt; 会指向一个对象，并且这个对象的原型会指向 &lt;code&gt;Foo.prototype&lt;/code&gt; 属性。&lt;code&gt;this.y = 2&lt;/code&gt; 给这个对象赋值，并把这个对象返回。把这个对象赋值给 &lt;code&gt;obj3&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;y&lt;/code&gt; 是 &lt;code&gt;obj3&lt;/code&gt; 上的，&lt;code&gt;x&lt;/code&gt; 是 &lt;code&gt;obj3&lt;/code&gt; 的原型 &lt;code&gt;Foo.prototype&lt;/code&gt; 上的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-prototype.png&quot; alt=&quot;prototype&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;prototype-&quot;&gt;prototype 属性与原型&lt;/h3&gt;

&lt;p&gt;prototype 是函数对象上预设的对象属性。&lt;/p&gt;

&lt;p&gt;原型是对象上的原型，通常是构造器的 prototype 属性。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-2&quot;&gt;例&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;function Person(name, age) {
    this.name = name;
    this.age = age;
}

Person.prototype.LEGS_NUM = 2;
Person.prototype.ARMS_NUM = 2;

Person.prototype.hi = function() {
    console.log(&#39;Hi, my name is &#39; + this.name + &quot;. I&#39;m &quot; + this.age + &#39; years old now&#39;);
};

Person.prototype.walking = function() {
    console.log(this.name + &#39; is walking...&#39;);
};

function Student(name, age, className) {
    Person.call(this, name, age); //使 Person 中的 this 指向 Student
    this.className = className;
}

Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;

Student.prototype.hi = function() {
    console.log(&#39;Hi, my name is &#39; + this.name + &quot;. I&#39;m &quot; + this.age + &#39; years old now, and from &#39; + this.className + &quot;.&quot;);
};

Student.prototype.learn = function(subject) {
    console.log(this.name + &#39; is learning &#39; + subject + &#39; at &#39; + this.className + &#39;.&#39;);
}

//test
var gao = new Student(&#39;Gao&#39;, &#39;24&#39;, &#39;Class 3123&#39;);
console.log(gao); // 这个对象的具体内容见下图
gao.hi(); //Hi, my name is Gao. I&#39;m 24 years old now, and from Class 3123.
gao.LEGS_NUM; //2
gao.walking(); //Gao is walking...
gao.learn(&#39;JavaScript&#39;); //Gao is learning JavaScript at Class 3123.
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Object.create(arg)&lt;/code&gt; 创建一个空对象，并且这个对象的原型指向参数 &lt;code&gt;arg&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Student.prototype.constructor = Student&lt;/code&gt; 为了保证一致性，否则 constructor 指向 Person。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;原型链&lt;/h3&gt;

&lt;p&gt;gao 对象的原型链：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-oop-gao.png&quot; alt=&quot;Object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面通过图形展示原型链：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-原型链.png&quot; alt=&quot;原型链&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;objectcreatenull--bindnull&quot;&gt;&lt;code&gt;Object.create(null)&lt;/code&gt; &amp;amp; &lt;code&gt;.bind(null)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;这两种算是特例。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.create(null)&lt;/code&gt; 和 &lt;code&gt;.bind(null)&lt;/code&gt; 这两种方式创建出来的对象是没有 &lt;code&gt;prototype&lt;/code&gt; 属性的，为 &lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;prototype--1&quot;&gt;prototype 属性&lt;/h2&gt;

&lt;h3 id=&quot;prototype&quot;&gt;改变 prototype&lt;/h3&gt;

&lt;p&gt;JavaScript 中的 prototype 是对象，在运行的时候可以修改。&lt;/p&gt;

&lt;p&gt;给 prototype 添加或删除一些属性，是会影响到已经创建好的实例对象的。&lt;/p&gt;

&lt;p&gt;但是，直接修改 prototype 属性，是不会影响到已经创建好的实例对象的。但是会影响到新的实例对象。如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 上接上面的代码

// 给 prototype 添加或删除一些属性
Student.prototype.x = 101;
console.log(gao.x); //101

// 直接修改 prototype 属性
Student.prototype = {
    y: 2
};

// 不会影响到已创建好的实例对象
console.log(gao.x); //101
console.log(gao.y); //undefined

// 会影响到新创建的实例对象
var ying = new Student(&#39;Ying&#39;, 24, &#39;UI&#39;);
console.log(ying.x); //undefined
console.log(ying.y); //2
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;prototype--2&quot;&gt;内置构造器的 &lt;code&gt;prototype&lt;/code&gt; 属性&lt;/h3&gt;

&lt;p&gt;修改内置构造器的 &lt;code&gt;prototype&lt;/code&gt; 属性后，在实例化这个对象后，枚举其属性时，会把修改的内置构造器的 &lt;code&gt;prototype&lt;/code&gt; 属性也枚举出来，有时候这是要避免的。可用 &lt;code&gt;defineProperty&lt;/code&gt; 方法解决。如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Object.prototype.x = 1;
var obj = {};
console.log(obj.x); //1
console.log(obj);

for (var k in obj) {
    console.log(&#39;result---&amp;gt;&#39; + k);
}
// result---&amp;gt;x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;defineProperty&lt;/code&gt; 后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Object.defineProperty(Object.prototype, &#39;x&#39;, {
    writable: true,
    value: 1
});
var obj = {};
console.log(obj.x);//1
console.log(obj);
for (var k in obj) {
    console.log(&#39;result---&amp;gt;&#39; + k);
}
// nothing output here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实也可以这样枚举，使用 &lt;code&gt;hasOwnProperty&lt;/code&gt; 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
        console.log(&quot;result---&amp;gt;&quot; + key);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;new&quot;&gt;创建对象-new/原型链&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-new prototype.png&quot; alt=&quot;prototype&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;instanceof&quot;&gt;instanceof&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;console.log([1, 2] instanceof Array); //true
console.log([1, 2] instanceof Object); //true
console.log(new Object() instanceof Array); //false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;左边要求是对象，右边要求是构造器或函数。它会判断：&lt;strong&gt;右边的构造器中的 &lt;code&gt;prototype&lt;/code&gt; 属性是否出现在左边的对象的原型链上。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt;不同的 window 或 iframe 间的对象类型检测&lt;strong&gt;不能&lt;/strong&gt;使用 &lt;code&gt;instanceof&lt;/code&gt;！&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;实现继承的方式&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function Person() {}

function Student() {}

Student.prototype = Person.prototype; //1

Student.prototype = new Person(); //2

Student.prototype = Object.create(Person.prototype); //3

Student.prototype.constructor = Student;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释中：&lt;/p&gt;

&lt;p&gt;1 是错误的。如果改变了 Student 就会改变 Person&lt;/p&gt;

&lt;p&gt;2 可以实现继承，但是其调用了构造函数，若父类构造函数中有形参，那么传值就会比较奇怪。&lt;/p&gt;

&lt;p&gt;3 是最好的方法。创建了一个空对象，并且对象的原型指向参数 Person.prototype。这样便实现了继承。同时原型链写，不向上查找。但是 &lt;code&gt;Object.create&lt;/code&gt; 是ES5 中的方法，所以可以使用下列代码做兼容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!Object.create) {
    Object.create = function(proto) {
        function F() {}
        F.prototype = proto;
        return new F;
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;模拟重载&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function Person() {
    var args = arguments;
    if (typeof args[0] === &#39;object&#39; &amp;amp;&amp;amp; args[0]) {
        if (args[0].name) {
            this.name = args[0].name;
        }
        if(args[0].age){
            this.age = args[0].age;
        }
    } else {
        if (args[0]) {
            this.name = args[0];
        }
        if (args[1]) {
            this.age = args[1];
        }
    }
}

//重写 toString 方法
Person.prototype.toString = function() {
    console.log(&#39;name=&#39;+this.name+&#39;, age=&#39;+this.age);
};

var gao = new Person({name:&#39;Gao&#39;,age:24});
gao.toString(); // name=Gao, age=24

var ying = new Person(&#39;Ying&#39;,25);
ying.toString(); // name=Ying, age=25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对参数进行判断，模拟实现重载。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-6&quot;&gt;调用子类方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function Person(name) {
    this.name = name;
}

function Student(name, className) {
    this.className = className;
    Person.call(this, name); // 调用基类的构造器
}

var gao = new Student(&#39;Gao&#39;, &#39;3123&#39;);
console.log(gao); // Student {className: &quot;3123&quot;, name: &quot;Gao&quot;}

Person.prototype.init = function() {};

Student.prototype.init = function() {
    // do sth...
    Person.prototype.init.apply(this, arguments); // 同时也想调用父类被覆盖的方法
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主要是两种：调用父类的构造器，调用原型链上父类被覆盖的方法。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-7&quot;&gt;链式调用&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function ClassManager() {}
ClassManager.prototype.addClass = function(str) {
    console.log(&#39;Class: &#39; + str + &#39; added&#39;);
    return this;
};

var manager = new ClassManager();
manager.addClass(&#39;classA&#39;).addClass(&#39;classB&#39;).addClass(&#39;classC&#39;);
// Class: classA added
// Class: classB added
// Class: classC added
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重点在于 return this。返回这个 ClassManager 的实例。这样这个实例又可以继续调用方法。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-8&quot;&gt;抽象类&lt;/h2&gt;

&lt;p&gt;在构造器中 &lt;code&gt;throw new Error(&#39;&#39;);&lt;/code&gt; 抛异常。这样防止这个类被直接调用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function DetectorBase() {
    throw new Error(&#39;Abstract class can not be invoked directly!&#39;);
}

DetectorBase.detect = function() {
    console.log(&#39;Detection starting...&#39;);
}
DetectorBase.stop = function() {
    console.log(&#39;Detection stopped.&#39;);
};
DetectorBase.init = function() {
    throw new Error(&#39;Error&#39;);
}

var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!

function LinkDetector() {}
LinkDetector.prototype = Object.create(DetectorBase.prototype);
LinkDetector.prototype.constructor = LinkDetector;

var l = new LinkDetector();
console.log(l); //LinkDetector {}__proto__: LinkDetector
l.detect(); //Uncaught TypeError: l.detect is not a function
l.init(); //Uncaught TypeError: l.init is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;var d = new DetectorBase();&lt;/code&gt; 是不能实例化的，会报错&lt;/p&gt;

&lt;p&gt;&lt;code&gt;l.detect();&lt;/code&gt; 但是这个为什么报错我就不知道了。&lt;/p&gt;

&lt;p&gt;已经在原课程下提问了，期待老师的讲解。 &lt;a href=&quot;http://www.imooc.com/qadetail/82732&quot;&gt;抽象类中子类为什么不能调用父类的非抽象方法？&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;问题已经解决了，应该是老师当时的课件写错了，应该再基类中将这两个方法写在其原型 prototype 上。如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function DetectorBase() {
    throw new Error(&#39;Abstract class can not be invoked directly!&#39;);
}

DetectorBase.prototype.detect = function() {
    console.log(&#39;Detection starting...&#39;);
};
DetectorBase.prototype.stop = function() {
    console.log(&#39;Detection stopped.&#39;);
};
DetectorBase.prototype.init = function() {
    throw new Error(&#39;Error&#39;);
};

// var d = new DetectorBase();// Uncaught Error: Abstract class can not be invoked directly!

function LinkDetector() {}
LinkDetector.prototype = Object.create(DetectorBase.prototype);
LinkDetector.prototype.constructor = LinkDetector;

var l = new LinkDetector();
console.log(l); //LinkDetector {}__proto__: LinkDetector
l.detect(); //Detection starting...
l.init(); //Uncaught Error: Error
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-9&quot;&gt;模块化&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var moduleA;
moduleA = function() {
    var prop = 1;

    function func() {}

    return {
        func: func,
        prop: prop
    };
}(); // 立即执行匿名函数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;prop，func 不会被泄露到全局作用域。&lt;/p&gt;

&lt;p&gt;或者另一种写法，使用 new&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;moduleA = new function() {
    var prop = 1;

    function func() {}

    this.func = func;
    this.prop = prop;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更复杂的可以使用 Sea.js Kissy Require.js 模块化工具。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后补充一点设计模式相关的资料，我还没有来得及看的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.oschina.net/translate/learning-javascript-design-patterns&quot;&gt;学用 JavaScript 设计模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/29454/&quot;&gt;常用的Javascript设计模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.51cto.com/art/201109/288650_all.htm&quot;&gt;JavaScript设计模式深入分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 中的闭包</title>
   <link href="http://127.0.0.1/javascript/2015/06/14/javascript-closure/"/>
   <updated>2015-06-14T22:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/06/14/JavaScript-closure</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;闭包的例子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;常见错误之循环闭包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;封装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文为慕课网 &lt;a href=&quot;http://www.imooc.com/learn/277&quot;&gt;JavaScript深入浅出&lt;/a&gt; JavaScript 中的闭包笔记。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;闭包的例子&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function outer() {
    var localVal = 30;
    return localVal;
}

console.log(outer()); //30

function outer2() {
    var localVal = 30;
    return function() {
        return localVal;
    };
}

var func = outer2();
console.log(func()); //30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于第一个普通的函数，在执行过之后，它的局部变量就可以被释放。&lt;/p&gt;

&lt;p&gt;对于第二个函数，&lt;code&gt;localVal&lt;/code&gt; 是不能被释放的。因为调用 &lt;code&gt;outer2()&lt;/code&gt; 后，返回的是匿名函数，匿名函数可以访问外部的 &lt;code&gt;outer2()&lt;/code&gt; 中的局部变量，并返回了这个局部变量 localVal。当 &lt;code&gt;outer2()&lt;/code&gt; 赋值给 &lt;code&gt;func&lt;/code&gt; 后，再次调用 &lt;code&gt;func()&lt;/code&gt;，仍能访问到局部变量 &lt;code&gt;localVal&lt;/code&gt;。这种情况就是闭包。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;应用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;所谓闭包就是：子函数可以使用父函数中的局部变量。&lt;/strong&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  ! function() {
      var localData = &quot;localData here&quot;;
      document.addEventListener(&#39;click&#39;,
          function() {
              console.log(localData); //这里访问外部数据
          });
  }();

  ! function() {
      var localData = &quot;localData here&quot;;
      var url = &quot;http://www.baidu.com/&quot;;
      $.ajax({
          url: url,
          success: function() {
              // do sth...
              console.log(localData); //这里访问外部数据
          }
      });
  }()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;常见错误之循环闭包&lt;/h2&gt;

&lt;p&gt;比如我们想循环绑定点击事件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.body.innerHTML = &quot;&amp;lt;div id=div1&amp;gt;aaa&amp;lt;/div&amp;gt;&amp;lt;div id=div2&amp;gt;bbb&amp;lt;/div&amp;gt;&amp;lt;div id=div3&amp;gt;ccc&amp;lt;/div&amp;gt;&quot;;
for (var i = 1; i &amp;lt; 4; i++) {
    document.getElementById(&#39;div&#39; + i).
    addEventListener(&#39;click&#39;, function() {
        alert(i); // all are 4!
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码，我们点击任何一个 div，弹出的都是 4&lt;/p&gt;

&lt;p&gt;这是因为，for 循环中的 i 是一个全局变量。这里内函数的点击事件，访问到的是循环后的 i 值，所以是 4&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.body.innerHTML = &quot;&amp;lt;div id=div1&amp;gt;aaa&amp;lt;/div&amp;gt;&amp;lt;div id=div2&amp;gt;bbb&amp;lt;/div&amp;gt;&amp;lt;div id=div3&amp;gt;ccc&amp;lt;/div&amp;gt;&quot;;
for (var i = 1; i &amp;lt; 4; i++) {
    ! function(i) {
        document.getElementById(&#39;div&#39; + i).
        addEventListener(&#39;click&#39;, function() {
            alert(i); // 1, 2, 3
        });
    }(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里使用了立即执行函数，并给匿名函数赋值 i，这样点击事件每一次就会访问到相应的 i。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;封装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(function() {
    var _userId = 9527;
    var _typeId = &quot;item&quot;;
    var exp = {};

    function converter(userId) {
        return +userId;
    }

    exp.getUserId = function() {
        return converter(_userId);
    };

    exp.getTypeId = function() {
        return _typeId;
    };

    window.a = exp;
})();

console.log(a.getUserId()); //9527
console.log(a.getTypeId()); //item

console.log(a._userId); //undefined
console.log(a._typeId); //undefined
console.log(converter); //Uncaught ReferenceError: converter is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码通过闭包实现了一个封装。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;from 维基百科&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;闭包的优点
    &lt;ul&gt;
      &lt;li&gt;灵活和方便&lt;/li&gt;
      &lt;li&gt;封装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点
    &lt;ul&gt;
      &lt;li&gt;空间浪费&lt;/li&gt;
      &lt;li&gt;内存泄露&lt;/li&gt;
      &lt;li&gt;性能消耗&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 中的 this</title>
   <link href="http://127.0.0.1/javascript/2015/06/12/javascript-this/"/>
   <updated>2015-06-12T22:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/06/12/JavaScript-this</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#this&quot; id=&quot;markdown-toc-this&quot;&gt;全局的 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-1&quot; id=&quot;markdown-toc-this-1&quot;&gt;一般函数的 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-2&quot; id=&quot;markdown-toc-this-2&quot;&gt;作为对象方法的函数的 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-3&quot; id=&quot;markdown-toc-this-3&quot;&gt;对象原型链上的 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getset--this&quot; id=&quot;markdown-toc-getset--this&quot;&gt;get/set 方法与 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-4&quot; id=&quot;markdown-toc-this-4&quot;&gt;构造器中的 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#callapply--this&quot; id=&quot;markdown-toc-callapply--this&quot;&gt;call/apply 方法与 this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bind--this&quot; id=&quot;markdown-toc-bind--this&quot;&gt;bind 方法与 this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文为慕课网 &lt;a href=&quot;http://www.imooc.com/learn/277&quot;&gt;JavaScript深入浅出&lt;/a&gt; JavaScript 中的 this笔记。&lt;/p&gt;

&lt;h2 id=&quot;this&quot;&gt;全局的 this&lt;/h2&gt;

&lt;p&gt;全局 this 一般指向全局对象，浏览器中的全局对象就是 &lt;code&gt;window&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;```js
console.log(this.document === document); //true
console.log(this === window); //true&lt;/p&gt;

&lt;p&gt;this.a = 91;
console.log(window.a); //91
```&lt;/p&gt;

&lt;h2 id=&quot;this-1&quot;&gt;一般函数的 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
function f1 () {
    return this;
}
console.log(f1() === window);//true, global object
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function f2 () {
    &quot;use strict&quot;;//使用严格模式
    return this;
}
console.log(f1() === undefined);//true
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;严格模式中，函数的 this 为 undefined&lt;/p&gt;

&lt;h2 id=&quot;this-2&quot;&gt;作为对象方法的函数的 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
var o = {
    prop: 37,
    f: function() {
        return this.prop;
    }
};
console.log(o.f()); // 37
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上述代码通过字面量创建对象 o。&lt;/p&gt;

&lt;p&gt;f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。&lt;/p&gt;

&lt;p&gt;```js
var o = {
    prop: 37
};&lt;/p&gt;

&lt;p&gt;function independent() {
    return this.prop;
}
o.f = independent;
console.log(o.f()); // 37
```&lt;/p&gt;

&lt;p&gt;上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 &lt;code&gt;o.f = independent&lt;/code&gt; 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。&lt;/p&gt;

&lt;h2 id=&quot;this-3&quot;&gt;对象原型链上的 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
var o = {
    f: function() {
        return this.a + this.b;
    }
};
var p = Object.create(o);
p.a = 1;
p.b = 2;
console.log(p.f()); //3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过 &lt;code&gt;var p = Object.create(o)&lt;/code&gt; 创建的对象，p 是基于原型 o 创建出的对象。&lt;/p&gt;

&lt;p&gt;p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。&lt;/p&gt;

&lt;h2 id=&quot;getset--this&quot;&gt;get/set 方法与 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
function modulus() {
    return Math.sqrt(this.re * this.re + this.im * this.im);
}
var o = {
    re: 1,
    im: -1,
    get phase() {
        return Math.atan2(this.im, this.re);
    }
};
Object.defineProperty(o, &#39;modulus&#39;, {
    get: modulus,
    enumerable: true,
    configurable: true
});
console.log(o.phase, o.modulus); // -0.78 1.4142
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;get/set 方法中的 this 也会指向 get/set 方法所在的对象的。&lt;/p&gt;

&lt;h2 id=&quot;this-4&quot;&gt;构造器中的 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
function MyClass() {
    this.a = 25;
}
var o = new MyClass();
console.log(o.a); //25
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。&lt;/p&gt;

&lt;p&gt;```js
function C2() {
    this.a = 26;
    return {
        a: 24
    };
}&lt;/p&gt;

&lt;p&gt;o = new C2();
console.log(o.a); //24
```&lt;/p&gt;

&lt;p&gt;因为返回了对象，将这个对象作为返回值&lt;/p&gt;

&lt;h2 id=&quot;callapply--this&quot;&gt;call/apply 方法与 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
function add(c, d) {
    return this.a + this.b + c + d;
}
var o = {
    a: 1,
    b: 3
};
add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16
add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34
function bar() {
    console.log(Object.prototype.toString.call(this));
}
bar.call(7); // &quot;[object Number]&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;bind--this&quot;&gt;bind 方法与 this&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;js
function f() {
    return this.a;
}
var g = f.bind({
    a: &quot;test&quot;
});
console.log(g()); // test
var o = {
    a: 37,
    f: f,
    g: g
};
console.log(o.f(), o.g()); // 37, test
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 函数</title>
   <link href="http://127.0.0.1/javascript/2015/06/11/javascript-function/"/>
   <updated>2015-06-11T22:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/06/11/JavaScript-function</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;概念&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;调用方式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;函数声明与函数表达式&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;函数声明&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;函数表达式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;变量 &amp;amp; 函数的声明前置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#function-&quot; id=&quot;markdown-toc-function-&quot;&gt;Function 构造器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;对比&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arguments&quot; id=&quot;markdown-toc-arguments&quot;&gt;函数属性 &amp;amp; arguments&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#arguments-1&quot; id=&quot;markdown-toc-arguments-1&quot;&gt;函数属性 &amp;amp; arguments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#applycall-&quot; id=&quot;markdown-toc-applycall-&quot;&gt;apply/call 方法（浏览器）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bind-&quot; id=&quot;markdown-toc-bind-&quot;&gt;bind 方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#bind--currying&quot; id=&quot;markdown-toc-bind--currying&quot;&gt;bind 与 currying&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#bind--new&quot; id=&quot;markdown-toc-bind--new&quot;&gt;bind 与 new&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文为慕课网 &lt;a href=&quot;http://www.imooc.com/learn/277&quot;&gt;JavaScript深入浅出&lt;/a&gt; JavaScript 函数笔记。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;概念&lt;/h2&gt;

&lt;p&gt;函数是一块JavaScript代码，被定义一次，但可执行和调用多次。&lt;/p&gt;

&lt;p&gt;JS中的函数也是对象，所以JS函数可以像其它对象那样操作和传递。&lt;/p&gt;

&lt;p&gt;所以我们也常叫JS中的函数为函数对象。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function foo(x, y) {
    if (typeof x === &#39;number&#39; &amp;amp;&amp;amp;
        typeof y === &#39;number&#39;) {
        return x + y;
    } else {
        return 0;
    }
}
foo(1, 2); // 3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一般由3部分组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;函数名&lt;/li&gt;
  &lt;li&gt;参数列表&lt;/li&gt;
  &lt;li&gt;函数体&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;调用方式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;直接调用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
foo();
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
o.method();
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
new Foo();
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;call/apply/bind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
func.call(o);
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;函数声明与函数表达式&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;函数声明&lt;/h3&gt;

&lt;p&gt;就是对函数进行普通的声明&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function add(a, b) {
    return a + b;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;函数表达式&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;将函数赋值给变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
//function variable
var add = function(a, b) {
    // body...
};
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;立即执行函数&lt;/p&gt;

    &lt;p&gt;把匿名函数用括号括起来，再直接调用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
// IEF(Immediately Executed Function)
(function() {
    // body...
})();
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;函数对象作为返回值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
return function() {
    // body...
};
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命名式函数表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
//NFE(Named Function Expression)
var add = function foo(a, b) {
    // body...
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里大家肯定会好奇，这个函数怎么调用？到底用哪个名字呢？&lt;/p&gt;

&lt;p&gt;做一个测试：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var func = function nfe() {};
console.log(func === nfe);
// 在 IE6~8，得到 false
// 在 IE9+ 及现代浏览器中 Uncaught ReferenceError: nfe is not defined
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么命名函数表达式有什么使用场景呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一般用于调试方便，如果使用匿名函数，执行的时候看不到函数名，命名函数表达式是可以看到函数名的。&lt;/li&gt;
  &lt;li&gt;或者在递归时，使用名字调用自己。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是这两种用法都不常见。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;变量 &amp;amp; 函数的声明前置&lt;/h3&gt;

&lt;p&gt;举两个例子&lt;/p&gt;

&lt;p&gt;例1，函数声明：&lt;/p&gt;

&lt;p&gt;```js
var num = add(1,2);
console.log(num);&lt;/p&gt;

&lt;p&gt;function add(a, b) {
    return a + b;
}
```&lt;/p&gt;

&lt;p&gt;例2，函数表达式：&lt;/p&gt;

&lt;p&gt;```js
var num = add(1, 2);
console.log(num);&lt;/p&gt;

&lt;p&gt;var add = function(a, b) {
    return a + b;
};
```&lt;/p&gt;

&lt;p&gt;例1中得到的结果是 3，而例2中是 &lt;code&gt;Uncaught TypeError: add is not a function&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因为函数和变量在声明的时候，会被前置到当前作用域的顶端。例1将函数声明 &lt;code&gt;function add(a, b)&lt;/code&gt; 前置到作用域前端，例2将声明 &lt;code&gt;var add&lt;/code&gt; 前置到其作用域的前端了，并没有赋值。&lt;strong&gt;赋值的过程是在函数执行到响应位置的时候才进行的&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;function-&quot;&gt;Function 构造器&lt;/h3&gt;

&lt;p&gt;除了函数声明、函数表达式。还有一种创建函数对象的方式，是使用函数构造器。&lt;/p&gt;

&lt;p&gt;```js
var func = new Function(‘a’,’b’,’console.log(a+b);’);
func(1,2);//3&lt;/p&gt;

&lt;p&gt;var func2 = Function(‘a’,’b’,’console.log(a+b);’);
func2(1,2);//3
```&lt;/p&gt;

&lt;p&gt;Function 中前面的参数为后面函数体的形参，最后一个参数为函数体。可以看到传入的都是字符串，这样的创建函数对象的方法是不安全的。&lt;/p&gt;

&lt;p&gt;还有一点，Function 构造器的得到的函数对象，拿不到外层函数的变量，但是可以拿到全局变量。它的作用域与众不同，这也是很少使用的原因之一。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;对比&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-function.png&quot; alt=&quot;函数对比&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;arguments&quot;&gt;函数属性 &amp;amp; arguments&lt;/h2&gt;

&lt;h3 id=&quot;arguments-1&quot;&gt;函数属性 &amp;amp; arguments&lt;/h3&gt;

&lt;p&gt;```js
function foo(x, y, z) {
    arguments.length; // 2
    arguments[0]; // 1
    arguments[0] = 10;
    x; // change to 10&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arguments[2] = 100;
z; // still undefined!!!
arguments.callee === foo; // true }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;foo(1, 2);
foo.length; // 3
foo.name; //”foo”
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;foo.name&lt;/code&gt; 函数名&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;foo.length&lt;/code&gt; 形参个数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;arguments.length&lt;/code&gt; 实参个数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;未传参数时，arguments[i] 相应的位置仍然是 undefined。&lt;/p&gt;

&lt;p&gt;严格模式下，代码中的改变实参失效。即 x 仍为 1。同时 callee 属性失效。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;关于 &lt;code&gt;callee&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;callee 属性的初始值就是正被执行的 Function 对象。&lt;/p&gt;

    &lt;p&gt;callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿名函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时用于验证还是比较好的。&lt;/p&gt;

    &lt;p&gt;arguments.length是实参长度，arguments.callee.length是形参长度，由此可以判断调用时形参长度是否和实参长度一致。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;applycall-&quot;&gt;apply/call 方法（浏览器）&lt;/h3&gt;

&lt;p&gt;```js
function foo(x, y) {
    console.log(x, y, this);
}&lt;/p&gt;

&lt;p&gt;foo.call(100, 1, 2); //1 2 Number {[[PrimitiveValue]]: 100}
foo.apply(true, [3, 4]); //3 4 Boolean {[[PrimitiveValue]]: true}
foo.apply(null); //undefined undefined Window
foo.apply(undefined); //undefined undefined Window
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;call/apply 的作用：调用一个对象的一个方法，以另一个对象替换当前对象(其实就是更改对象的内部指针，即改变对象的this指向的内容)。&lt;/li&gt;
  &lt;li&gt;call/apply 的第一个参数为对象，即使不是对象，也会被包装为对象。&lt;/li&gt;
  &lt;li&gt;call 为扁平化传参，apply 后面的参数为数组&lt;/li&gt;
  &lt;li&gt;传入 null/undefined 时，实际为 Window 对象&lt;/li&gt;
  &lt;li&gt;在严格模式下：上述代码最后两行分别输出 &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bind-&quot;&gt;bind 方法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; 是 ES5 中提出的方法，所以浏览器支持为 IE9+ 及现代浏览器。&lt;/p&gt;

&lt;p&gt;```js
this.x = 9;
var module = {
    x: 81,
    getX: function() {
        return console.log(this.x);
    }
};&lt;/p&gt;

&lt;p&gt;module.getX(); //81&lt;/p&gt;

&lt;p&gt;var getX = module.getX;
getX(); //9&lt;/p&gt;

&lt;p&gt;var boundGetX = getX.bind(module);
boundGetX(); //81
```&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; 主要用于改变函数中的 &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;module.getX(); &lt;/code&gt; 直接通过对象调用自己的方法，结果是 81&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;var getX = module.getX;&lt;/code&gt; 将这个方法赋值给一个全局变量，这时 this 指向了 Window，所以结果为 9&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;var boundGetX = getX.bind(module);&lt;/code&gt; 使用 bind 绑定了自己的对象，这样 this 仍然指向 module 对象，所以结果为 81&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bind--currying&quot;&gt;bind 与 currying&lt;/h4&gt;

&lt;p&gt;bind 可以使函数柯里化，那么什么是柯里化？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由 Christopher Strachey 以逻辑学家 Haskell Curry 命名的，尽管它是 Moses Schnfinkel 和 Gottlob Frege 发明的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;```js
function add(a, b, c) {
    return a + b + c;
}&lt;/p&gt;

&lt;p&gt;var func = add.bind(undefined, 100);
func(1, 2); //103&lt;/p&gt;

&lt;p&gt;var func2 = func.bind(undefined, 200);
func2(10); //310
```&lt;/p&gt;

&lt;p&gt;add 函数拥有 3 个参数。我们想先传入一个参数，再去传其他参数。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var func = add.bind(undefined, 100);&lt;/code&gt; add 函数对象调用 bind 方法，由于不需要将 this 指向原来的 add 函数对象，所以第一个参数写为 undefined 或 null。第二个参数 100 传给了 add 函数中的形参 a，并赋值给一个新的函数对象 func。&lt;/p&gt;

&lt;p&gt;这时，&lt;code&gt;func(1, 2)&lt;/code&gt; 即相当于传入后两个参数，所以结果为 103。&lt;/p&gt;

&lt;p&gt;同理，基于 func 可以创造一个函数 func2。它只用传最后一个参数。&lt;/p&gt;

&lt;h4 id=&quot;bind--new&quot;&gt;bind 与 new&lt;/h4&gt;

&lt;p&gt;```js
function foo() {
    this.b = 100;
    return this.a;
}&lt;/p&gt;

&lt;p&gt;console.log(foo()); //undefined&lt;/p&gt;

&lt;p&gt;var func = foo.bind({
    a: 1
});&lt;/p&gt;

&lt;p&gt;console.log(func()); //1
console.log(new func()); //foo {b: 100}
```&lt;/p&gt;

&lt;p&gt;对于使用了 &lt;code&gt;new func()&lt;/code&gt; 这种方式创建对象，其返回值为一个对象。&lt;/p&gt;

&lt;p&gt;而原函数 foo 的返回值不是对象，所以会直接忽视这个 return 方法。而是变为 &lt;code&gt;return this;&lt;/code&gt;。并且 this 会被初始化为一个空对象，这个空对象的原型指向 foo.prototype。所以后面的 bind 是不起作用的。&lt;/p&gt;

&lt;p&gt;这里面这个 this 对象包含一个属性 &lt;code&gt;b = 100&lt;/code&gt;。所以返回的是对象 &lt;code&gt;{b: 100}&lt;/code&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>联想服务前端实习面试经历</title>
   <link href="http://127.0.0.1/interview/2015/06/01/lenovo-front-end-interview/"/>
   <updated>2015-06-01T22:06:05+08:00</updated>
   <id>http://127.0.0.1/interview/2015/06/01/lenovo-front-end-interview</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;宣讲会&amp;amp;初试&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;测试考题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;技术面试&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;笔试题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;电话面试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#boss-&quot; id=&quot;markdown-toc-boss-&quot;&gt;Boss 终面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;宣讲会&amp;amp;初试&lt;/h2&gt;

&lt;p&gt;现在想想也真是无心插柳的一次找实习。感觉不知不觉中自己真的进步了不少。&lt;/p&gt;

&lt;p&gt;首先在我们机房的楼下看到了宣传海报，5.28 有一个联想服务的宣讲会，我看到有前端工程师的岗位，想试试自己的水平如何，就去听了宣讲会。&lt;/p&gt;

&lt;p&gt;到了宣讲会现场，人不少，我坐在最后一排。开始就是一些介绍。包括 Future Leader 的介绍等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://job.xjtu.edu.cn/jobsHtml/153824064.html&quot;&gt;联想服务2015 Future leader实习生招聘&lt;/a&gt; 这是相关信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;宣讲会结束后有一个现场笔试。笔试不分专业，题目是数理逻辑推理题，并且是 10 道中文，10 道英文，最后一题是一个英语作文。我最不会做的就是这种题，当时做完都觉得没戏了，反正我觉得挺难的。&lt;/p&gt;

&lt;p&gt;5.29，第二天晚上收到短信同时初试通过了，有点惊喜，安排在 5.31 技术面试。随后凌晨 0:06（5.30）收到一封邮件，是给技术岗的一道技术测试考题，给一天的时间去做。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;测试考题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求如下：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;需要把解决问题的步骤，用图文并茂的形式写在word文档里；&lt;/li&gt;
  &lt;li&gt;把下载好的视频和音频上传到网盘中，并提供网盘链接。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;题目如下：&lt;/strong&gt;（提醒：如遇到链接无法打开，考虑使用翻墙的方法）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;需要把网络上一段视频存储下来（比如作为mp4）, 请实现并说出方法&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://fortune.com/video/2015/05/08/will-younger-executives-take-alibaba-into-its-digital-future&quot;&gt;http://fortune.com/video/2015/05/08/will-younger-executives-take-alibaba-into-its-digital-future&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要把网络上一段语音存储下来（比如作为mp3）, 请实现并说出方法&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://edge.media-server.com/m/p/odj2c5ie/lan/en&quot;&gt;http://edge.media-server.com/m/p/odj2c5ie/lan/en&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我花了一整天的时间做出来了，从早上 10 点做到晚上 9 点，期间也走了不少弯路。这里就不把答案公布出来了。因为这一次的招聘行程可能还没有结束，等结束再说吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;技术面试&lt;/h2&gt;

&lt;p&gt;对，我还没有准备简历。做完下载视频的测试题，回去又熬夜做了好看的简历，这里要感谢&lt;a href=&quot;http://weibo.com/u/1765712462?topnav=1&amp;amp;wvr=6&amp;amp;topsug=1&quot;&gt;英英&lt;/a&gt;的帮助，她帮我用 AI 制作的简历。她是一个优秀的平面设计师、网页设计师、UI设计师。&lt;/p&gt;

&lt;p&gt;5.31 早上起得很早，去打印简历，然后去等待面试。技术面试分为笔试和电话面试。上午 9:50 我们投递前端的同学做了一张前端相关的笔试题。只有 5 个人，我不知道是被初试淘汰了一部分还是在西安前端工程师还不怎么火。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;笔试题&lt;/h3&gt;

&lt;p&gt;半个小时的做题时间，笔试大部分考的都是 JavaScript。我回忆一下吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML 有哪些块级元素，与行内元素的区别。&lt;/li&gt;
  &lt;li&gt;怎么添加事件&lt;/li&gt;
  &lt;li&gt;JavaScript 代码实现数组去重&lt;/li&gt;
  &lt;li&gt;JavaScript 类怎么实现，继承，私有变量怎么实现&lt;/li&gt;
  &lt;li&gt;给了一段代码写出运行结果，这道题主要考了作用域和闭包的概念&lt;/li&gt;
  &lt;li&gt;Ajax 跨域怎么实现&lt;/li&gt;
  &lt;li&gt;是否使用过 Linux，是否熟悉 Linux 指令&lt;/li&gt;
  &lt;li&gt;Ajax 原理&lt;/li&gt;
  &lt;li&gt;服务端状态码的含义，比如：1xx，2xx，3xx，4xx，5xx&lt;/li&gt;
  &lt;li&gt;前端加载优化的方法
  我主要答了 JavaScript 加载优化的方法&lt;/li&gt;
  &lt;li&gt;怎么合并数组，删除数组指定位置的元素&lt;/li&gt;
  &lt;li&gt;……还有一些我想不起来了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些问题都不难，所以我答得很流畅，除了个别几个没有接触到的，答得不好。百度前端技术学院确实学到了不少东西，很多问题都在做任务的过程中遇到过。&lt;/p&gt;

&lt;p&gt;有意思的一点是，有一个女生在对着试题拍照，我并不反对拍照，拍就拍吧，但是你能不能把手机的快门声关掉，咔嚓咔嚓的……面试官也看到了，让她停止了拍照。&lt;/p&gt;

&lt;p&gt;收卷子和简历后，监考大概看了一下，直接现场淘汰了一个同学，因为他有大量空白，不会答的题。面试官对他说你这卷子肯定不及格，回去再加油吧。剩下的同学回去下午等电话面试。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;电话面试&lt;/h3&gt;

&lt;p&gt;我刚回去就接到电话了，非常快，我以为下午才会收到通知的。同时我以为面试官也在西安，我还傻傻的问他是不是现在去找他面试。他说他在北京。简历和笔试题已经拍照发到他手中了。&lt;/p&gt;

&lt;p&gt;于是电话面试就开始了。他说我笔试答得还不错，看我简历也有吸引他的几个地方，于是他就先给我打电话了。他问的问题都是围绕我的简历的。他问了我现在的一些基本情况。然后就是一些技术问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;百度前端学院&lt;/li&gt;
  &lt;li&gt;localStorage, sessionStorage, cookie&lt;/li&gt;
  &lt;li&gt;个人博客的创建&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;响应式布局&lt;/p&gt;

    &lt;p&gt;字体的控制，媒体查询中，文字大小应该使用 &lt;code&gt;em&lt;/code&gt; 或 &lt;code&gt;rem&lt;/code&gt; 做单位，不应该使用 &lt;code&gt;px&lt;/code&gt;。这个其实我是知道的，但是我没有用过，并且当时也忘了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;前端代码压缩&lt;/li&gt;
  &lt;li&gt;使用过什么框架，是否用过 jQuery&lt;/li&gt;
  &lt;li&gt;模块化框架&lt;/li&gt;
  &lt;li&gt;……还有一些，我还是想不起来了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;整个面试过程更像是聊天，我没有答好的地方，面试官也很耐心的给我讲了讲。最后他说他这边没什么问题，可以通过，然后会把相关信息反馈给 Hr，然后等待终面的通知。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;boss-&quot;&gt;Boss 终面&lt;/h2&gt;

&lt;p&gt;5.31 上午面试完，下午我回家了一趟。同时也在等待终面的通知。直到晚上 10:00 才收到终面的通知。6.
1 在钟楼饭店 10:30 Boss 终面。&lt;/p&gt;

&lt;p&gt;我 10:00 到达的地点，打电话给 Hr 他说让我等一下，于是 10:30 上楼，和 Boss Jerry 一对一终面。&lt;/p&gt;

&lt;p&gt;面试主要有问了这几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;之前下载视频的题目是怎么实现的，这个问的很详细&lt;/li&gt;
  &lt;li&gt;是否会翻墙&lt;/li&gt;
  &lt;li&gt;关于 GitHub 被 DDoS 攻击是怎么回事&lt;/li&gt;
  &lt;li&gt;你做项目遇到过的难点&lt;/li&gt;
  &lt;li&gt;怎么攻克难点的，为什么选择这种方法？&lt;/li&gt;
  &lt;li&gt;有没有尝试别的方法？&lt;/li&gt;
  &lt;li&gt;为什么不选择别的方法？&lt;/li&gt;
  &lt;li&gt;有没有发布过自己的应用、软件&lt;/li&gt;
  &lt;li&gt;个人博客为什么选择 Jekyll 实现&lt;/li&gt;
  &lt;li&gt;具体是怎么实现的，是否有响应式设计&lt;/li&gt;
  &lt;li&gt;除了 GitHub 还用过什么代码托管的网站&lt;/li&gt;
  &lt;li&gt;为什么选择 GitHub&lt;/li&gt;
  &lt;li&gt;技术来源有哪些，关于 StackOverFlow、知乎之类&lt;/li&gt;
  &lt;li&gt;……还有我想不起来了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要考察解决问题的能力，对技术的追求和探索。&lt;/p&gt;

&lt;p&gt;Boss说我回答问题时候有点喜欢先介绍一堆背景，自己探索的过程……有点啰嗦，应该直接切中要害，直接说做法就好了。&lt;/p&gt;

&lt;p&gt;嗯，最后，Boss 说他这关也问题不大，通过了，希望在北京能见到我。稍后 Hr 会联系我具体的实习事宜。&lt;/p&gt;

&lt;p&gt;End&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 作用域和作用域链</title>
   <link href="http://127.0.0.1/javascript/2015/05/20/scope/"/>
   <updated>2015-05-20T22:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/05/20/scope</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript-&quot; id=&quot;markdown-toc-javascript-&quot;&gt;JavaScript 作用域&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#global-scope&quot; id=&quot;markdown-toc-global-scope&quot;&gt;全局作用域(Global Scope)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#local-scope&quot; id=&quot;markdown-toc-local-scope&quot;&gt;局部作用域(Local Scope)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;再补充几个例子&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scope-chain&quot; id=&quot;markdown-toc-scope-chain&quot;&gt;作用域链(Scope Chain)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;例子&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;特例-构造器创建的函数&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;延长作用域链&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;代码优化&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vo--ao&quot; id=&quot;markdown-toc-vo--ao&quot;&gt;VO &amp;amp; AO&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;变量初始化阶段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;代码执行阶段&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javascript-&quot;&gt;JavaScript 作用域&lt;/h2&gt;

&lt;p&gt;作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;global-scope&quot;&gt;全局作用域(Global Scope)&lt;/h3&gt;

&lt;p&gt;在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下 3 种情形拥有全局作用域。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最外层函数和在最外层函数外面定义的变量拥有全局作用域&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;js
var outVariable = &quot;我是最外层变量&quot;; //最外层变量
function outFun() { //最外层函数
    var inVariable = &quot;内层变量&quot;;
    function innerFun() { //内层函数
        console.log(inVariable);
    }
    innerFun();
}
console.log(outVariable); //我是最外层变量
outFun(); //内层变量
console.log(inVariable); //inVariable is not defined
innerFun(); //innerFun is not defined
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;所有末定义直接赋值的变量自动声明为拥有全局作用域&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;js
function outFun2() {
    variable = &quot;未定义直接赋值的变量&quot;;
    var inVariable2 = &quot;内层变量2&quot;;
}
outFun2();//要先执行这个函数，否则根本不知道里面是啥
console.log(variable); //未定义直接赋值的变量
console.log(inVariable2); //inVariable2 is not defined
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;所有window对象的属性拥有全局作用域 &lt;br /&gt;
 window对象的内置属性都拥有全局作用域，例如 &lt;code&gt;window.name&lt;/code&gt;、&lt;code&gt;window.location&lt;/code&gt;、&lt;code&gt;window.top&lt;/code&gt; 等。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;local-scope&quot;&gt;局部作用域(Local Scope)&lt;/h3&gt;

&lt;p&gt;和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所有在一些地方也会看到有人把这种作用域称为函数作用域
。&lt;/p&gt;

&lt;p&gt;如 1. 中的变量 &lt;code&gt;inVariable&lt;/code&gt; 和函数 &lt;code&gt;innerFun&lt;/code&gt; 都只拥有局部作用域。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;再补充几个例子&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;全局作用域，函数作用域，eval作用域&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```js
var a = 10; // 全局&lt;/p&gt;

&lt;p&gt;(function() {
    var b = 20;// 函数
})();
console.log(a); // 10
console.log(b); // error, b in not defined&lt;/p&gt;

&lt;p&gt;eval(“var a = 1;”); // eval
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript 中没有块作用域&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
for (var item in {
    a: 1,
    b: 2
}) {
    console.log(item);
}
console.log(item); // item still in scope
&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;scope-chain&quot;&gt;作用域链(Scope Chain)&lt;/h2&gt;

&lt;p&gt;在 JavaScript 中，函数也是对象，实际上，JavaScript 里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供 JavaScript 引擎访问的内部属性。其中一个内部属性是 [[Scope]]，由 ECMA-262 标准第三版定义，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在函数创建时，它的作用域链中会填入一个全局对象，该全局对象包含了所有全局变量。&lt;/li&gt;
  &lt;li&gt;函数执行时会创建一个称为“运行期上下文(execution context)”的内部对象，运行期上下文定义了函数执行时的环境。每个运行期上下文都有自己的作用域链，用于标识符解析，当运行期上下文被创建时，而它的作用域链初始化为当前运行函数的[[Scope]]所包含的对象。&lt;/li&gt;
  &lt;li&gt;这些值按照它们出现在函数中的顺序被复制到运行期上下文的作用域链中。它们共同组成了一个新的对象，叫“活动对象(activation object)”，该对象包含了函数的所有局部变量、命名参数、参数集合以及this，然后此对象会被推入作用域链的前端。&lt;/li&gt;
  &lt;li&gt;当运行期上下文被销毁，活动对象也随之销毁。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在函数执行过程中，每遇到一个变量，都会经历一次标识符解析过程以决定从哪里获取和存储数据。该过程从作用域链头部，也就是从活动对象开始搜索，查找同名的标识符，如果找到了就使用这个标识符对应的变量，如果没找到继续搜索作用域链中的下一个对象，如果搜索完所有对象都未找到，则认为该标识符未定义。函数执行过程中，每个标识符都要经历这样的搜索过程。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;例子&lt;/h3&gt;

&lt;p&gt;举一个作用域链的例子。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var outVariable = &quot;我是最外层变量&quot;; //最外层变量
function outFun() { //最外层函数
    var inVariable = &quot;内层变量&quot;;
    function innerFun() { //内层函数
        console.log(inVariable);
        var tempVariable = inVariable;
    }
    innerFun();
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对最开始的代码稍加修改&lt;/p&gt;

&lt;p&gt;其作用域链为：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
window
├──outVariable
└──outFun()
   ├──inVariable
   └──innerFun()
      └──tempVariable
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对于 &lt;code&gt;innerFun()&lt;/code&gt;，其作用域链包含 3 个对象：innerFun() 自己的变量对象、outFun()的变量对象、全局变量对象。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;section-2&quot;&gt;特例-构造器创建的函数&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;js
function outer() {
    var i = 1;
    var func = new Function(&quot;console.log(typeof i);&quot;);
    func(); // undefined
}
outer();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过构造器创建的函数是访问不到外层的局部变量的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;延长作用域链&lt;/h3&gt;

&lt;p&gt;有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况下会发生这种现象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;try-catch&lt;/code&gt; 语句中的 &lt;code&gt;catch&lt;/code&gt; 块&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;with&lt;/code&gt; 语句&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对 with 来说，将会指定对象添加到作用域链中。对 catch 来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-4&quot;&gt;代码优化&lt;/h3&gt;

&lt;p&gt;从作用域链的结构可以看出，在运行期上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。因为全局变量总是存在于运行期上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;vo--ao&quot;&gt;VO &amp;amp; AO&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;变量初始化阶段&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JS解释器如何找到我们定义的函数和变量？&lt;/p&gt;

    &lt;p&gt;变量对象 (Variable Object, 缩写为VO) 是一个抽象概念中的“对象”，它用于存储执行上下文中的：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;变量&lt;/li&gt;
      &lt;li&gt;函数声明&lt;/li&gt;
      &lt;li&gt;函数参数&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VO按照如下顺序填充:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;函数参数 (若未传入，初始化该参数值为undefined)&lt;/li&gt;
      &lt;li&gt;函数声明 (若发生命名冲突，会覆盖)&lt;/li&gt;
      &lt;li&gt;变量声明 (初始化变量值为 undefined，若发生命名冲突，会忽略。)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```js
function foo(x, y, z) {
    function x() {};
    console.log(x);
}
foo(100); // funtion x()&lt;/p&gt;

&lt;p&gt;function foo2(x, y, z) {
    var x = 50;
    console.log(x);
}
foo2(110); // 50&lt;/p&gt;

&lt;p&gt;function foo3() {
    function x() {};
    var x = 100;
    console.log(x);
}
foo3(); // 100&lt;/p&gt;

&lt;p&gt;function foo4() {
    function x() {};
    var x;
    console.log(x);
}
foo4(); // funtion x()
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：函数表达式不会影响 VO&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-6&quot;&gt;代码执行阶段&lt;/h3&gt;

&lt;p&gt;给 VO 对象内的变量赋值。&lt;/p&gt;

&lt;p&gt;VO 变为 AO （活动对象 activation object）。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-7&quot;&gt;例&lt;/h3&gt;

&lt;p&gt;```js
alert(x); // function&lt;/p&gt;

&lt;p&gt;var x = 10;
alert(x); // 10
x = 20;&lt;/p&gt;

&lt;p&gt;function x() {}
alert(x); // 20&lt;/p&gt;

&lt;p&gt;if (true) {
    var a = 1;
} else {
    var b = true;
}&lt;/p&gt;

&lt;p&gt;alert(a); // 1
alert(b); // undefined
```&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-8&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.laruence.com/2009/05/28/863.html&quot;&gt;鸟哥：Javascript作用域原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lhb25/archive/2011/09/06/javascript-scope-chain.html&quot;&gt;理解 JavaScript 作用域和作用域链&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.imooc.com/learn/277&quot;&gt;JavaScript 深入浅出-慕课网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>前端的一些资料和工具</title>
   <link href="http://127.0.0.1/tools/2015/05/18/front-end-tools/"/>
   <updated>2015-05-18T22:06:05+08:00</updated>
   <id>http://127.0.0.1/tools/2015/05/18/front-end-tools</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;色彩与图标&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;CSS滤镜&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css-1&quot; id=&quot;markdown-toc-css-1&quot;&gt;渐变CSS代码生成器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#qq-16&quot; id=&quot;markdown-toc-qq-16&quot;&gt;QQ截图取色-16进制&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;配色&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;图标&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;数据处理&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#json&quot; id=&quot;markdown-toc-json&quot;&gt;Json&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;展示&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#revealjs&quot; id=&quot;markdown-toc-revealjs&quot;&gt;reveal.js&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里记录一些我用到的或者见到的比较好用方便的前端开发相关的工具吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;色彩与图标&lt;/h2&gt;

&lt;h3 id=&quot;css&quot;&gt;CSS滤镜&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cssreflex.com/css-generators/filter&quot;&gt;Filter Effects&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;界面：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-filter.png&quot; alt=&quot;Filter Effects&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;有各种各样的滤镜效果，可以直接调节参数观察变化。&lt;/p&gt;

    &lt;p&gt;值得一提的是，这个网站还有很多其他 css 生成器。&lt;/p&gt;

    &lt;p&gt;比如：Border Image, Border Radius, Box Shadow, Filter Effects, Multi-Column, Outline Border, Overflow(x,y), RGBa, Text Rotate, Text Shadow, Textarea Resize, Transform&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以访问这里去使用这些 css 生成器：&lt;a href=&quot;http://www.cssreflex.com/css-generators/&quot;&gt;CSS Generators&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;css-1&quot;&gt;渐变CSS代码生成器&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.colorzilla.com/gradient-editor/&quot;&gt;Ultimate CSS Gradient Generator&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;界面如下图：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-color-gradient.png&quot; alt=&quot;Ultimate CSS Gradient Generator&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;目前 css 写渐变还很复杂，但是用了这个工具简直太方便了，直接生成 css 代码，还能兼容 ie。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;qq-16&quot;&gt;QQ截图取色-16进制&lt;/h3&gt;

&lt;p&gt;在按下 &lt;code&gt;Ctrl+Shift+A&lt;/code&gt; 后，再按一下 &lt;code&gt;Ctrl&lt;/code&gt; 就可以看到截图框下面的颜色代码变成16进制的代码了。&lt;/p&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;普通截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-RBGScreenColor.png&quot; alt=&quot;normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按住 &lt;code&gt;Ctrl&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-hexSreenColor.png&quot; alt=&quot;press ctrl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到第一幅图中的 51, 51, 51 变成了 #333333。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;配色&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://nipponcolors.com/&quot;&gt;nipponcolors&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;日本的一个配色网站。罗列了很多不饱和经典的颜色，当然，自己选配还是很重要的。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-chooseColor.png&quot; alt=&quot;nipponcolors&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://color.adobe.com/zh/explore/most-popular/?time=all&quot;&gt;Adobe Color CC&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Adobe 出的在线配色工具，里面有些现成的配色方案还是很不错的。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-adobeColorCC.png&quot; alt=&quot;Adobe Color CC&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://paletton.com/&quot;&gt;paletton&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;提供了各种预览模式，可以在模板网站中预览，在色块中预览。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-paletton.png&quot; alt=&quot;paletton&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;图标&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.easyicon.net/&quot;&gt;easyicon&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;对中文的搜索支持很好。实际上它是先把中文翻译为英文再搜索的。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-icon.png&quot; alt=&quot;easyicon&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/icons/&quot;&gt;Font-Awesome&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;比上面介绍的那个好用的多，字体图标，不需要考虑像素大小，全部是矢量图。并且图标精美。如果不使用 BootStrap，单独添加图标的话，这一套图标在合适不过了。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-font awesome.png&quot; alt=&quot;Font-Awesome&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;iconfont.cn&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;阿里巴巴制作的图标库。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/iconfont.png&quot; alt=&quot;iconfont&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;数据处理&lt;/h2&gt;

&lt;h3 id=&quot;json&quot;&gt;Json&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://braincast.nl/samples/jsoneditor/&quot;&gt;json editor&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;将json数据输入进去，会生成一个树形的结构，方便查看每个节点。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-json.png&quot; alt=&quot;jsoneditor&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;展示&lt;/h2&gt;

&lt;h3 id=&quot;revealjs&quot;&gt;reveal.js&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js&quot;&gt;reveal.js&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;在网页上展示 slides 幻灯片，太酷了。针对不会代码的人还有一个在线编辑器：&lt;a href=&quot;http://slides.com&quot;&gt;http://slides.com&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;还有一个新手入门教程：&lt;a href=&quot;http://htmlcheats.com/reveal-js/reveal-js-tutorial-reveal-js-for-beginners/&quot;&gt;Reveal.js Tutorial-Reveal.js for Beginners&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/blog-revealjs.png&quot; alt=&quot;reveal&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文不定期更新。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>百度Web前端技术学院(2)-JavaScript 基础</title>
   <link href="http://127.0.0.1/javascript/2015/04/23/baidu-ife-2-javascript/"/>
   <updated>2015-04-23T03:06:05+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/04/23/baidu-ife-2-javascript</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;第一个页面交互&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#javascript&quot; id=&quot;markdown-toc-javascript&quot;&gt;了解JavaScript是什么&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#html--javascript-&quot; id=&quot;markdown-toc-html--javascript-&quot;&gt;如何在 HTML 页面加载 JavaScript 代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#script--body-&quot; id=&quot;markdown-toc-script--body-&quot;&gt;为什么把 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 放在 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 前&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#javascript-&quot; id=&quot;markdown-toc-javascript-&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript-1&quot; id=&quot;markdown-toc-javascript-1&quot;&gt;JavaScript数据类型及语言基础&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;数据类型概要&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;一些要点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;实践判断各种数据类型的方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;数组类型&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;值类型和引用类型的区别&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;对象的读取、遍历方式&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;深度克隆&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;对数组进行去重&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#array-&quot; id=&quot;markdown-toc-array-&quot;&gt;Array 对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#trim&quot; id=&quot;markdown-toc-trim&quot;&gt;实现 &lt;code&gt;trim()&lt;/code&gt;&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#string&quot; id=&quot;markdown-toc-string&quot;&gt;String对象&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fn-&quot; id=&quot;markdown-toc-fn-&quot;&gt;遍历数组，使每一个元素执行 &lt;code&gt;fn&lt;/code&gt; 函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;获取对象中第一层元素个数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;DOM&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;基本任务&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mini-&quot; id=&quot;markdown-toc-mini-&quot;&gt;mini $&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;事件&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;绑定注册事件与移除事件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#click--enter-&quot; id=&quot;markdown-toc-click--enter-&quot;&gt;click 与 enter 键事件绑定&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;事件代理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bom&quot; id=&quot;markdown-toc-bom&quot;&gt;BOM&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sessionstoragelocalstorage--cookie-&quot; id=&quot;markdown-toc-sessionstoragelocalstorage--cookie-&quot;&gt;sessionStorage、localStorage 和 cookie 之间的区别&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ajax&quot; id=&quot;markdown-toc-ajax&quot;&gt;Ajax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;练习1：处理兴趣列表&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;练习2：倒计时&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-23&quot; id=&quot;markdown-toc-section-23&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-24&quot; id=&quot;markdown-toc-section-24&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-25&quot; id=&quot;markdown-toc-section-25&quot;&gt;练习3：图片轮播&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-26&quot; id=&quot;markdown-toc-section-26&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-27&quot; id=&quot;markdown-toc-section-27&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-28&quot; id=&quot;markdown-toc-section-28&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-29&quot; id=&quot;markdown-toc-section-29&quot;&gt;关于变速运动&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-30&quot; id=&quot;markdown-toc-section-30&quot;&gt;练习4：输入框即时提示&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-31&quot; id=&quot;markdown-toc-section-31&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-32&quot; id=&quot;markdown-toc-section-32&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-33&quot; id=&quot;markdown-toc-section-33&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-34&quot; id=&quot;markdown-toc-section-34&quot;&gt;练习5：拖拽交互&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-35&quot; id=&quot;markdown-toc-section-35&quot;&gt;任务要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-36&quot; id=&quot;markdown-toc-section-36&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-37&quot; id=&quot;markdown-toc-section-37&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-38&quot; id=&quot;markdown-toc-section-38&quot;&gt;最终作品&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#update&quot; id=&quot;markdown-toc-update&quot;&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;百度前端学院的第二次任务笔记，JavaScript 基础。主要有JavaScript的定义，数据类型，对象，数组，字符串，正则表达式，DOM，事件，BOM，Ajax 等知识。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;任务&lt;/h2&gt;

&lt;p&gt;掌握JavaScript基础知识，能够使用JavaScript编写一些复杂度不大的交互功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt; &lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002&quot;&gt;JavaScript基础&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;做完任务一的时候深深地感觉到自己的基础非常的薄弱，在这里再次感谢一下百度前端技术学院，做任务的时候深刻理解了自己平时掌握不牢固的内容，比如浮动、BFC、等高布局等。继续加油吧！&lt;/p&gt;

&lt;p&gt;像上一篇文章一样，写些东西记录一下。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第一个页面交互&lt;/h2&gt;

&lt;p&gt;按照任务中的代码，在IE8下提示：&lt;code&gt;对象不支持“addEventListener”属性或方法&lt;/code&gt;  &lt;br /&gt;
我猜是IE8浏览器没有这个方法吧。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide&quot;&gt;JavaScript 指南-MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;javascript&quot;&gt;了解JavaScript是什么&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/JavaScript_Overview#What_is_JavaScript.3F&quot;&gt;来自MDN的解释&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript 是一种跨平台，面向对象的脚本语言。作为一种小巧且轻量级的语言，JavaScript 无意于独立运行，而是被设计为可以轻易嵌入到其它的产品和应用中，比如 Web 浏览器。在宿主环境中，JavaScript 可以被连接到环境中的对象之上，以提供对其的编程控制。&lt;/p&gt;

  &lt;p&gt;核心的 JavaScript 中包含有一组核心的对象，包括 Array，Date 和 Math，以及一组核心的语言要素，包括操作符，控制结构和语句。出于多种目的，可以通过为其增补附加的对象，对核心 JavaScript 加以扩展；例如：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;客户端 JavaScript 提供了用于控制浏览器（Navigator 或者其它浏览器）以及其中的文档对象模型（DOM）的对象，从而扩展了核心 JavaScript。例如，客户端扩展允许应用程序在 HTML 的表单中加入元素，以便响应用户事件，比如鼠标点击，表单输入和页面导航。&lt;/li&gt;
    &lt;li&gt;服务器端 JavaScript 提供了服务于在服务器上运行 JavaScript 的对象，从而扩展了核心 JavaScript。例如，服务器端扩展可以允许应用程序访问关系型数据库，在应用程序的不同调用间提供信息的连续性，甚至于处理服务器之上的文件。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;借由 JavaScript 的 LiveConnect 功能，您可以让 Java 和 JavaScript 间实现通讯。从 JavaScript 中，您可以创建 Java 对象并访问它们的公共方法和域。从 Java 中，也可以访问 JavaScript 的对象，属性和方法。&lt;/p&gt;

  &lt;p&gt;Netscape 发明了 JavaScript 并将 JavaScript 首先用于 Netscape 浏览器中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;html--javascript-&quot;&gt;如何在 HTML 页面加载 JavaScript 代码&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签在 HTML 文件中添加 JavaScript 代码。&lt;/p&gt;

&lt;p&gt;我们可以将 &lt;code&gt;JavaScript&lt;/code&gt; 代码放在 &lt;code&gt;html&lt;/code&gt; 文件中任何位置，但是我们一般放在网页的 &lt;code&gt;head&lt;/code&gt; 或者 &lt;code&gt;body&lt;/code&gt; 部分。&lt;/p&gt;

&lt;p&gt;放在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 部分  &lt;br /&gt;
最常用的方式是在页面中head部分放置 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素，浏览器解析 &lt;code&gt;head&lt;/code&gt; 部分就会执行这个代码，然后才解析页面的其余部分。&lt;/p&gt;

&lt;p&gt;放在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 部分  &lt;br /&gt;
JavaScript 代码在网页读取到该语句的时候就会执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: javascript 作为一种脚本语言可以放在 html 页面中任何位置，但是浏览器解释 html 时是按先后顺序的，所以前面的 script 就先被执行。比如进行页面显示初始化的 js 必须放在 head 里面，因为初始化都要求提前进行（如给页面 body 设置 css 等）；而如果是通过事件调用执行的 function 那么对位置没什么要求的。&lt;/p&gt;

&lt;h3 id=&quot;script--body-&quot;&gt;为什么把 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 放在 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 前&lt;/h3&gt;

&lt;p&gt;虽然理论上放在哪里都是可以的，但是对于前端页面优化来讲，还是放在底部是最佳的，因为如果JS执行出现错误了，最起码页面中的元素还能加载出来，因为DOM文档是从上往下的顺序执行的。    如果你还不了解DOM的加载顺序，请阅读jQuery中ready与load事件的区别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;下面是重点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;按照HTML5标准中的HTML语法规则，如果在 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 后再出现 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 或任何元素的开始标签，都是parse error，浏览器会忽略之前的 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; ，即视作仍旧在body内。所以实际效果和写在 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 之前是没有区别的。&lt;/p&gt;

&lt;p&gt;总之，这种写法虽然也能work，但是并没有带来任何额外好处，实际上出现这样的写法很可能是误解了“将script放在页面最末端”的教条。所以还是不要这样写为好。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20027966&quot;&gt;script在body闭合标签之后还是之前-知乎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19617126&quot;&gt;body 和 html 标签均没有关闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;javascript-&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;扩展阅读：&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/1308_caiys_jsload/index.html&quot;&gt;JavaScript 的性能优化：加载和执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;脚本位置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于脚本会阻塞页面其他资源的下载，因此推荐将所有 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签尽可能放到 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签的底部，以尽量减少对整个页面下载的影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;组织脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于每个 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签初始下载时都会阻塞页面渲染，所以减少页面包含的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签数量有助于改善这一情况。这不仅针对外链脚本，内嵌脚本的数量同样也要限制。浏览器在解析 HTML 页面的过程中每遇到一个 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，都会因执行脚本而导致一定的延时，因此最小化延迟时间将会明显改善页面的总体性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无阻塞的脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;减少 JavaScript 文件大小并限制 HTTP 请求数在功能丰富的 Web 应用或大型网站上并不总是可行。Web 应用的功能越丰富，所需要的 JavaScript 代码就越多，尽管下载单个较大的 JavaScript 文件只产生一次 HTTP 请求，却会锁死浏览器的一大段时间。为避免这种情况，需要通过一些特定的技术向页面中逐步加载 JavaScript 文件，这样做在某种程度上来说不会阻塞浏览器。&lt;/p&gt;

&lt;p&gt;无阻塞脚本的秘诀在于，在页面加载完成后才加载 JavaScript 代码。这就意味着在 window 对象的 onload事件触发后再下载脚本。有多种方式可以实现这一效果。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;延迟加载脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML 4 为 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签定义了一个扩展属性：defer。Defer 属性指明本元素所含的脚本不会修改 DOM，因此代码能安全地延迟执行。&lt;/p&gt;

&lt;p&gt;带有 defer 属性的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签可以放置在文档的任何位置。对应的 JavaScript 文件将在页面解析到 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签时开始下载，但不会执行，直到 DOM 加载完成，即onload事件触发前才会被执行。当一个带有 defer 属性的 JavaScript 文件下载时，它不会阻塞浏览器的其他进程，因此这类文件可以与其他资源文件一起并行下载。&lt;/p&gt;

&lt;p&gt;对于如下代码：&lt;/p&gt;

&lt;p&gt;```html&lt;/p&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Script Defer Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script type=&quot;text/javascript&quot; defer=&quot;&quot;&gt;
        alert(&quot;defer&quot;);
    &lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        alert(&quot;script&quot;);
    &lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        window.onload = function(){
            alert(&quot;load&quot;);
        };
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;在支持 defer 属性的浏览器上，弹出的顺序则是：”script”、”defer”、”load”。请注意，带有 defer 属性的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素不是跟在第二个后面执行，而是在 onload 事件被触发前被调用。&lt;/p&gt;

&lt;p&gt;引用的资料可能写的比较早，在 &lt;a href=&quot;http://caniuse.com/#search=defer&quot;&gt;CanIUse&lt;/a&gt; 上查了一下 defer 发现大部分浏览器都是支持的。如下图： &lt;br /&gt;
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-defer.jpg&quot; alt=&quot;defer的支持情况&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTML 5 为 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签定义了一个新的扩展属性：async。它的作用和 defer 一样，能够异步地加载和执行脚本，不因为加载脚本而阻塞页面的加载。但是有一点需要注意，在有 async 的情况下，JavaScript 脚本一旦下载好了就会执行，所以很有可能不是按照原本的顺序来执行的。如果 JavaScript 脚本前后有依赖性，使用 async 就很有可能出现错误。&lt;/p&gt;

&lt;p&gt;IE8,9不支持 &lt;code&gt;async&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;动态脚本元素&lt;/li&gt;
  &lt;li&gt;使用 XMLHttpRequest(XHR)对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;原文中的总结&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;减少 JavaScript 对性能的影响有以下几种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将所有的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签放到页面底部，也就是 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 闭合标签之前，这能确保在脚本执行前页面已经完成了渲染。&lt;/li&gt;
  &lt;li&gt;尽可能地合并脚本。页面中的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签越少，加载也就越快，响应也越迅速。无论是外链脚本还是内嵌脚本都是如此。&lt;/li&gt;
  &lt;li&gt;采用无阻塞下载 JavaScript 脚本的方法：
    &lt;ul&gt;
      &lt;li&gt;使用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签的 defer 属性（仅适用于 IE 和 Firefox 3.5 以上版本）；&lt;/li&gt;
      &lt;li&gt;使用动态创建的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素来下载并执行代码；&lt;/li&gt;
      &lt;li&gt;使用 XHR 对象下载 JavaScript 代码并注入页面中。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过以上策略，可以在很大程度上提高那些需要使用大量 JavaScript 的 Web 网站和应用的实际性能。&lt;/p&gt;

&lt;h2 id=&quot;javascript-1&quot;&gt;JavaScript数据类型及语言基础&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;数据类型概要&lt;/h3&gt;

&lt;p&gt;最新的 ECMAScript 标准定义了 7 种数据类型:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;6 种 原始类型:
    &lt;ul&gt;
      &lt;li&gt;Boolean&lt;/li&gt;
      &lt;li&gt;Null&lt;/li&gt;
      &lt;li&gt;Undefined&lt;/li&gt;
      &lt;li&gt;Number&lt;/li&gt;
      &lt;li&gt;String&lt;/li&gt;
      &lt;li&gt;Symbol (new in ECMAScript 6)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;和 Object&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;一些要点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一个没有被赋值的变量会有个默认值 undefined&lt;/li&gt;
  &lt;li&gt;null 与 undefined 的不同点：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
typeof null        // object (bug in ECMAScript, should be null)
typeof undefined   // undefined
null === undefined // false
null == undefined // true
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
typeof null 返回 object
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Number 数字类型，它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。&lt;/li&gt;
  &lt;li&gt;NaN与任何值都不相等，包括自身。应当使用 &lt;code&gt;x != x&lt;/code&gt; 来判断，当且仅当 x 为 NaN 的时候，表达式的结果才为 &lt;code&gt;true&lt;/code&gt;。相似的函数有 &lt;code&gt;isNaN()&lt;/code&gt;, &lt;code&gt;isFinite()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;数组直接量的语法允许有可选的结尾逗号，故 &lt;code&gt;[,,]&lt;/code&gt; 只有两个元素而非三个。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;实践判断各种数据类型的方法&lt;/h3&gt;

&lt;p&gt;```js
// 判断arr是否为一个数组，返回一个bool值
function isArray(arr) {
    return typeof arr === “object” &amp;amp;&amp;amp; Object.prototype.toString.call(arr) === “[object Array]”;
}&lt;/p&gt;

&lt;p&gt;// 判断fn是否为一个函数，返回一个bool值
function isFunction(fn) {
    return typeof fn === “function”;
}
```&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;数组类型&lt;/h4&gt;

&lt;p&gt;在 ECMAScript5 中，可以直接使用 &lt;code&gt;Array.isArray()&lt;/code&gt; 来判断数组。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
Array.isArray([]);  //true
Array.isArray({});  //false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我看《JavaScript权威指南上》没有推荐使用 &lt;code&gt;instanceof&lt;/code&gt;，因为可能会有多窗体(frame)存在。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这样每一个窗口都有一个自己的 JavaScript 环境，有自己的全局对象。并且每个全局对象都有自己的一组构造函数。因此一个窗体中的对象不可能是另外窗体中的构造函数的实例。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以采用了上述我写的那样的代码&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;值类型和引用类型的区别&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;值类型&lt;/p&gt;

    &lt;p&gt;声明一个值类型变量，编译器会在栈上分配一个空间，这个空间对应着该值类型变量，空间里存储的就是该变量的值。存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;引用类型&lt;/p&gt;

    &lt;p&gt;引用类型的实例分配在堆上，新建一个引用类型实例，得到的变量值对应的是该实例的内存分配地址，这就像您的银行账号一样。存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;为变量赋值时，ECMAScript 的解释程序必须判断该值是原始类型，还是引用类型。要实现这一点，解释程序则需尝试判断该值是否为 ECMAScript 的原始类型之一，即 Undefined、Null、Boolean、Number 和 String 型。由于这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 - 栈中。这样存储便于迅速查寻变量的值。&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;在许多语言中，字符串都被看作引用类型，而非原始类型，因为字符串的长度是可变的。ECMAScript 打破了这一传统。&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;如果一个值是引用类型的，那么它的存储空间将从堆中分配。由于引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。如下图所示：&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;http://www.w3school.com.cn/i/ct_js_value.gif&quot; alt=&quot;ct_js_value&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript中原始值包括：undefined，null，布尔值，数字和字符串。引用类型主要指对象（包括数组和函数）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;原始值是不可更改的。对象的值是可修改的。&lt;/li&gt;
    &lt;li&gt;原始值的比较是值的比较。对象的比较并非值的比较。对象的值都是引用，对象的比较均是引用的比较，当且仅当他们都引用同一个基对象时，他们才相等。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/pro_js_value.asp&quot;&gt;ECMAScript 原始值和引用值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-7&quot;&gt;对象的读取、遍历方式&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects&quot;&gt;JavaScript 指南-使用对象&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在javascript中，一个对象可以是一个单独的拥有属性和类型的实体。我们拿它和一个杯子做下类比。一个杯子是一个对象(物体)，拥有属性。杯子有颜色，图案，重量，由什么材质构成等等。同样，javascript对象也有属性来定义它的特征。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;属性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个 javascript 对象有很多属性。一个对象的属性可以被解释成一个附加到对象上的变量。对象的属性和普通的 javascript 变量基本没什么区别，仅仅是属性属于某个对象。属性定义了对象的特征(译注：动态语言面向对象的鸭子类型)。你可以通过点符号来访问一个对象的属性。JavaScript 对象的属性也可以通过方括号访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;枚举&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你可以在 &lt;code&gt;for...in&lt;/code&gt; 语句中使用方括号标记以枚举一个对象的所有属性。为了展示它如何工作，下面的函数当你将对象及其名称作为参数传入时，显示对象的属性：&lt;/p&gt;

&lt;p&gt;```js
function showProps(obj, objName) {
  var result = “”;
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
        result += objName + “.” + i + “ = “ + obj[i] + “\n”;
    }
  }
  return result;
}&lt;/p&gt;

&lt;p&gt;var srcObj = {
    a: 1,
    b: {
        b1: [“hello”, “hi”],
        b2: “JavaScript”
    }
};&lt;/p&gt;

&lt;p&gt;console.log(showProps(srcObj,’srcObj’));
```&lt;/p&gt;

&lt;p&gt;console:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
srcObj.a = 2
srcObj.b = [object Object]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里使用 &lt;code&gt;hasOwnProperty()&lt;/code&gt; 是为了确保是自己的属性而非继承的属性。&lt;/p&gt;

&lt;p&gt;可以如下写，跳过这个对象的方法：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function showPropsWithoutFun(obj, objName) {
    var result = &quot;&quot;;
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {       //跳过继承属性
            continue;
        }
        if (typeof obj[i] === &quot;function&quot;) { //跳过这个对象的方法
            continue;
        }
        result += objName + &quot;.&quot; + i + &quot;=&quot; + obj[i] + &quot;\n&quot;;
    }
    return result;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;相关的方法还有：&lt;code&gt;Object.keys()&lt;/code&gt;, &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.keys()&lt;/code&gt; 方法会返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致（两者的主要区别是 for-in 还会遍历出一个对象从其原型链上继承到的可枚举属性）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建对象的方式有三种：对象直接量，关键字 &lt;code&gt;new&lt;/code&gt;，使用 &lt;code&gt;Object.create()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.create()&lt;/code&gt; 方法创建一个拥有指定原型和若干个指定属性的对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继承&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的 JavaScript 对象继承于至少一个对象。被继承的对象被称作原型，并且继承的属性可能通过构造函数的 prototype 对象找到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个方法 是关联到某个对象的函数，或者简单地说，一个方法是一个值为某个函数的对象属性。定义方法就象定义普通的函数，除了它们必须被赋给对象的某个属性。例如：&lt;/p&gt;

&lt;p&gt;```js
objectName.methodname = function_name;&lt;/p&gt;

&lt;p&gt;var myObj = {
  myMethod: function(params) {
    // …do something
  }
};
```&lt;/p&gt;

&lt;h4 id=&quot;section-8&quot;&gt;深度克隆&lt;/h4&gt;

&lt;p&gt;了解值类型和引用类型的区别，了解各种对象的读取、遍历方式，并在util.js中实现以下方法：&lt;/p&gt;

&lt;p&gt;```js
// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝
// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等
function cloneObject(src) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 测试用例：
var srcObj = {
    a: 1,
    b: {
        b1: [“hello”, “hi”],
        b2: “JavaScript”
    }
};
var abObj = srcObj;
var tarObj = cloneObject(srcObj);&lt;/p&gt;

&lt;p&gt;srcObj.a = 2;
srcObj.b.b1[0] = “Hello”;&lt;/p&gt;

&lt;p&gt;console.log(abObj.a);
console.log(abObj.b.b1[0]);&lt;/p&gt;

&lt;p&gt;console.log(tarObj.a);      // 1
console.log(tarObj.b.b1[0]);    // “hello”
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/java2000_net/article/details/3014934&quot;&gt;白话简单克隆和深度克隆&lt;/a&gt; 介绍什么是深度克隆，用羊圈和羊的图，简单深刻。如下图：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/java2000_net/EntryImages/20081004/%E7%AE%80%E5%8D%95%E5%85%8B%E9%9A%86.PNG&quot; alt=&quot;简单克隆&quot; /&gt;
&lt;img src=&quot;http://p.blog.csdn.net/images/p_blog_csdn_net/java2000_net/EntryImages/20081004/%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86.PNG&quot; alt=&quot;深度克隆&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/32015.htm&quot;&gt;javascript克隆对象深度介绍&lt;/a&gt; 这个代码写的太妙了，可惜找不到源地址了，都是转载来转载去的，要是你知道源地址，请留言告诉我。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浅度克隆：基本类型为值传递，对象仍为引用传递。&lt;/p&gt;

&lt;p&gt;深度克隆：所有元素或属性均完全克隆，并于原引用类型完全独立，即，在后面修改对象的属性的时候，原对象不会被修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;深度克隆复制目标对象，那么就需要枚举这个对象。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断当前属性是否是引用类型，如果是数组或者对象，创建相应类型变量。&lt;/li&gt;
  &lt;li&gt;枚举对象内所有属性。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;hasOwnProperty()&lt;/code&gt; 方法，排除继承的属性。&lt;/li&gt;
  &lt;li&gt;给新的对象相应位置赋值，若当前属性为引用类型（数组或对象）递归本方法。直到内部的值类型。&lt;/li&gt;
  &lt;li&gt;返回新的对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;我的代码实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function cloneObject(src) {
    // your implement
    var o; //result
    if (Object.prototype.toString.call(src) === &quot;[object Array]&quot;) {
        o = []; //判断是否是数组，并赋初始值
    } else {
        o = {};
    }
    for (var i in src) { //遍历这个对象
        if (src.hasOwnProperty(i)) { //排出继承属性
            if (typeof src[i] === &quot;object&quot;) {
                o[i] = cloneObject(src[i]); //递归赋值
            } else {
                o[i] = src[i]; //直接赋值
            }
        }
    }
    return o;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;对数组进行去重&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;MDN Array&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_obj_array.asp&quot;&gt;JavaScript Array 对象 w3school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组
function uniqArray(arr) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 使用示例
var a = [1, 3, 5, 7, 5, 3];
var b = uniqArray(a);
console.log(b); // [1, 3, 5, 7]
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新建一个空数组&lt;/li&gt;
  &lt;li&gt;遍历原数组&lt;/li&gt;
  &lt;li&gt;若新数组中不存在当前元素，将其 &lt;code&gt;push&lt;/code&gt; 入新数组中&lt;/li&gt;
  &lt;li&gt;返回新数组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组
function uniqArray(arr) {
    var newArr = [];    //创建空数组
    for (var i in arr) {    //遍历旧数组
        if (newArr.indexOf(arr[i]) == -1) {//如果新数组中不存在当前元素
            newArr.push(arr[i]);//新数组中加入当前元素
        }
    }
    return newArr;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关方法与知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;array-&quot;&gt;Array 对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Array 对象属性&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;属性&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;返回对创建此对象的数组函数的引用。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;设置或返回数组中元素的数目。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;使您有能力向对象添加属性和方法。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Mutator 方法，这些方法可以改变数组自身&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;方法&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;移除数组的最后一个元素，返回值是被删除的元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;push&lt;/td&gt;
      &lt;td&gt;在数组的末尾添加一个或者多个元素，返回值是新的数组的长度。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;reverse&lt;/td&gt;
      &lt;td&gt;颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个，也就是数组的索引发生了变化。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;shift&lt;/td&gt;
      &lt;td&gt;删除数组的第一个元素，返回值是删除的元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sort&lt;/td&gt;
      &lt;td&gt;对数组中的元素进行排序。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;splice&lt;/td&gt;
      &lt;td&gt;添加或删除数组中的一个或多个元素。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unshift&lt;/td&gt;
      &lt;td&gt;添加一个或者多个元素在数组的开头，返回值是新的数组的长度。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Accessor 方法，这些过程不改变数组自身 These methods do not modify the array and return some representation of the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;方法&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;concat&lt;/td&gt;
      &lt;td&gt;返回一个包含此数组和其他数组和/或值的结合的新数组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;indexOf&lt;/td&gt;
      &lt;td&gt;返回第一个与给定参数相等的数组元素的索引，没有找到则返回-1。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;join&lt;/td&gt;
      &lt;td&gt;将所有的数组元素连接成一个字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastIndexOf&lt;/td&gt;
      &lt;td&gt;返回在数组中搜索到的与给定参数相等的元素的最后（最大）索引。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slice&lt;/td&gt;
      &lt;td&gt;返回数组中的一段。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toSource&lt;/td&gt;
      &lt;td&gt;Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.toSource method.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString&lt;/td&gt;
      &lt;td&gt;返回代表该数组及其元素的字符,重写Object.toString 过程.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf&lt;/td&gt;
      &lt;td&gt;Returns the primitive value of the array. Overrides the Object.valueOf method.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;循环（迭代）过程&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;方法&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;filter&lt;/td&gt;
      &lt;td&gt;对数组中的每一个元素调用参数中指定的过滤函数，并将对于过滤函数返回值为true的那些数组元素集合为新的数组返回。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;forEach&lt;/td&gt;
      &lt;td&gt;对数组的每一个元素依次调用参数中指定的函数。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;every&lt;/td&gt;
      &lt;td&gt;如果数组中每一个元素都满足参数中提供的测试函数，则返回真。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;map&lt;/td&gt;
      &lt;td&gt;Creates a new array with the results of calling a provided function on every element in this array.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;some&lt;/td&gt;
      &lt;td&gt;如果数组中至少有一个元素满足参数函数的测试，则返回true。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;trim&quot;&gt;实现 &lt;code&gt;trim()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_obj_string.asp&quot;&gt;JavaScript String 对象 W3school&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 中级班同学跳过此题
// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符
// 假定空白字符只有半角空格、Tab
// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串
function simpleTrim(str) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim
// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串
// 尝试使用一行简洁的正则表达式完成该题目
function trim(str) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 使用示例
var str = ‘   hi!  ‘;
str = trim(str);
console.log(str); // ‘hi!’
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于 &lt;code&gt;simpleTrim()&lt;/code&gt; 做两次循环，从前面开始和从后面开始。遇到空格和Tab跳出，最后用 &lt;code&gt;slice()&lt;/code&gt; 取出子字符串。&lt;/p&gt;

&lt;p&gt;对于 &lt;code&gt;trim()&lt;/code&gt; 使用正则表达式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
function simpleTrim(str) {
    var i;
    var j;
    for (i = 0; i &amp;lt; str.length; i++) { //从头遍历字符串
        if (str.charAt(i) != “ “ &amp;amp;&amp;amp; str.charAt(i) != “\t”) { //当不为空的时候
            break; //跳出循环
        }
    }
    for (j = str.length - 1; j &amp;gt;= 0; j–) {
        if (str.charAt(j) != “ “ &amp;amp;&amp;amp; str.charAt(j) != “\t”) { //当不为空的时候
            break; //跳出循环
        }
    }
    return str.slice(i, j + 1); //返回子字符串
}&lt;/p&gt;

&lt;p&gt;function trim(str) {
    return str.replace(/^\s+|\s+$/g, ‘’);
}
```&lt;/p&gt;

&lt;p&gt;关于正则表达式：&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;正则表达式&lt;/h4&gt;

&lt;p&gt;上面的思路是匹配开头和结尾的空白字符，并全局匹配。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;^&lt;/code&gt;：匹配字符串的开头，在多行检索中，匹配一行的开头。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$&lt;/code&gt;：匹配字符串的结尾，在多行检索中，匹配一行的结尾。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;|&lt;/code&gt;：选择，匹配的是该符号左边的子表达式或右边的子表达式。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\s&lt;/code&gt;：任何 Unicode 空白符。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;g&lt;/code&gt;：执行一个全局匹配，简言之，即找到所有匹配，而不是找到第一个之后就停止。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上来自 JavaScript权威指南（犀牛书），感觉这里面将的正则表达式还不错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关方法和知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;string&quot;&gt;String对象&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;String 对象属性&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;属性&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;constructor&lt;/td&gt;
      &lt;td&gt;对创建该对象的函数的引用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;字符串的长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;允许您向对象添加属性和方法&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;String 对象方法&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;方法&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;charAt()&lt;/td&gt;
      &lt;td&gt;返回在指定位置的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;charCodeAt()&lt;/td&gt;
      &lt;td&gt;返回在指定的位置的字符的 Unicode 编码。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;concat()&lt;/td&gt;
      &lt;td&gt;连接字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;indexOf()&lt;/td&gt;
      &lt;td&gt;检索字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastIndexOf()&lt;/td&gt;
      &lt;td&gt;从后向前搜索字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;localeCompare()&lt;/td&gt;
      &lt;td&gt;用本地特定的顺序来比较两个字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;match()&lt;/td&gt;
      &lt;td&gt;找到一个或多个正则表达式的匹配。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;replace()&lt;/td&gt;
      &lt;td&gt;替换与正则表达式匹配的子串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;search()&lt;/td&gt;
      &lt;td&gt;检索与正则表达式相匹配的值。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;slice()&lt;/td&gt;
      &lt;td&gt;提取字符串的片断，并在新的字符串中返回被提取的部分。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;split()&lt;/td&gt;
      &lt;td&gt;把字符串分割为字符串数组。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;substr()&lt;/td&gt;
      &lt;td&gt;从起始索引号提取字符串中指定数目的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;substring()&lt;/td&gt;
      &lt;td&gt;提取字符串中两个指定的索引号之间的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toLowerCase()&lt;/td&gt;
      &lt;td&gt;把字符串转换为小写。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toUpperCase()&lt;/td&gt;
      &lt;td&gt;把字符串转换为大写。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;toString()&lt;/td&gt;
      &lt;td&gt;返回字符串。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;valueOf()&lt;/td&gt;
      &lt;td&gt;返回某个字符串对象的原始值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;静态方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;String.fromCharCode()&lt;/code&gt; 使用作为参数传入的字符编码创建一个新的字符串。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于不是标准方法，这里就不列举了。&lt;/p&gt;

&lt;h3 id=&quot;fn-&quot;&gt;遍历数组，使每一个元素执行 &lt;code&gt;fn&lt;/code&gt; 函数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递
function each(arr, fn) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 其中fn函数可以接受两个参数：item和index&lt;/p&gt;

&lt;p&gt;// 使用示例
var arr = [‘java’, ‘c’, ‘php’, ‘html’];
function output(item) {
    console.log(item)
}
each(arr, output);  // java, c, php, html&lt;/p&gt;

&lt;p&gt;// 使用示例
var arr = [‘java’, ‘c’, ‘php’, ‘html’];
function output(item, index) {
    console.log(index + ‘: ‘ + item)
}
each(arr, output);  // 0:java, 1:c, 2:php, 3:html
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个任务有点像 &lt;code&gt;ECMAScript5&lt;/code&gt; 中新增的数组方法：&lt;code&gt;forEach()&lt;/code&gt;。还有一点这里的参数 index 是可选形参，保证第一个参数 item 能正常传入就行了，代码非常简单，如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function each(arr, fn) {
    for(var i in arr){
        fn(arr[i],i);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;获取对象中第一层元素个数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 获取一个对象里面第一层元素的数量，返回一个整数
function getObjectLength(obj) {}&lt;/p&gt;

&lt;p&gt;// 使用示例
var obj = {
    a: 1,
    b: 2,
    c: {
        c1: 3,
        c2: 4
    }
};
console.log(getObjectLength(obj)); // 3
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function getObjectLength(obj) {
    return Object.keys(obj).length;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个自己写的比较简单，不知道可以这样写不。其中 &lt;code&gt;Object.keys(o)&lt;/code&gt; 为 Object 的一个静态方法，参数是一个对象，返回一个包含o的所有可枚举自有（非继承）属性名字的数组。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;正则表达式&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;要求：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 判断是否为邮箱地址
function isEmail(emailStr) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 判断是否为手机号
function isMobilePhone(phone) {
    // your implement
}
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;邮箱由（数字字母，点），数字字母组合，@符号，数字字母，（点，数字字母）。其中两个小括号都是任意个数的。并且开头和结尾都是字母。&lt;/p&gt;

&lt;p&gt;手机号是11位组成的，有时候会在前面加国际区号的前缀，如中国：+86。查阅相关资料后发现区号最多4位。&lt;a href=&quot;http://baike.baidu.com/link?url=2nwM_XyoKXLNPxk0-uDwGT4SxIFncXy7dqB3VbsH3tSaueYRri3CYOWWF9qb84zUqeKkq9uTF2YfetoiyJVm7_&quot;&gt;国际电话区号_百度百科&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;并且手机号最多就是11位，其他国家有用8位的，也有用7位，10位的都有。最短是7位，最长是11位。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 判断是否为邮箱地址
function isEmail(emailStr) {
    var pattern = /^(\w+.)*\w+@\w+(.\w+)+$/;
    return pattern.test(emailStr);
}&lt;/p&gt;

&lt;p&gt;// 判断是否为手机号
function isMobilePhone(phone) {
    var pattern = /^(+\d{1,4})?\d{7,11}$/;
    return pattern.test(phone);
}
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关方法和知识点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions&quot;&gt;RegExp MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;正则表达式修饰符：&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;字符&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;全局匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;忽略大小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;让开始和结束字符（^ 和 $）工作在多行模式（也就是，^ 和 $ 可以匹配字符串中每一行的开始和结束（行是由 \n 或 \r 分割的），而不只是整个输入字符串的最开始和最末尾处。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;字符类别&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;字符&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[…]&lt;/td&gt;
      &lt;td&gt;方括号内的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[^…]&lt;/td&gt;
      &lt;td&gt;不在方括号内的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;.&lt;/td&gt;
      &lt;td&gt;（点号，小数点）匹配任意单个字符，但是换行符除外，包括：\n \r \u2028 或 \u2029。&lt;br /&gt;&lt;br /&gt;需要注意的是，m 多行（multiline）标志不会改变点号的表现。因此为了匹配多行中的字符集，可使用[^] （当然你不是打算用在旧版本 IE 中），它将会匹配任意字符，包括换行符&lt;br /&gt;&lt;br /&gt;例如，/.y/ 匹配 “yes make my day” 中的 “my” 和 “ay”，但是不匹配 “yes”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\d&lt;/td&gt;
      &lt;td&gt;匹配基本拉丁字母表（basic Latin alphabet）中的一个数字字符。等价于[0-9]。&lt;br /&gt;&lt;br /&gt;例如，/\d/ 或 /[0-9]/ 匹配 “B2 is the suite number.” 中的 ‘2’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\D&lt;/td&gt;
      &lt;td&gt;匹配任意一个不是基本拉丁字母表中数字的字符。等价于[^0-9]。&lt;br /&gt;&lt;br /&gt;例如，/\D/ 或 /[^0-9]/ 匹配 “B2 is the suite number.” 中的 ‘B’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\w&lt;/td&gt;
      &lt;td&gt;匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]。&lt;br /&gt;&lt;br /&gt;例如，/\w/ 匹配 “apple” 中的 ‘a’，”$5.28” 中的 ‘5’ 和 “3D” 中的 ‘3’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\W&lt;/td&gt;
      &lt;td&gt;匹配任意不是基本拉丁字母表中单词（字母数字下划线）字符的字符。等价于 [^A-Za-z0-9_]。&lt;br /&gt;&lt;br /&gt;例如，/\W/ 或 /[^A-Za-z0-9_]/ 匹配 “50%” 中的 ‘%’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\s&lt;/td&gt;
      &lt;td&gt;匹配一个空白符，包括空格、制表符、换页符、换行符和其他 Unicode 空格。&lt;br /&gt;&lt;br /&gt;等价于 [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​ \u3000]。&lt;br /&gt;&lt;br /&gt;例如 /\s\w*/ 匹配 “foo bar” 中的 ‘ bar’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\S&lt;/td&gt;
      &lt;td&gt;匹配一个非空白符。等价于 [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​ \u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000]。&lt;br /&gt;&lt;br /&gt;例如，/\S\w*/ 匹配 “foo bar” 中的 ‘foo’。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[\b]&lt;/td&gt;
      &lt;td&gt;匹配一个退格符（backspace）（不要与 \b 混淆）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;直接量字符&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;字符&lt;/td&gt;
      &lt;td&gt;匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数字和字母字符&lt;/td&gt;
      &lt;td&gt;自身&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\t&lt;/td&gt;
      &lt;td&gt;匹配一个水平制表符（tab）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\r&lt;/td&gt;
      &lt;td&gt;匹配一个回车符（carriage return）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\n&lt;/td&gt;
      &lt;td&gt;匹配一个换行符（linefeed）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;匹配一个垂直制表符（vertical tab）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\f&lt;/td&gt;
      &lt;td&gt;匹配一个换页符（form-feed）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\0&lt;/td&gt;
      &lt;td&gt;匹配一个 NUL 字符。不要在此后面跟小数点。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\cX&lt;/td&gt;
      &lt;td&gt;X 是 A - Z 的一个字母。匹配字符串中的一个控制字符。&lt;br /&gt;&lt;br /&gt;例如，/\cM/ 匹配字符串中的 control-M。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\xhh&lt;/td&gt;
      &lt;td&gt;匹配编码为 hh （两个十六进制数字）的字符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\uhhhh&lt;/td&gt;
      &lt;td&gt;匹配 Unicode 值为 hhhh （四个十六进制数字）的字符。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;边界&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;字符&lt;/td&gt;
      &lt;td&gt;含义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;匹配输入/字符串的开始。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符后的开始处。&lt;br /&gt;&lt;br /&gt;例如，/^A/ 不匹配 “an A” 中的 “A”，但匹配 “An A” 中的 “A”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;匹配输入/字符串的结尾。如果多行（multiline）标志被设为 true，该字符也会匹配一个断行（line break）符的前的结尾处。&lt;br /&gt;&lt;br /&gt;例如，/t$/ 不匹配 “eater” 中的 “t”，但匹配 “eat” 中的 “t”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\b&lt;/td&gt;
      &lt;td&gt;匹配一个零宽单词边界（zero-width word boundary），如一个字母与一个空格之间。 （不要和 [\b] 混淆）&lt;br /&gt;&lt;br /&gt;例如，/\bno/ 匹配 “at noon” 中的 “no”，/ly\b/ 匹配 “possibly yesterday.” 中的 “ly”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\B&lt;/td&gt;
      &lt;td&gt;匹配一个零宽非单词边界（zero-width non-word boundary），如两个字母之间或两个空格之间。&lt;br /&gt;&lt;br /&gt;例如，/\Bon/ 匹配 “at noon” 中的 “on”，/ye\B/ 匹配 “possibly yesterday.” 中的 “ye”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;dom&quot;&gt;DOM&lt;/h2&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/htmldom/index.asp&quot;&gt;HTML DOM 教程 W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/js_htmldom.asp&quot;&gt;JavaScript HTML DOM W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_document.asp&quot;&gt;参考手册-HTML DOM Document 对象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/jsref/dom_obj_all.asp&quot;&gt;参考手册-HTML DOM Element 对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;基本任务&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先来一些简单的，在你的util.js中完成以下任务：&lt;/p&gt;

&lt;p&gt;```js
// 为element增加一个样式名为newClassName的新样式
function addClass(element, newClassName) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 移除element中的样式oldClassName
function removeClass(element, oldClassName) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值
function isSiblingNode(element, siblingNode) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 获取element相对于浏览器窗口的位置，返回一个对象{x, y}
function getPosition(element) {
    // your implement
}
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;addClass()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;对于element本身如果没有样式类，那么使用Element的className属性获取的是空字符串，则直接添加新的样式类字符串即可。对于已经有了样式类的元素，获取到原有的样式类后，在后面添加一个空格，再添加新的样式类即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;removeClass()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;获取原始的样式，然后用正则表达式去匹配这个要删掉的样式，由于是动态的正则表达式，所以要用正则的构造函数 &lt;code&gt;RegExp()&lt;/code&gt; 来创建，并且使用 &lt;code&gt;\b&lt;/code&gt; 来确定单词边界。匹配好后用空字符串替换被匹配的样式类即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;isSiblingNode()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;直接判断两个父节点是不是相同&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;getPosition()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;下面这些内容是我之前的思路，现在觉得太复杂，可以用另一种解决方法。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;code&gt;offsetTop&lt;/code&gt;, &lt;code&gt;offsetLeft&lt;/code&gt; 都是相对于最近一个有定位的父元素，如果都没有那么就是相对于 body 的偏移位置。&lt;/p&gt;

      &lt;p&gt;&lt;code&gt;offsetParent&lt;/code&gt; 是寻找最近一个有定位的父级元素，如果没有，那么找到 body 元素。&lt;/p&gt;

      &lt;p&gt;所以这道题需要先寻找有定位的父级元素，如果都没有，那么就是相对于 body 的偏移了，可以直接使用 &lt;code&gt;offsetTop&lt;/code&gt;, &lt;code&gt;offsetLeft&lt;/code&gt;。&lt;/p&gt;

      &lt;p&gt;如果有定位的父级元素不是 body，是 A 元素，那么再寻找 A 元素的最近的有定位的父级元素，如果没有，就是相对于 body 的定位，这时，所求偏移量就是 A 的偏移量加所求元素相对于 A 的偏移量。如果 A 还有已经定位的父级元素，就继续去推，直到找到 body 为止。&lt;/p&gt;

      &lt;p&gt;这里可能要用到一个递归算法。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;strong&gt;另一种方法：&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;使用 &lt;code&gt;getBoundingClientRect()&lt;/code&gt; 方法获取当前元素相对于可视区域的位置，再加上滚动条的位置。&lt;/p&gt;

    &lt;p&gt;关于滚动条的位置 &lt;code&gt;scrollTop&lt;/code&gt;, &lt;code&gt;scrollLeft&lt;/code&gt; 这两个属性的使用，各个浏览器还都不一样。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;详情见 &lt;a href=&quot;http://www.cnblogs.com/zhenyu-whu/archive/2012/11/13/2768004.html&quot;&gt;document.body.scrollTop or document.documentElement.scrollTop&lt;/a&gt;。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;简单的说就是：FF、Opera 和 IE 浏览器认为在客户端浏览器展示的页面的内容对应于整个 HTML，所以使用 &lt;code&gt;document.documentElement&lt;/code&gt;来代表，相应的滚动距离则通过 &lt;code&gt;document.documentElement.scrollLeft&lt;/code&gt; 和 &lt;code&gt;document.documentElement.scrollTop&lt;/code&gt; 来获取，而 Safari 和 Chrome 浏览器则认为页面开始于 body 部分，从而相应的滚动距离用 &lt;code&gt;document.body.scrollLeft&lt;/code&gt; 和 &lt;code&gt;document.body.scrollTop&lt;/code&gt; 来获取。另外需要注意的是，FF 和 IE 的 quirks mode（兼容模式）下是用 &lt;code&gt;document.body&lt;/code&gt; 来获取的。&lt;/p&gt;

    &lt;p&gt;documentElement 对应的是 html 标签，而 body 对应的是 body 标签&lt;/p&gt;

    &lt;p&gt;针对跨浏览器的解决方案则可简单的用如下代码获取：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
var scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
var scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 为element增加一个样式名为newClassName的新样式
function addClass(element, newClassName) {
    var oldClassName = element.className; //获取旧的样式类
    element.className = oldClassName === “” ? newClassName : oldClassName + “ “ + newClassName;
}&lt;/p&gt;

&lt;p&gt;// 移除element中的样式oldClassName
function removeClass(element, oldClassName) {
    var originClassName = element.className; //获取原先的样式类
    var pattern = new RegExp(“\b” + oldClassName + “\b”); //使用构造函数构造动态的正则表达式
    element.className = originClassName.replace(pattern, ‘’);
}&lt;/p&gt;

&lt;p&gt;function isSiblingNode(element, siblingNode) {
    return element.parentNode === siblingNode.parentNode;
}&lt;/p&gt;

&lt;p&gt;function getPosition(element) {
    var pos={};
    pos.x = element.getBoundingClientRect().left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
    pos.y = element.getBoundingClientRect().top + Math.max(document.documentElement.scrollTop, document.body.scrollTop);
    return pos;
}
```&lt;/p&gt;

&lt;h3 id=&quot;mini-&quot;&gt;mini $&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来挑战一个mini $，它和之前的$是不兼容的，它应该是document.querySelector的功能子集，在不直接使用document.querySelector的情况下，在你的util.js中完成以下任务：&lt;/p&gt;

&lt;p&gt;```js
// 实现一个简单的Query
function $(selector) {&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// 可以通过id获取DOM对象，通过#标示，例如
$(“#adom”); // 返回id为adom的DOM对象&lt;/p&gt;

&lt;p&gt;// 可以通过tagName获取DOM对象，例如
$(“a”); // 返回第一个&lt;a&gt;对象&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;// 可以通过样式名称获取DOM对象，例如
$(“.classa”); // 返回第一个样式定义包含classa的对象&lt;/p&gt;

&lt;p&gt;// 可以通过attribute匹配获取DOM对象，例如
$(“[data-log]”); // 返回第一个包含属性data-log的对象&lt;/p&gt;

&lt;p&gt;$(“[data-time=2015]”); // 返回第一个包含属性data-time且值为2015的对象&lt;/p&gt;

&lt;p&gt;// 可以通过简单的组合提高查询便利性，例如
$(“#adom .classa”); // 返回id为adom的DOM所包含的所有子节点中，第一个样式定义包含classa的对象
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.imooc.com/code/4477&quot;&gt;Sizzle选择器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/xesam/archive/2012/02/15/2352466.html&quot;&gt;Sizzle引擎–原理与实践（一）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/rubylouvre/archive/2011/01/24/1942818.html&quot;&gt;Sizzle是怎样工作的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过空格拆分参数 selector，因为可能是组合查询。拆分为数组 selectorArr&lt;/li&gt;
  &lt;li&gt;遍历 selectorArr，条件判断各种情况。&lt;/li&gt;
  &lt;li&gt;得到节点的 Element 对象后，以这个对象为父节点，继续下一层的判断。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
//多个选择器有点难到我了，看了一些资料觉得思路应该如下：
//1.如果存在#，直接从#开始向后查
//2.如果存在tag直接找到所有的tag然后向后查
//3.样式类，属性，从后向前查，得到它所有的父节点名称，去筛选匹配
//以上的做法有点太复杂，我还是做一个简单的正向匹配吧。
function $(selector) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!selector) {
    return null;
}

if (selector == document) {
    return document;
}

selector = selector.trim();
if (selector.indexOf(&quot; &quot;) !== -1) { //若存在空格
    var selectorArr = selector.split(/\s+/); //拆成数组

    var rootScope = myQuery(selectorArr[0]); //第一次的查找范围
    var i = null;
    var j = null;
    var result = [];
    //循环选择器中的每一个元素
    for (i = 1; i &amp;lt; selectorArr.length; i++) {
        for (j = 0; j &amp;lt; rootScope.length; j++) {
            result.push(myQuery(selectorArr[i], rootScope[j]));
        }
        // rootScope = result;
        // 目前这个方法还有bug
    }
    return result[0][0];
} else { //只有一个，直接查询
    return myQuery(selector, document)[0];
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/**
 * 针对一个内容查找结果 success
 * @param  {String} selector 选择器内容
 * @param  {Element} root    根节点元素
 * @return {NodeList数组}    节点列表，可能是多个节点也可能是一个
 &lt;em&gt;/
function myQuery(selector, root) {
    var signal = selector[0]; //
    var allChildren = null;
    var content = selector.substr(1);
    var currAttr = null;
    var result = [];
    root = root || document; //若没有给root，赋值document
    switch (signal) {
        case “#”:
            result.push(document.getElementById(content));
            break;
        case “.”:
            allChildren = root.getElementsByTagName(“&lt;/em&gt;”);
            // var pattern0 = new RegExp(“\b” + content + “\b”);
            for (i = 0; i &amp;lt; allChildren.length; i++) {
                currAttr = allChildren[i].getAttribute(“class”);
                if (currAttr !== null) {
                    var currAttrsArr = currAttr.split(/\s+/);
                    console.log(currAttr);
                    for (j = 0; j &amp;lt; currAttrsArr.length; j++) {
                        if (content === currAttrsArr[j]) {
                            result.push(allChildren[i]);
                            console.log(result);
                        }
                    }
                }
            }
            break;
        case “[”: //属性选择
            if (content.search(“=”) == -1) { //只有属性，没有值
                allChildren = root.getElementsByTagName(“&lt;em&gt;”);
                for (i = 0; i &amp;lt; allChildren.length; i++) {
                    if (allChildren[i].getAttribute(selector.slice(1, -1)) !== null) {
                        result.push(allChildren[i]);
                    }
                }
            } else { //既有属性，又有值
                allChildren = root.getElementsByTagName(“&lt;/em&gt;”);
                var pattern = /[(\w+)\s&lt;em&gt;=\s&lt;/em&gt;(\w+)]/; //为了分离等号前后的内容
                var cut = selector.match(pattern); //分离后的结果，为数组
                var key = cut[1]; //键
                var value = cut[2]; //值
                for (i = 0; i &amp;lt; allChildren.length; i++) {
                    if (allChildren[i].getAttribute(key) == value) {
                        result.push(allChildren[i]);
                    }
                }
            }
            break;
        default: //tag
            result = root.getElementsByTagName(selector);
            break;
    }
    return result;
}
```&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;事件&lt;/h2&gt;

&lt;h3 id=&quot;section-15&quot;&gt;绑定注册事件与移除事件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 给一个element绑定一个针对event事件的响应，响应函数为listener
function addEvent(element, event, listener) {
    if (element.addEventListener) {
        element.addEventListener(event,listener);
    } else if(element.attachEvent){
        element.attachEvent(“on”+event,listener);
    }
}&lt;/p&gt;

&lt;p&gt;// 移除element对象对于event事件发生时执行listener的响应
function removeEvent(element, event, listener) {
    if (element.removeEventListenr) {
        element.removeEventListenr(event,listener);
    } else if(element.detachEvent){
        element.detachEvent(“on”+event,listener);
    }
}
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IE8+ 支持 &lt;code&gt;addEventListener()&lt;/code&gt;。IE8 以下的版本使用 &lt;code&gt;attachEvent()&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;attachEvent()&lt;/code&gt; 不支持事件捕获。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;attachEvent()&lt;/code&gt; 第一个参数事件处理程序属性名使用前缀 on。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;attachEvent()&lt;/code&gt; 允许相同的事件处理程序函数注册多次。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;click--enter-&quot;&gt;click 与 enter 键事件绑定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 实现对click事件的绑定
function addClickEvent(element, listener) {
    addEvent(element, “click”, listener);
}&lt;/p&gt;

&lt;p&gt;// 实现对于按Enter键时的事件绑定
function addEnterEvent(element, listener) {
    addEvent(element, “keydown”, function(event) {
        if (event.keyCode == 13) {
            listener();
        }
    });
}
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里我直接使用了上一个任务写好的 &lt;code&gt;addEvent()&lt;/code&gt; 函数。这样可以简化代码，并有良好的兼容性。&lt;/p&gt;

&lt;p&gt;enter 键的 keyCode 为 13。&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;事件代理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/Aralic/p/4446030.html&quot;&gt;javascript事件代理（委托）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/leo388/p/4461579.html&quot;&gt;JS - 事件代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function delegateEvent(element,tag,eventName,listener){
    addEvent(element, eventName, function(event){
        var target = event.target || event.srcElement;
        if(target.tagName.toLowerCase() == tag.toLowerCase()) {
            listener.call(target, event);
        }
    });
}
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;bom&quot;&gt;BOM&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务与实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 判断是否为IE浏览器，返回-1或者版本号
function isIE() {
    var s = navigator.userAgent.toLowerCase();
    console.log(s);
    //ie10的信息：
    //mozilla/5.0 (compatible; msie 10.0; windows nt 6.2; trident/6.0)
    //ie11的信息：
    //mozilla/5.0 (windows nt 6.1; trident/7.0; slcc2; .net clr 2.0.50727; .net clr 3.5.30729; .net clr 3.0.30729; media center pc 6.0; .net4.0c; .net4.0e; infopath.2; rv:11.0) like gecko
    var ie = s.match(/rv:([\d.]+)/) || s.match(/msie ([\d.]+)/);
    if(ie) {
        return ie[1];
    } else {
        return -1;
    }
}&lt;/p&gt;

&lt;p&gt;// 设置cookie
function setCookie(cookieName, cookieValue, expiredays) {
    var cookie = cookieName + “=” + encodeURIComponent(cookieValue);
    if (typeof expiredays === “number”) {
        cookie += “;max-age=” + (expiredays * 60 * 60 * 24);
    }
    document.cookie = cookie;
}&lt;/p&gt;

&lt;p&gt;// 获取cookie值
function getCookie(cookieName) {
    var cookie = {};
    var all = document.cookie;
    if (all===””) {
        return cookie;
    }
    var list = all.split(“; “);
    for (var i = 0; i &amp;lt; list.length; i++) {
        var p = list[i].indexOf(“=”);
        var name = list[i].substr(0, p);
        var value = list[i].substr(p + 1);
        value = decodeURIComponent(value);
        cookie[name] = value;
    }
    return cookie;
}
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参考自：JavaScript权威指南&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sessionstoragelocalstorage--cookie-&quot;&gt;sessionStorage、localStorage 和 cookie 之间的区别&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;共同点&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;都是保存在浏览器端，且同源的。都是键值对存储。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;区别&lt;/strong&gt;&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;特性&lt;/td&gt;
          &lt;td&gt;Cookie&lt;/td&gt;
          &lt;td&gt;localStorage&lt;/td&gt;
          &lt;td&gt;sessionStorage&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;数据的声明周期&lt;/td&gt;
          &lt;td&gt;一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效&lt;/td&gt;
          &lt;td&gt;除非被清除，否则永久保存&lt;/td&gt;
          &lt;td&gt;仅在当前会话下有效，关闭页面或浏览器后被清除&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;存放数据大小&lt;/td&gt;
          &lt;td&gt;4K左右&lt;/td&gt;
          &lt;td&gt;一般为5MB&lt;/td&gt;
          &lt;td&gt;同左&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;与服务器端通信&lt;/td&gt;
          &lt;td&gt;每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题&lt;/td&gt;
          &lt;td&gt;仅在客户端（即浏览器）中保存，不参与和服务器的通信&lt;/td&gt;
          &lt;td&gt;同左&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;易用性&lt;/td&gt;
          &lt;td&gt;需要程序员自己封装，源生的Cookie接口不友好&lt;/td&gt;
          &lt;td&gt;源生接口可以接受，亦可再次封装来对Object和Array有更好的支持&lt;/td&gt;
          &lt;td&gt;同左&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;每个 HTTP 请求都会带着 Cookie 信息，所以 Cookie 应当简单，比如判断用户是否登陆。&lt;/p&gt;

    &lt;p&gt;localStorage 接替 Cookie 管理购物车，同时也可以存储 HTML5 游戏的一些本地数据。&lt;/p&gt;

    &lt;p&gt;sessionStorage 在表单内容较多的时候，为了优化用户体验，按步骤分页引导填写，这时使用sessionStorage 就发挥了作用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;cookie 中最好不要放置任何明文的东西。两个 storage的数据提交后在服务端一定要校验&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jerryzou.com/posts/cookie-and-web-storage/&quot;&gt;详说 Cookie, LocalStorage 与 SessionStorage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ajax&quot;&gt;Ajax&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
// 学习Ajax，并尝试自己封装一个Ajax方法。实现如下方法：
function ajax(url, options) {
    // your implement
}&lt;/p&gt;

&lt;p&gt;// 使用示例：
ajax(
    ‘http://localhost:8080/server/ajaxtest’,
    {
        data: {
            name: ‘simon’,
            password: ‘123456’
        },
        onsuccess: function (responseText, xhr) {
            console.log(responseText);
        }
    }
);　
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```js
function ajax(url, options) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dataResult; //结果data

// 处理data
if (typeof(options.data) === &#39;object&#39;) {
    var str = &#39;&#39;;
    for (var c in options.data) {
        str = str + c + &#39;=&#39; + options.data[c] + &#39;&amp;amp;&#39;;
    }
    dataResult = str.substring(0, str.length - 1);
}

// 处理type
options.type = options.type || &#39;GET&#39;;

//获取XMLHttpRequest对象
var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;);

// 发送请求
xhr.open(options.type, url, true);
if (options.type == &#39;GET&#39;) {
    xhr.send(null);
} else {
    xhr.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);
    xhr.send(dataResult);
}

// readyState
xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
        if (xhr.status === 200) {
            if (options.onsuccess) {
                options.onsuccess(xhr.responseText, xhr.responseXML);
            }
        } else {
            if (options.onfail) {
                options.onfail();
            }
        }
    }
}; } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先是处理 data，因为测试用例中的 data 是对象，所以把它遍历出来，把键和值中间用 = 连接，和下一组数据用 &amp;amp; 连接。&lt;/li&gt;
  &lt;li&gt;处理 type，默认是 GET 请求。&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;open()&lt;/code&gt; 指明请求方法和 url。方法一般为 GET 或 POST。&lt;/li&gt;
  &lt;li&gt;调用 &lt;code&gt;send()&lt;/code&gt; 方法，GET 请求没有主体，所以应该传递 null 或省略这个参数。POST 请求有主体，同时使用 &lt;code&gt;setRequestHeaders()&lt;/code&gt; 来指定 “Content-type” 头。这样便成功发送了请求。&lt;/li&gt;
  &lt;li&gt;取的响应。一个完整的 HTTP 响应是由状态码、响应头集合、响应主体组成。
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;readyState&lt;/code&gt; 是一个整数，它指定了 HTTP 请求的状态。其值和含义如下表：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;值&lt;/td&gt;
          &lt;td&gt;含义&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;open() 尚未调用&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;open() 已调用&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;接收到响应头信息&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;接收到响应主体&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;响应完成&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;status&lt;/code&gt; 和 &lt;code&gt;statusText&lt;/code&gt; 属性以数字和文本的形式返回 HTTP 状态码。这些属性保存标准的 HTTP 值。如，200和 “OK” 表示成功请求，404和 “Not Found” 表示 URL 不能匹配服务器上的任何资源。&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;getResponseHeader()&lt;/code&gt; 和 &lt;code&gt;getAllResponseHeaders()&lt;/code&gt; 能查询响应头。&lt;/li&gt;
      &lt;li&gt;响应主体可以从 &lt;code&gt;responseText&lt;/code&gt; 属性中得到文本形式的，从 &lt;code&gt;responseXML&lt;/code&gt; 属性中得到 Document 形式的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;补充一点 &lt;code&gt;onreadystatechange&lt;/code&gt; 事件会在 &lt;code&gt;readyState&lt;/code&gt; 改变时被触发。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/ajax/index.asp&quot;&gt;Ajax W3C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/web/wa-lo-comet/&quot;&gt;Comet：基于 HTTP 长连接的“服务器推”技术&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-17&quot;&gt;练习1：处理兴趣列表&lt;/h2&gt;

&lt;h3 id=&quot;section-18&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;task0002&lt;/code&gt;目录下创建一个&lt;code&gt;task0002_1.html&lt;/code&gt;文件，以及一个&lt;code&gt;js&lt;/code&gt;目录和&lt;code&gt;css&lt;/code&gt;目录，在&lt;code&gt;js&lt;/code&gt;目录中创建&lt;code&gt;task0002_1.js&lt;/code&gt;，并将之前写的&lt;code&gt;util.js&lt;/code&gt;也拷贝到&lt;code&gt;js&lt;/code&gt;目录下。然后完成以下需求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在页面中，有一个单行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用半角逗号来作为不同爱好的分隔。&lt;/p&gt;

&lt;p&gt;当点击按钮时，把用户输入的兴趣爱好，按照上面所说的分隔符分开后保存到一个数组，过滤掉空的、重复的爱好，在按钮下方创建一个段落显示处理后的爱好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;单行变成多行输入框，一个按钮，输入框中用来输入用户的兴趣爱好，允许用户用换行、空格（全角/半角）、逗号（全角/半角）、顿号、分号来作为不同爱好的分隔。&lt;/p&gt;

&lt;p&gt;当点击按钮时的行为同上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三阶段&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户输入的爱好数量不能超过10个，也不能什么都不输入。当发生异常时，在按钮上方显示一段红色的错误提示文字，并且不继续执行后面的行为；当输入正确时，提示文字消失。&lt;/p&gt;

&lt;p&gt;同时，当点击按钮时，不再是输出到一个段落，而是每一个爱好输出成为一个checkbox，爱好内容作为checkbox的label。&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;主要就是对字符串的操作，&lt;code&gt;split()&lt;/code&gt; 的使用，以及正则表达式的使用。&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_1.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-21&quot;&gt;练习2：倒计时&lt;/h2&gt;

&lt;h3 id=&quot;section-22&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code&gt;task0002_2.html&lt;/code&gt;文件，在&lt;code&gt;js&lt;/code&gt;目录中创建&lt;code&gt;task0002_2.js&lt;/code&gt;，并在其中编码，实现一个倒计时功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;界面首先有一个文本输入框，允许按照特定的格式&lt;code&gt;YYYY-MM-DD&lt;/code&gt;输入年月日；&lt;/li&gt;
  &lt;li&gt;输入框旁有一个按钮，点击按钮后，计算当前距离输入的日期的00:00:00有多少时间差&lt;/li&gt;
  &lt;li&gt;在页面中显示，距离YYYY年MM月DD日还有XX天XX小时XX分XX秒&lt;/li&gt;
  &lt;li&gt;每一秒钟更新倒计时上显示的数&lt;/li&gt;
  &lt;li&gt;如果时差为0，则倒计时停止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-23&quot;&gt;思路&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;setInterval()&lt;/code&gt; 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;setInterval()&lt;/code&gt; 方法会不停地调用函数，直到 &lt;code&gt;clearInterval()&lt;/code&gt; 被调用或窗口被关闭。由 &lt;code&gt;setInterval()&lt;/code&gt; 返回的 ID 值可用作 &lt;code&gt;clearInterval()&lt;/code&gt; 方法的参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;clearInterval()&lt;/code&gt; 方法可取消由 &lt;code&gt;setInterval()&lt;/code&gt; 设置的 timeout。&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;clearInterval()&lt;/code&gt; 方法的参数必须是由 &lt;code&gt;setInterval()&lt;/code&gt; 返回的 ID 值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;setTimeout()&lt;/code&gt; 方法用于在指定的毫秒数后调用函数或计算表达式。&lt;/p&gt;

    &lt;p&gt;setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;clearTimeout()&lt;/code&gt; 方法可取消由 setTimeout() 方法设置的 timeout。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-24&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_2.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-25&quot;&gt;练习3：图片轮播&lt;/h2&gt;

&lt;h3 id=&quot;section-26&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code&gt;task0002_3.html&lt;/code&gt;文件，在&lt;code&gt;js&lt;/code&gt;目录中创建&lt;code&gt;task0002_3.js&lt;/code&gt;，并在其中编码，实现一个轮播图的功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图片数量及URL均在HTML中写好&lt;/li&gt;
  &lt;li&gt;可以配置轮播的顺序（正序、逆序）、是否循环、间隔时长&lt;/li&gt;
  &lt;li&gt;图片切换的动画要流畅&lt;/li&gt;
  &lt;li&gt;在轮播图下方自动生成对应图片的小点，点击小点，轮播图自动动画切换到对应的图片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;效果示例：&lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;http://echarts.baidu.com/&lt;/a&gt; 上面的轮播图（不需要做左右两个箭头）&lt;/p&gt;

&lt;h3 id=&quot;section-27&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;将图片排列成一排，一起向左运动，每次运动的距离刚好是一张图片的宽度。&lt;/p&gt;

&lt;p&gt;对于下面的小圆点，使用事件代理，将事件传递给每个 a 标签。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.itxueyuan.org/view/6323.html&quot;&gt;JS图片切换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-28&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_3.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-29&quot;&gt;关于变速运动&lt;/h3&gt;

&lt;p&gt;评论中有人问到运动部分为什么这样写，下面我讲一下吧。&lt;/p&gt;

&lt;p&gt;```js
function startMove(target) {
    clearInterval(timerInner);
    timerInner = setInterval(function() {
        var speed = (target - imgListDiv.offsetLeft) / 6;
        speed = speed &amp;gt; 0 ? Math.ceil(speed) : Math.floor(speed);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;
}, 30); } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是运动部分代码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参数 &lt;code&gt;target&lt;/code&gt; 是运动终点的位置。&lt;/li&gt;
  &lt;li&gt;首先停止计时器，为了避免上一次调用方法时，计时器没有关闭带来的干扰。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
clearInterval(timerInner);
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;下面开始开启计时器，每隔 30ms 执行一次内部的函数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;变速运动&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
var speed = (target - imgListDiv.offsetLeft) / 6;
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;逐渐变慢，最后停止，距离越远速度越大，速度由距离决定

速度=(目标值-当前值)/缩放系数

这样写的原因就是为了让它做缓冲运动，而不是匀速运动，这样给用户带来的交互感觉会更好。
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;速度取整&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
speed = speed &amp;gt; 0 ? Math.ceil(speed) : Math.floor(speed);
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;像素不能是小数，所以速度大于0的时候，向上取整。速度小于0时，向下取整
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;最后关于运动终止条件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
imgListDiv.style.left = imgListDiv.offsetLeft + speed + &quot;px&quot;;
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;由这一行可以看出，`imgListDiv.style.left` 在不断增大，即 `imgListDiv.offsetLeft` 在不断增大。这两个是相同的属性，只不过一个是在赋值时使用，第二个是在取值时使用。

再看这行代码，由于这部分是每个30ms执行一次的，所以继续执行到这里。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;js
var speed = (target - imgListDiv.offsetLeft) / 6;
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;当不断增大的 `imgListDiv.offsetLeft` 等于 `target` 时，`speed` 为0。宏观表现为不再运动，这便是运动终止的状态，但是这里的方法还是不断在执行，每个30ms在执行。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-30&quot;&gt;练习4：输入框即时提示&lt;/h2&gt;

&lt;h3 id=&quot;section-31&quot;&gt;任务要求&lt;/h3&gt;

&lt;p&gt;在和上一任务同一目录下面创建一个&lt;code&gt;task0002_4.html&lt;/code&gt;文件，在&lt;code&gt;js&lt;/code&gt;目录中创建&lt;code&gt;task0002_4.js&lt;/code&gt;，并在其中编码，实现一个类似百度搜索框的输入提示的功能。&lt;/p&gt;

&lt;p&gt;要求如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;允许使用鼠标点击选中提示栏中的某个选项&lt;/li&gt;
  &lt;li&gt;允许使用键盘上下键来选中提示栏中的某个选项，回车确认选中&lt;/li&gt;
  &lt;li&gt;选中后，提示内容变更到输入框中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;初级班：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要求和后端交互，可以自己伪造一份提示数据例如：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;js
var suggestData = [&#39;Simon&#39;, &#39;Erik&#39;, &#39;Kener&#39;];
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;中级班：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自己搭建一个后端Server，使用Ajax来获取提示数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-32&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;这里我使用了给 input 标签加 input 监听，即输入框内容发生改变时，触发事件。并兼容到 IE7。&lt;/p&gt;

&lt;p&gt;关于 input 监听的代码如下：&lt;/p&gt;

&lt;p&gt;```js
function addInputListener() {
    if (inputArea.addEventListener) { // all browsers except IE before version 9
        inputArea.addEventListener(“input”, OnInput);
    }
    if (inputArea.attachEvent) { // Internet Explorer and Opera
        inputArea.attachEvent(“onpropertychange”, OnPropChanged); // Internet Explorer
    }
}&lt;/p&gt;

&lt;p&gt;// Firefox, Google Chrome, Opera, Safari from version 5, Internet Explorer from version 9
function OnInput(event) {
    var inputValue = event.target.value;
    handleInput(inputValue);
}
// Internet Explorer
function OnPropChanged(event) {
    var inputValue = “”;
    if (event.propertyName.toLowerCase() == “value”) {
        inputValue = event.srcElement.value;
        handleInput(inputValue);
    }
}
```&lt;/p&gt;

&lt;p&gt;其中 handleInput() 为下一步要执行的方法。&lt;/p&gt;

&lt;p&gt;其实后来想了想也可以使用 keyup 事件了做这个任务。&lt;/p&gt;

&lt;p&gt;匹配的过程同样适用正则表达式，从开头开始匹配。遍历备选单词，如果匹配成功，则放入 li 标签中，准备展示。&lt;/p&gt;

&lt;p&gt;然后分别添加点击事件，键盘的 keydown 事件，用来选中提示出的单词。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.dottoro.com/ljhxklln.php&quot;&gt;oninput 事件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-33&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_4.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-34&quot;&gt;练习5：拖拽交互&lt;/h2&gt;

&lt;h3 id=&quot;section-35&quot;&gt;任务要求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个可拖拽交互的界面&lt;/li&gt;
  &lt;li&gt;如示例图，左右两侧各有一个容器，里面的选项可以通过拖拽来左右移动&lt;/li&gt;
  &lt;li&gt;被选择拖拽的容器在拖拽过程后，在原容器中消失，跟随鼠标移动&lt;/li&gt;
  &lt;li&gt;注意拖拽释放后，要添加到准确的位置&lt;/li&gt;
  &lt;li&gt;拖拽到什么位置认为是可以添加到新容器的规则自己定&lt;/li&gt;
  &lt;li&gt;注意交互中良好的用户体验和使用引导&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-36&quot;&gt;思路&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;页面布局时，将要被拖拽的 div 设置为绝对定位，因为这样在后面拖拽的时候才方便更改坐标。&lt;/li&gt;
  &lt;li&gt;初始化界面的时候，首先让 div 块按照相应的高度重新排列一下。&lt;/li&gt;
  &lt;li&gt;拖拽方法的实现。由 mousedown mousemove mouseup 三部分组成。&lt;/li&gt;
  &lt;li&gt;在 mousemove 中判断，不能让鼠标拖出浏览器窗口。&lt;/li&gt;
  &lt;li&gt;在 mouseup 中判断，是否到达指定区域。完成拖拽。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我在这里没有使用 html5 中的拖拽 API，所以兼容性还是很好的。&lt;/p&gt;

&lt;h3 id=&quot;section-37&quot;&gt;实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/task0002_5.html&quot;&gt;在线demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-38&quot;&gt;最终作品&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0002/work/Gaohaoyang&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0002/work/Gaohaoyang/index.html&quot;&gt;在线 Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;2015/06/01&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hushicai/ife-task0002&quot;&gt;导师的参考答案&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/baidu-ife/ife/tree/master/task/task0002/review&quot;&gt;review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;加油！向着下一个目标前进！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>百度Web前端技术学院(1)-HTML, CSS基础</title>
   <link href="http://127.0.0.1/html/css/2015/04/16/baidu-ife-1/"/>
   <updated>2015-04-16T03:06:05+08:00</updated>
   <id>http://127.0.0.1/html/css/2015/04/16/baidu-ife-1</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#css-&quot; id=&quot;markdown-toc-css-&quot;&gt;CSS 如何工作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;层叠和继承&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;选择器&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;标签选择器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#class-selectors&quot; id=&quot;markdown-toc-class-selectors&quot;&gt;类选择器（Class selectors）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#idid-selectors&quot; id=&quot;markdown-toc-idid-selectors&quot;&gt;ID选择器（ID selectors）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;优先级&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pseudo-classes-selectors&quot; id=&quot;markdown-toc-pseudo-classes-selectors&quot;&gt;伪类选择器（Pseudo-classes selectors）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;基于关系的选择器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;其他属性&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#text-indent&quot; id=&quot;markdown-toc-text-indent&quot;&gt;&lt;code&gt;text-indent&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#text-transform&quot; id=&quot;markdown-toc-text-transform&quot;&gt;&lt;code&gt;text-transform&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#text-decoration&quot; id=&quot;markdown-toc-text-decoration&quot;&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#text-align&quot; id=&quot;markdown-toc-text-align&quot;&gt;&lt;code&gt;text-align&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#word-spacing&quot; id=&quot;markdown-toc-word-spacing&quot;&gt;&lt;code&gt;word-spacing&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#white-space&quot; id=&quot;markdown-toc-white-space&quot;&gt;&lt;code&gt;white-space&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#font-face&quot; id=&quot;markdown-toc-font-face&quot;&gt;&lt;code&gt;@font-face&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;深入了解行高属性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;盒模型及定位&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#div&quot; id=&quot;markdown-toc-div&quot;&gt;已知宽度的div居中&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;对于居中的补充&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;早期css滑动门&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;左侧固定右侧自适应宽度的两列布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;双飞翼布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;浮动布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;清除浮动/闭合浮动&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#box-sizing&quot; id=&quot;markdown-toc-box-sizing&quot;&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;响应式布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;多列布局&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bfc--ie--haslayout&quot; id=&quot;markdown-toc-bfc--ie--haslayout&quot;&gt;BFC 和 IE 的 hasLayout&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#div-&quot; id=&quot;markdown-toc-div-&quot;&gt;&lt;code&gt;div&lt;/code&gt; 三列等高&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#inline-block&quot; id=&quot;markdown-toc-inline-block&quot;&gt;去除inline-block元素间间距&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;最终作品&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;百度前端学院的第一次任务笔记，HTML、CSS 基础。主要有 CSS 工作原理，选择器的使用，常用属性，行高属性，盒模型与定位，最后根据设计图实现4个页面。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;任务&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;任务：&lt;/strong&gt; &lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0001&quot;&gt;HTML、CSS基础&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人问到提交作业 fork 同步的问题，真心觉得官方 GitHub 的帮助文档讲的很好，我上一篇博客 &lt;a href=&quot;http://gaohaoyang.github.io/2015/04/12/Syncing-a-fork/&quot;&gt;同步一个 fork&lt;/a&gt; 就是翻译的这个官方文档，如果懒得看英文可以参考我的博客。&lt;/p&gt;

&lt;p&gt;写点东西记录一下我的做题过程吧。&lt;/p&gt;

&lt;h2 id=&quot;css-&quot;&gt;CSS 如何工作&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/How_CSS_works&quot;&gt;CSS 如何工作&lt;/a&gt; Mozilla 的开发者文档讲的很好。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;浏览器在展现一个文档的时候，必须要把文档内容和相应的样式信息结合起来展示。 这个处理过程一般分两个阶段：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;浏览器先将标记语言和 CSS 转换成 DOM (文档对象模型)结构。 这时 DOM 就代表了电脑内存中的相应文档，因为它已经融合了文档内容和相应的样式表。&lt;/li&gt;
    &lt;li&gt;最后浏览器把 DOM 的内容展示出来。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;层叠和继承&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Cascading_and_inheritance&quot;&gt;参考资料: 层叠和继承&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于层叠来说，共有三种主要的样式来源：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;浏览器对HTML定义的默认样式。&lt;/li&gt;
    &lt;li&gt;用户定义的样式。&lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;开发者定义的样式，可以有三种形式：&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;定义在外部文件（外链样式）：本教程中案例主要是通过这种形式定义样式。&lt;/li&gt;
        &lt;li&gt;在页面的头部定义（内联样式）：通过这种形式定义的样式只在本页面内生效。&lt;/li&gt;
        &lt;li&gt;定义在特定的元素身上（行内样式）：这种形式多用于测试，可维护性较差。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;用户定义的样式表会覆盖浏览器定义的默认样式，然后网页开发者定义的样式又会覆盖用户样式。&lt;/p&gt;

  &lt;p&gt;再来看看优先级，从高到低依次为：网页开发者定义的样式、网页阅读者定义的样式、浏览器的默认样式。&lt;/p&gt;

  &lt;p&gt;对继承的元素来说，子元素自身的样式优先级高于从父级继承来的样式。&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;更多细节 &lt;br /&gt;
CSS 另外提供了一个 !important 关键字，用户可以通过使用这个关键字使自己定义的样式覆盖掉开发者定义的样式。 &lt;br /&gt;
这就意味着，作为开发者，你很难准确的预知页面最终在用户电脑上的显示效果。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;选择器&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_Started/Selectors&quot;&gt;参考资料:选择器（Selectors）&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;标签选择器&lt;/h3&gt;

&lt;h3 id=&quot;class-selectors&quot;&gt;类选择器（Class selectors）&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过设置元素的 class 属性，可以为元素指定类名。类名由开发者自己指定。 文档中的多个元素可以拥有同一个类名。&lt;/p&gt;

  &lt;p&gt;在写样式表时，类选择器是以英文句号（.）开头的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;idid-selectors&quot;&gt;ID选择器（ID selectors）&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过设置元素的 id 属性为该元素制定ID。ID名由开发者指定。每个ID在文档中必须是唯一的。&lt;/p&gt;

  &lt;p&gt;在写样式表时，ID选择器是以#开头的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;优先级&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;如果多余一个规则指定了相同的属性值都应用到一个元素上，CSS规定拥有更高确定度的选择器优先级更高。ID选择器比类选择器更具确定度, 而类选择器比标签选择器（tag selector）更具确定度。&lt;/li&gt;
    &lt;li&gt;如果样式中包含冲突的规则，且它们具有相同的确定度。那么，后出现的规则优先级高。&lt;/li&gt;
    &lt;li&gt;如果你遇到规则冲突，你可以增加其中一条的确定度或将之移到后面以使它具有更高优先级。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pseudo-classes-selectors&quot;&gt;伪类选择器（Pseudo-classes selectors）&lt;/h3&gt;

&lt;h3 id=&quot;section-5&quot;&gt;基于关系的选择器&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;选择器&lt;/td&gt;
      &lt;td&gt;选择的元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A E&lt;/td&gt;
      &lt;td&gt;任何是元素A的后代元素E (后代节点指A的子节点，子节点的子节点，以此类推)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A &amp;gt; E&lt;/td&gt;
      &lt;td&gt;任何元素A的子元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;E:first-child&lt;/td&gt;
      &lt;td&gt;任何元素的第一个子元素E&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;B + E&lt;/td&gt;
      &lt;td&gt;任何元素B的下一个兄弟元素E&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-6&quot;&gt;其他属性&lt;/h2&gt;

&lt;h3 id=&quot;text-indent&quot;&gt;&lt;code&gt;text-indent&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
text-indent 属性规定文本块中首行文本的缩进。 &lt;br /&gt;
注释：允许使用负值。如果使用负值，那么首行会被缩进到左边。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;值&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;length&lt;/td&gt;
      &lt;td&gt;定义固定的缩进。默认值：0。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;定义基于父元素宽度的百分比的缩进。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 text-indent 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;text-transform&quot;&gt;&lt;code&gt;text-transform&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt;  &lt;br /&gt;
text-transform 属性控制文本的大小写。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;  &lt;br /&gt;
这个属性会改变元素中的字母大小写，而不论源文档中文本的大小写。如果值为 capitalize，则要对某些字母大写，但是并没有明确定义如何确定哪些字母要大写，这取决于用户代理如何识别出各个“词”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;值&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;默认。定义带有小写字母和大写字母的标准的文本。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;capitalize&lt;/td&gt;
      &lt;td&gt;文本中的每个单词以大写字母开头。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uppercase&lt;/td&gt;
      &lt;td&gt;定义仅有大写字母。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lowercase&lt;/td&gt;
      &lt;td&gt;定义无大写字母，仅有小写字母。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 text-transform 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;text-decoration&quot;&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
text-decoration 属性规定添加到文本的修饰。  &lt;br /&gt;
注释：修饰的颜色由 “color” 属性设置。  &lt;br /&gt;
注释：IE、Chrome 或 Safari 不支持 “blink” 属性值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;  &lt;br /&gt;
这个属性允许对文本设置某种效果，如加下划线。如果后代元素没有自己的装饰，祖先元素上设置的装饰会“延伸”到后代元素中。不要求用户代理支持 blink。&lt;/p&gt;

&lt;h3 id=&quot;text-align&quot;&gt;&lt;code&gt;text-align&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
text-align 属性规定元素中的文本的水平对齐方式。 &lt;br /&gt;
该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值 justify；不同用户代理可能会得到不同的结果。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;值&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;left&lt;/td&gt;
      &lt;td&gt;把文本排列到左边。默认值：由浏览器决定。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;right&lt;/td&gt;
      &lt;td&gt;把文本排列到右边。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;center&lt;/td&gt;
      &lt;td&gt;把文本排列到中间。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;justify&lt;/td&gt;
      &lt;td&gt;实现两端对齐文本效果。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 text-align 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;word-spacing&quot;&gt;&lt;code&gt;word-spacing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt; &lt;br /&gt;
word-spacing 属性增加或减少单词间的空白（即字间隔）。 &lt;br /&gt;
该属性定义元素中字之间插入多少空白符。针对这个属性，“字” 定义为由空白符包围的一个字符串。如果指定为长度值，会调整字之间的通常间隔；所以，normal 就等同于设置为 0。允许指定负长度值，这会让字之间挤得更紧。 &lt;br /&gt;
注释：允许使用负值。&lt;/p&gt;

&lt;h3 id=&quot;white-space&quot;&gt;&lt;code&gt;white-space&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义和用法&lt;/strong&gt; &lt;br /&gt;
white-space 属性设置如何处理元素内的空白。 &lt;br /&gt;
这个属性声明建立布局过程中如何处理元素中的空白符。值 pre-wrap 和 pre-line 是 CSS 2.1 中新增的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可能的值&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;值&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;normal&lt;/td&gt;
      &lt;td&gt;默认。空白会被浏览器忽略。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre&lt;/td&gt;
      &lt;td&gt;空白会被浏览器保留。其行为方式类似 HTML 中的 &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 标签。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nowrap&lt;/td&gt;
      &lt;td&gt;文本不会换行，文本会在在同一行上继续，直到遇到 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 标签为止。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre-wrap&lt;/td&gt;
      &lt;td&gt;保留空白符序列，但是正常地进行换行。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pre-line&lt;/td&gt;
      &lt;td&gt;合并空白符序列，但是保留换行符。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inherit&lt;/td&gt;
      &lt;td&gt;规定应该从父元素继承 white-space 属性的值。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;font-face&quot;&gt;&lt;code&gt;@font-face&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS3 @font-face 规则&lt;/strong&gt; &lt;br /&gt;
在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。 &lt;br /&gt;
通过 CSS3，web 设计师可以使用他们喜欢的任意字体。 &lt;br /&gt;
当您您找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。 &lt;br /&gt;
您“自己的”的字体是在 CSS3 @font-face 规则中定义的。&lt;/p&gt;

&lt;p&gt;注释：Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用您需要的字体&lt;/strong&gt; &lt;br /&gt;
在新的 @font-face 规则中，您必须首先定义字体的名称（比如 myFirstFont），然后指向该字体文件。 &lt;br /&gt;
如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFirstFont)：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
@font-face {
    font-family: myFirstFont;
    src: url(&#39;Sansation_Light.ttf&#39;),
         url(&#39;Sansation_Light.eot&#39;); /* IE9+ */
}
div {
    font-family: myFirstFont;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS3 字体描述符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面的表格列出了能够在 @font-face 规则中定义的所有字体描述符：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;描述符&lt;/td&gt;
      &lt;td&gt;值&lt;/td&gt;
      &lt;td&gt;描述&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-family&lt;/td&gt;
      &lt;td&gt;name&lt;/td&gt;
      &lt;td&gt;必需。规定字体的名称。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;src&lt;/td&gt;
      &lt;td&gt;URL&lt;/td&gt;
      &lt;td&gt;必需。定义字体文件的 URL。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-stretch&lt;/td&gt;
      &lt;td&gt;normal&lt;br /&gt;condensed&lt;br /&gt;ultra-condensed&lt;br /&gt;extra-condensed&lt;br /&gt;semi-condensed&lt;br /&gt;expanded&lt;br /&gt;semi-expanded&lt;br /&gt;extra-expanded&lt;br /&gt;ultra-expanded&lt;/td&gt;
      &lt;td&gt;可选。定义如何拉伸字体。默认是 “normal”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-style&lt;/td&gt;
      &lt;td&gt;ormal&lt;br /&gt;italic&lt;br /&gt;oblique&lt;/td&gt;
      &lt;td&gt;可选。定义字体的样式。默认是 “normal”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;font-weight&lt;/td&gt;
      &lt;td&gt;normal&lt;br /&gt;bold&lt;br /&gt;100&lt;br /&gt;200&lt;br /&gt;300&lt;br /&gt;400&lt;br /&gt;500&lt;br /&gt;600&lt;br /&gt;700&lt;br /&gt;800&lt;br /&gt;900&lt;/td&gt;
      &lt;td&gt;选。定义字体的粗细。默认是 “normal”。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unicode-range&lt;/td&gt;
      &lt;td&gt;unicode-range&lt;/td&gt;
      &lt;td&gt;可选。定义字体支持的 UNICODE 字符范围。默认是 “U+0-10FFFF”。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-7&quot;&gt;深入了解行高属性&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/fengzheng126/archive/2012/05/18/2507632.html&quot;&gt;参考：深入了解css的行高Line Height属性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般来说，设置行高为&lt;code&gt;值：纯数字&lt;/code&gt;是最理想的方式，因为其会随着对应的 &lt;code&gt;font-size&lt;/code&gt; 而缩放。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;盒模型及定位&lt;/h2&gt;

&lt;h3 id=&quot;div&quot;&gt;已知宽度的div居中&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用两种方法来实现一个背景色为红色、宽度为960px的&amp;lt;DIV&amp;gt;在浏览器中居中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的方法一：&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;margin：0 auto;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;html文件&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;Document&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-2.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;center&quot;&gt;aaa&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.center {
    width: 960px;
    margin: 0 auto;
    background-color: red;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;方法二：&lt;/p&gt;

&lt;p&gt;绝对定位，左边距离 body 50%，&lt;code&gt;margin-left: -480px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.center {
    width: 960px;
    background-color: red;
    position: absolute;
    left: 50%;
    margin-left: -480px;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-2.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-9&quot;&gt;对于居中的补充&lt;/h4&gt;

&lt;p&gt;参考自 &lt;a href=&quot;http://zh.learnlayout.com/&quot;&gt;学习CSS布局&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;像下面这样写css代码，使用 &lt;code&gt;max-width&lt;/code&gt; 替代 &lt;code&gt;width&lt;/code&gt;  可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要。&lt;/p&gt;

&lt;p&gt;有效的避免了如下问题： &lt;br /&gt;
当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
#main {
    max-width: 600px;
    margin: 0 auto;
}
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/2050/p/3392803.html&quot;&gt;CSS布局奇淫技巧之–各种居中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;css&quot;&gt;早期css滑动门&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有的圆角矩形是复杂图案，无法直接用border-radius，请在不使用 border-radius 的情况下实现一个可复用的高度和宽度都自适应的圆角矩形 &lt;br /&gt;
示例 &lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_7.png&quot; alt=&quot;圆角矩形&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这道题我一开始不会做，查阅了资料，发现这就是所谓的 css 滑动门的应用。&lt;a href=&quot;http://www.bkjia.com/webzh/759711.html&quot;&gt;妙味云课堂之css：滑动门、圆角、css精灵&lt;/a&gt; &lt;br /&gt;
使用三层嵌套，或者四层嵌套的 &lt;code&gt;div&lt;/code&gt;，通过背景图定位等方式可以实现。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;左侧固定右侧自适应宽度的两列布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用两种不同的方法来实现一个两列布局，其中左侧部分宽度固定、右侧部分宽度随浏览器宽度的变化而自适应变化 &lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_3.jpg&quot; alt=&quot;pic&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的方法一：&lt;/p&gt;

&lt;p&gt;不使用浮动，使用绝对定位，将左上角的块放好位置，右边的块设置&lt;code&gt;margin-left&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;html 文件：&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;layout&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-6-3.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;left&quot;&gt;DIV-A&lt;/div&gt;
            &lt;div class=&quot;right&quot;&gt;DIV-B&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;bottom&quot;&gt;DIV-C&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css 文件：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.row {
    position: relative;
}
.left {
    width: 100px;
    height: 100px;
    background-color: red;
    position: absolute;
    top: 0;
    left: 0;
}
.right {
    height: 100px;
    background-color: blue;
    margin-left: 100px;
}
.bottom {
    height: 100px;
    background-color: yellow;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;方法二：&lt;/p&gt;

&lt;p&gt;使用浮动，左边的块使用浮动，右边的块使用&lt;code&gt;margin-left&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.left {
    width: 100px;
    height: 100px;
    background-color: red;
    float: left;
}
.right {
    height: 100px;
    background-color: blue;
    margin-left: 100px;
}
.bottom {
    height: 100px;
    background-color: yellow;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-6-3.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;看完了后面的 BFC 之后，本题和下一题都可以用另一种方法了
总之我已经震惊了！太爽了！有没有！&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;使用 BFC 进行两列布局&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;two-col-layout-with-BFC.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;left&quot;&gt;DIV-A&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;DIV-B&lt;/div&gt;
        &lt;div class=&quot;bottom&quot;&gt;DIV-C&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.left{
    width: 100px;
    height: 100px;
    background-color: blue;
    float: left;
}
.right{
    height: 100px;
    background-color: yellow;
    overflow: hidden;
}
.bottom{
    height: 100px;
    background-color: red;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/two-col-layout-with-BFC.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;双飞翼布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;用两种不同的方式来实现一个三列布局，其中左侧和右侧的部分宽度固定，中间部分宽度随浏览器宽度的变化而自适应变化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原题中参考资料 &lt;a href=&quot;http://www.imooc.com/wenda/detail/254035&quot;&gt;双飞翼布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;Flying Swing Layout&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-6-4.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;bd&quot;&gt;
            &lt;div class=&quot;main&quot;&gt;
                &lt;div class=&quot;main-wrap&quot;&gt;
                    &lt;p&gt;Flying Swing Layout&lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;sub&quot;&gt;
                &lt;p&gt;Flying Swing Layout&lt;/p&gt;
                left
            &lt;/div&gt;
            &lt;div class=&quot;extra&quot;&gt;
                &lt;p&gt;Flying Swing Layout&lt;/p&gt;
                right
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;p&gt;```css
.bd {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*padding: 0 190px;*/ } .main {
float: left;
width: 100%;
background-color: #aaa; } .main-wrap {
margin: 0 190px; } .sub {
float: left;
width: 190px;
margin-left: -100%;
background-color: blue;        
/*position: relative;
left: -190px;*/ } .extra {
float: left;
width: 190px;
margin-left: -190px;
background-color: yellow;        
/*position: relative;
right: -190px;*/ } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/task0001-6-4.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 BFC 的另一种方法，我再一次震惊！&lt;/p&gt;

&lt;p&gt;代码超级简单！&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;flying-Swing-BFC&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;flying-Swing-BFC.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;
        &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;
        &lt;div class=&quot;main&quot;&gt;
            flying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.htmlflying-Swing-BFC.html
        &lt;/div&gt;
        &lt;div class=&quot;footer&quot;&gt;
            footerfooterfooterfooterfooterfooterfooterfooterfooter
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.left{
    width: 100px;
    background-color: red;
    float: left;
}
.right{
    width: 200px;
    background-color: blue;
    float: right;
}
.main{
    background-color: #eee;
    overflow: hidden;
}
&lt;/code&gt;
&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/flying-Swing-BFC.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;浮动布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;实现一个浮动布局，红色容器中每一行的蓝色容器数量随着浏览器宽度的变化而变化 &lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_4.jpg&quot; alt=&quot;pic&quot; /&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/Baidu-Front-end-task0001_5.jpg&quot; alt=&quot;pic&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个题我觉的直接将每一个块浮动起来就好了，不知我理解的对不对。&lt;/p&gt;

&lt;p&gt;html文件&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;Document&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;task0001-6-5.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css文件&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
body {
    background-color: red;
}
div {
    width: 150px;
    height: 100px;
    margin: 10px;
    float: left;
    background-color: blue;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;file:///E:/GitWorkSpace/baidu-ife-practice/task0001/task0001-6-5.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;清除浮动/闭合浮动&lt;/h3&gt;

&lt;p&gt;参考自 &lt;a href=&quot;http://www.iyunlu.com/view/css-xhtml/55.html&quot;&gt;那些年我们一起清除过的浮动 by 一丝冰凉&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none；&lt;/li&gt;
  &lt;li&gt;闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们想要达到的效果更确切地说是闭合浮动，而不是单纯的清除浮动，设置clear：both清除浮动并不能解决warp高度塌陷的问题。&lt;/p&gt;

&lt;p&gt;正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（&lt;strong&gt;高度塌陷&lt;/strong&gt;）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度。&lt;/p&gt;

&lt;p&gt;最后一丝姐给了两个精益求精方案，我觉得方案一更易于理解，这里实践一下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/close-float.html&quot;&gt;闭合浮动的Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是源码&lt;/p&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE html&amp;gt;&lt;/p&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;title&gt;Document&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;close-float.css&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;row clearfix&quot;&gt;
            &lt;div class=&quot;left&quot;&gt;
                &lt;h1&gt;left&lt;/h1&gt;
                &lt;div&gt;Content or Something&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row2&quot;&gt;Row2&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;css&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.row {
    border: 1px solid red;
}
.clearfix:after {
    content: &quot;\200B&quot;;
    display: block;
    height: 0;
    clear: both;
}
.clearfix {
    *zoom: 1;
}
.left {
    width: 200px;
    float: left;
    background-color: #eee;
}
.right {
    width: 200px;
    float: right;
    background-color: #eee;
}
.row2 {
    width: 600px;
    height: 50px;
    background-color: #aaa;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其中&lt;code&gt;*zoom: 1&lt;/code&gt;是为了触发&lt;code&gt;hasLayout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;还有另一种解决方案！&lt;/p&gt;

&lt;p&gt;参考自：&lt;a href=&quot;http://zh.learnlayout.com/clearfix.html&quot;&gt;清除浮动（clearfix hack）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接使用，如下代码即可&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.clearfix{
    overflow: auto;
    zoom: 1;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/baidu-ife-practice/task0001/close-float-2.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(实际上，我看完后面的资料，再翻到这里就明白了！正是使用了BFC原理！！！！！！！)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是今天遇到一个坑！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code&gt;over-flow&lt;/code&gt;，在后面如果有元素要绝对布局在父元素的外面的，意思就是出现 &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; 的值为负值时，就会出现看不到，或者滚动条的问题！&lt;/p&gt;

&lt;p&gt;若是有这种要求，我觉得还是用一丝姐姐的解决方案比较好。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zfengqi.me/?p=87&quot;&gt;清除浮动的几种方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;box-sizing&quot;&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;当你设置一个元素为 &lt;code&gt;box-sizing: border-box;&lt;/code&gt; 时，此元素的内边距和边框不再会增加它的宽度。&lt;/p&gt;

&lt;p&gt;他们的内边距和边框都是向内的挤压的。支持IE8+，需要加浏览器内核。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
.simple {
    width: 500px;
    margin: 20px auto;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;响应式布局&lt;/h3&gt;

&lt;p&gt;媒体查询&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries&quot;&gt;MDN CSS媒体查询&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://zh.learnlayout.com/media-queries.html&quot;&gt;媒体查询-学习CSS布局&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;@media screen and (min-width: 500px) and (max-width: 800px) { ... }&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/&quot;&gt;An Introduction to Meta Viewport and @viewport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-15&quot;&gt;多列布局&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://zh.learnlayout.com/column.html&quot;&gt;column&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bfc--ie--haslayout&quot;&gt;BFC 和 IE 的 hasLayout&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/pigtail/archive/2013/01/23/2871627.html&quot;&gt;BFC和IE的hasLayout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://outofmemory.cn/wr/?u=http%3A%2F%2Fkkeys.me%2Fpost%2F68547473290&quot;&gt;Block Formatting Context 的几大用处&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看完这个资料后我震惊了！竟然可以这么玩儿！ &lt;br /&gt;
我将本文之前提到的两列布局，双飞翼布局又重新写了一遍！太爽了！代码超级简洁！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Block Formatting Context 的几大用处：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;防止 margin 折叠&lt;/li&gt;
  &lt;li&gt;清除float&lt;/li&gt;
  &lt;li&gt;不会环绕float元素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相关资料&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model&quot;&gt;视觉格式化模型(visual formatting model)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Block_formatting_context&quot;&gt;块格式化上下文(block formatting context)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;div-&quot;&gt;&lt;code&gt;div&lt;/code&gt; 三列等高&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://show.sysu.edu.cn/?action-blogdetail-uid-2383-id-5040&quot;&gt;纯CSS实现三列DIV等高布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最关键的地方有3句：&lt;/p&gt;

&lt;p&gt;最外层div设置一个溢出隐藏&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
#wrap {
    overflow:hidden;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每一个子块设置 padding 和 margin&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
#left,#center,#right{
    margin-bottom:-10000px;
    padding-bottom:10000px;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;overflow:hidden;    ‘隐藏溢出。如果内容溢出wrap层，则不显示。&lt;/p&gt;

&lt;p&gt;margin-bottom:-10000px;    ‘底部边距-10000px。 &lt;br /&gt;
padding-bottom:10000px;    ‘底部填充10000px。 &lt;br /&gt;
上面这两句能够实现的效果就是，产生10000px的填充，然后用负的边距把它给抵销掉。&lt;/p&gt;

&lt;h3 id=&quot;inline-block&quot;&gt;去除inline-block元素间间距&lt;/h3&gt;

&lt;p&gt;一开始我不知道是因为使用了 &lt;code&gt;display: inline-block&lt;/code&gt; 会有间距。后来查找资料找到了相关的方案。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/&quot;&gt;去除inline-block元素间间距的N种方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/fighting-the-space-between-inline-block-elements/&quot;&gt;Fighting the Space Between Inline Block Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;真正意义上的inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距。 &lt;br /&gt;
这种表现是符合规范的应该有的表现。&lt;/p&gt;

&lt;p&gt;解决方法有很多，上述博文中提到的有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;移除空格&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;margin&lt;/code&gt; 负值&lt;/li&gt;
  &lt;li&gt;取消闭合标签&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;font-size: 0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;letter-spacing&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用 &lt;code&gt;word-spacing&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;其他&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我觉得使用 4 &lt;code&gt;font-size: 0&lt;/code&gt; 比较好，对别的元素影响最小。代码如下：在 &lt;code&gt;a&lt;/code&gt; 的外层将字体尺寸设为 0，载对内层的 &lt;code&gt;a&lt;/code&gt; 重新设置字体大小，即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
nav {
    font-size: 0;
}
nav a {
    font-size: 16px;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-16&quot;&gt;最终作品&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaohaoyang.github.io/ife/task/task0001/work/Gaohaoyang/index.html&quot;&gt;在线Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/ife/tree/master/task/task0001/work/Gaohaoyang&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-17&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ecomfe/spec&quot;&gt;HTML、CSS的代码规范&lt;/a&gt; 自己要试着改变一些代码风格了，规范化！&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20455165&quot;&gt;顾轶灵:Web语义化&lt;/a&gt; &lt;br /&gt;
我看他回答最后的举例的Sildes做的非常好，可以经常看看。&lt;a href=&quot;http://justineo.github.io/slideshows/semantic-html/&quot;&gt;Semantic HTML&lt;/a&gt;。他的其他Slides也做的非常好，很喜欢这种风格！&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cfuns.com/blog-5445898-5398950.html&quot;&gt;CSS命名规范@W3C Funs&lt;/a&gt; 起名不再困难！&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;点击阅读: CSS浏览器兼容性列表&quot;&gt;点击阅读: CSS浏览器兼容性列表-维基百科&lt;/a&gt; 类似的我想到了 &lt;a href=&quot;http://caniuse.com/&quot;&gt;Can I Use&lt;/a&gt;，Can I Use 包含的更多，包括 HTML5, CSS SVG, JS API 等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zh.learnlayout.com/&quot;&gt;学习CSS布局&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mediaqueri.es/&quot;&gt;Media Queries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients&quot;&gt;使用CSS渐变&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3cplus.com/content/css3-gradient&quot;&gt;CSS3 Gradient&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.colorzilla.com/gradient-editor/&quot;&gt;CSS渐变生成器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>同步一个 fork</title>
   <link href="http://127.0.0.1/github/2015/04/12/syncing-a-fork/"/>
   <updated>2015-04-12T23:14:54+08:00</updated>
   <id>http://127.0.0.1/github/2015/04/12/Syncing-a-fork</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;如何使用搜索引擎&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;具体方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#configuring-a-remote-for-a-fork&quot; id=&quot;markdown-toc-configuring-a-remote-for-a-fork&quot;&gt;Configuring a remote for a fork&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#syncing-a-fork&quot; id=&quot;markdown-toc-syncing-a-fork&quot;&gt;Syncing a fork&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fork 了别人的仓库后，原作者又更新了仓库，如何将自己的代码和原仓库保持一致？本文将给你解答。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;如何使用搜索引擎&lt;/h2&gt;

&lt;p&gt;其实这个问题并不难，我又被坑了。百度搜的东西不靠谱啊，以后这种问题一定要用&lt;strong&gt;英文&lt;/strong&gt;在 &lt;a href=&quot;http://www.google.com&quot;&gt;Google&lt;/a&gt; 或者 &lt;a href=&quot;http://cn.bing.com/&quot;&gt;Bing&lt;/a&gt; 上搜索，这样才能搜到原汁原味的答案。就当是一个教训吧。&lt;/p&gt;

&lt;p&gt;搜索 fork sync，就可以看到 GitHub 自己的帮助文档 &lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;Syncing a fork&lt;/a&gt; 点进去看这篇的时候，注意到有一个 Tip: Before you can sync your fork with an upstream repository, you must &lt;a href=&quot;https://help.github.com/articles/configuring-a-remote-for-a-fork/&quot;&gt;configure a remote that points to the upstream repository&lt;/a&gt; in Git.&lt;/p&gt;

&lt;p&gt;根据这两篇文章，问题迎刃而解！&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;具体方法&lt;/h2&gt;

&lt;h3 id=&quot;configuring-a-remote-for-a-fork&quot;&gt;Configuring a remote for a fork&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;给 fork 配置一个 remote&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主要使用 &lt;code&gt;git remote -v&lt;/code&gt; 查看远程状态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
git remote -v
# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加一个将被同步给 fork 远程的上游仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;再次查看状态确认是否配置成功。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
git remote -v
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;syncing-a-fork&quot;&gt;Syncing a fork&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 upstream/master &lt;br /&gt;
&lt;code&gt;git fetch upstream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
git fetch upstream
# remote: Counting objects: 75, done.
# remote: Compressing objects: 100% (53/53), done.
# remote: Total 62 (delta 27), reused 44 (delta 9)
# Unpacking objects: 100% (62/62), done.
# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
#  * [new branch]      master     -&amp;gt; upstream/master
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;切换到本地主分支(如果不在的话)  &lt;br /&gt;
&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
git checkout master
# Switched to branch &#39;master&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。  &lt;br /&gt;
&lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
git merge upstream/master
# Updating a422352..5fdff0f
# Fast-forward
#  README                    |    9 -------
#  README.md                 |    7 ++++++
#  2 files changed, 7 insertions(+), 9 deletions(-)
#  delete mode 100644 README
#  create mode 100644 README.md
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果想更新到 GitHub 的 fork 上，直接 &lt;code&gt;git push origin master&lt;/code&gt; 就好了。&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>判断两个数组是否相似 (arraysSimilar)</title>
   <link href="http://127.0.0.1/javascript/2015/04/06/arrays-similar/"/>
   <updated>2015-04-06T23:14:54+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/04/06/arrays-similar</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;题目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;解答&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;具体实现代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;题目&lt;/h2&gt;

&lt;p&gt;题目来自 &lt;a href=&quot;http://imooc.com/code/5760&quot;&gt;慕课网 JavaScript 深入浅出 1-6 编程练习&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;请在 index.html 文件中，编写 arraysSimilar 函数，实现判断传入的两个数组是否相似。具体需求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数组中的成员类型相同，顺序可以不同。例如 [1, true] 与 [false, 2] 是相似的。&lt;/li&gt;
  &lt;li&gt;数组的长度一致。&lt;/li&gt;
  &lt;li&gt;类型的判断范围，需要区分: String, Boolean, Number, undefined, null, 函数, 日期, window.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当以上全部满足，则返回&lt;strong&gt;“判定结果:通过”&lt;/strong&gt;，否则返回&lt;strong&gt;“判定结果:不通过”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;题目给出了 index.html 如下：&lt;/p&gt;

&lt;p&gt;```html
&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/p&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb18030&quot; /&gt;
    &lt;title&gt;Untitled Document&lt;/title&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;   
        /*
         * param1 Array
         * param2 Array
         * return true or false
         */
        function arraysSimilar(arr1, arr2){

        }
    &lt;/script&gt;
    &lt;script src=&quot;testData.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;其中 testData.js 是测试用例，代码如下&lt;/p&gt;

&lt;p&gt;```js
var result = function() {
    //以下为多组测试数据
    var cases = [{
        arr1: [1, true, null],
        arr2: [null, false, 100],
        expect: true
    }, {
        arr1: [
            function() {},
            100
        ],
        arr2: [100, {}],
        expect: false
    }, {
        arr1: [null, 999],
        arr2: [{},
            444
        ],
        expect: false
    }, {
        arr1: [window, 1, true, new Date(), “hahaha”, (function() {}), undefined],
        arr2: [undefined, (function() {}), “okokok”, new Date(), false, 2, window],
        expect: true
    }, {
        arr1: [new Date()],
        arr2: [{}],
        expect: false
    }, {
        arr1: [window],
        arr2: [{}],
        expect: false
    }, {
        arr1: [undefined, 1],
        arr2: [null, 2],
        expect: false
    }, {
        arr1: [new Object, new Object, new Object],
        arr2: [{}, {},
            null
        ],
        expect: false
    }, {
        arr1: null,
        arr2: null,
        expect: false
    }, {
        arr1: [],
        arr2: undefined,
        expect: false
    }, {
        arr1: “abc”,
        arr2: “cba”,
        expect: false
    }];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//使用for循环, 通过arraysSimilar函数验证以上数据是否相似，如相似显示“通过”,否则&quot;不通过&quot;,所以大家要完成arraysSimilar函数,具体要求，详见任务要求。    
for (var i = 0; i &amp;lt; cases.length; i++) {
    if (arraysSimilar(cases[i].arr1, cases[i].arr2) !== cases[i].expect) {
        document.write(&quot;不通过！case&quot; + (i + 1) + &quot;不正确！arr1=&quot; + JSON.stringify(cases[i].arr1) + &quot;, arr2=&quot; + JSON.stringify(cases[i].arr2) + &quot; 的判断结果不是&quot; + cases[i].expect);
        return false;
    }
}
return true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}();
document.write(“判定结果:” + (result ? “通过” : “不通过”));
```&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解答&lt;/h2&gt;

&lt;p&gt;各位读者在看解答前也可以自己考虑一下，看看咱们的想法是否一致，期待您在本文的留言。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;思路&lt;/h3&gt;

&lt;p&gt;通过观察测试用例，可以发现，最后三个用例有不是数组的。所以我们可以先判断传入的参数是否是数组。 &lt;br /&gt;
又因为题目中要求数组长度必须一致，这也是第二个限制条件。 &lt;br /&gt;
最后再区分具体的类型。&lt;/p&gt;

&lt;p&gt;理清思路我们可以分为以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断传入的参数是否为数组 (使用 &lt;code&gt;instanceof&lt;/code&gt; 方法)&lt;/li&gt;
  &lt;li&gt;检查两个数组长度是否一致&lt;/li&gt;
  &lt;li&gt;分别判断数组内元素的基本数据类型 (使用 &lt;code&gt;typeof&lt;/code&gt; 方法)&lt;/li&gt;
  &lt;li&gt;因为 &lt;code&gt;typeof&lt;/code&gt; 只能检查基本数据类型，对于 &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt; 返回的都是 &lt;code&gt;object&lt;/code&gt;，所以使用 &lt;code&gt;Object.prototype.toString.apply()&lt;/code&gt; 来检查这些对象类型，其返回值为：&lt;code&gt;&#39;[object Null]&#39;&lt;/code&gt;, &lt;code&gt;&#39;[object Date]&#39;&lt;/code&gt;, &lt;code&gt;&#39;[object global]&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;具体实现代码&lt;/h3&gt;

&lt;p&gt;JavaScript代码如下&lt;/p&gt;

&lt;p&gt;```js
/**
 * =====================================================
 * 请在index.html文件中，编写arraysSimilar函数，实现判断传入的两个数组是否相似。具体需求：
 * 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。
 * 2. 数组的长度一致。
 * 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.
 *
 * 当以上全部满足，则返回”判定结果:通过”，否则返回”判定结果:不通过”。
 * =====================================================
 */&lt;/p&gt;

&lt;p&gt;/*
* param1 Array
* param2 Array
* return true or false
*/
function arraysSimilar(arr1, arr2){
    if (arr1 instanceof Array &amp;amp;&amp;amp; arr2 instanceof Array ) {    //先判断传入的是否是数组
        if (arr1.length == arr2.length) {                    //判断数组长度
            console.log(“same-length”);
            console.log(arr1);
            console.log(arr2);
            //开始判断数组内部是否相似
            return sameLengthArraysSimilar(arr1, arr2);
        } else{
            //两个数组长度不同返回false
            return false;
        }
    } else {
        //传入的参数不是数组返回false
        return false;
    }
}&lt;/p&gt;

&lt;p&gt;/**
 * 判断两个等长的数组内部是否相似
 * 遍历数组
 * arr1中元素各种类型出现的个数是否和arr2中元素各种类型出现的个数相同
 * @param  {Array} arr1 数组1
 * @param  {Array} arr2 数组2
 * @return {true,false}
 */
function sameLengthArraysSimilar(arr1,arr2) {
    var numInArr1 = 0;
    var numInArr2 = 0;
    var booleanInArr1 = 0;
    var booleanInArr2 = 0;
    var funInArr1 = 0;
    var funInArr2 = 0;
    var undefinedInArr1 = 0;
    var undefinedInArr2 = 0;
    var stringInArr1 = 0;
    var stringInArr2 = 0;
    var nullInArr1 = 0;
    var nullInArr2 = 0;
    var dateInArr1 = 0;
    var dateInArr2 = 0;
    var windowInArr1 = 0;
    var windowInArr2 = 0;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 0; i &amp;lt; arr1.length; i++) {
    if(typeof arr1[i] === &#39;number&#39; ){
        numInArr1 ++;
    } else if(typeof arr1[i] === &#39;boolean&#39;){
        booleanInArr1 ++;
    } else if(typeof arr1[i] === &#39;function&#39;){
        funInArr1 ++;
    } else if(typeof arr1[i] === &#39;undefined&#39;){
        undefinedInArr1 ++;
    } else if(typeof arr1[i] === &#39;string&#39;){
        stringInArr1 ++;
    } else if(typeof arr1[i] ===&#39;object&#39;){
        if(Object.prototype.toString.apply(arr1[i]) === &#39;[object Null]&#39;){
            nullInArr1 ++;
        } else if(Object.prototype.toString.apply(arr1[i]) === &#39;[object Date]&#39;){
            dateInArr1 ++;
        } else if(Object.prototype.toString.apply(arr1[i]) === &#39;[object global]&#39;){
            windowInArr1 ++;
        }
    }

    if(typeof arr2[i] === &#39;number&#39;){
        numInArr2 ++;
    } else if(typeof arr2[i] === &#39;boolean&#39;){
        booleanInArr2 ++;
    } else if(typeof arr2[i] === &#39;function&#39;){
        funInArr2 ++;
    } else if(typeof arr2[i] === &#39;undefined&#39;){
        undefinedInArr2 ++;
    } else if(typeof arr2[i] === &#39;string&#39;){
        stringInArr2 ++;
    } else if(typeof arr2[i] ===&#39;object&#39;){
        if(Object.prototype.toString.apply(arr2[i]) === &#39;[object Null]&#39;){
            nullInArr2 ++;
        } else if(Object.prototype.toString.apply(arr2[i]) === &#39;[object Date]&#39;){
            dateInArr2 ++;
        } else if(Object.prototype.toString.apply(arr2[i]) === &#39;[object global]&#39;){
            windowInArr2 ++;
        }
    }
}

console.log(&quot;num---&quot;+numInArr1);
console.log(&quot;num---&quot;+numInArr2);
console.log(&quot;boo---&quot;+booleanInArr1);
console.log(&quot;boo---&quot;+booleanInArr2);
console.log(&quot;null---&quot;+nullInArr1);
console.log(&quot;null---&quot;+nullInArr2);
console.log(&quot;window---&quot;+windowInArr1);
console.log(&quot;window---&quot;+windowInArr2);
console.log(&quot;date---&quot;+dateInArr1);
console.log(&quot;date---&quot;+dateInArr2);
console.log(&quot;string---&quot;+stringInArr1);
console.log(&quot;string---&quot;+stringInArr2);
console.log(&quot;fun---&quot;+funInArr1);
console.log(&quot;fun---&quot;+funInArr2);
console.log(&quot;undefined---&quot;+undefinedInArr1);
console.log(&quot;undefined---&quot;+undefinedInArr2);

if(numInArr1 == numInArr2 &amp;amp;&amp;amp; booleanInArr1==booleanInArr2 &amp;amp;&amp;amp; funInArr1==funInArr2 &amp;amp;&amp;amp; undefinedInArr1==undefinedInArr2 &amp;amp;&amp;amp; stringInArr1==stringInArr2 &amp;amp;&amp;amp; nullInArr1==nullInArr2 &amp;amp;&amp;amp; dateInArr1==dateInArr2 &amp;amp;&amp;amp; windowInArr1==windowInArr2){
    console.log(&#39;================================true&#39;);
    return true;
}else{
    console.log(&#39;================================false&#39;);
    return false;
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;上述代码完美的跑完所有的测试用例，读者 &lt;a href=&quot;http://gaohaoyang.github.io/javascript-test/arraysSimilar/&quot;&gt;点击这里查看结果&lt;/a&gt;，并且可以按 &lt;code&gt;f12&lt;/code&gt; 看 Console 信息， 里面有代码的执行过程。&lt;/li&gt;
  &lt;li&gt;当然你也可以复制本文的 JavaScript 代码，在 &lt;a href=&quot;http://imooc.com/code/5760&quot;&gt;慕课网的习题&lt;/a&gt; 下跑一下，也可以看到 &lt;code&gt;判定结果:通过&lt;/code&gt; 的结果&lt;/li&gt;
  &lt;li&gt;完整源代码在我的 GitHub &lt;a href=&quot;https://github.com/Gaohaoyang/javascript-test/tree/master/arraysSimilar&quot;&gt;javascript-test/arraysSimilar/&lt;/a&gt; 仓库中&lt;/li&gt;
  &lt;li&gt;其实我的代码逻辑并不复杂，有点&lt;strong&gt;空间换时间&lt;/strong&gt;的感觉，执行效率应该是较高的。没有用 JavaScript 封装的任何函数，完全是自己写的。其实代码除去 &lt;code&gt;console.log()&lt;/code&gt; 也并没有多少行。&lt;/li&gt;
  &lt;li&gt;各位读者有什么好的想法欢迎留言交流！&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>代码校验工具 SublimeLinter 的安装与使用</title>
   <link href="http://127.0.0.1/sublime/2015/03/26/sublimelinter/"/>
   <updated>2015-03-26T23:14:54+08:00</updated>
   <id>http://127.0.0.1/sublime/2015/03/26/sublimeLinter</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sublimelinter&quot; id=&quot;markdown-toc-sublimelinter&quot;&gt;安装 SublimeLinter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript-&quot; id=&quot;markdown-toc-javascript-&quot;&gt;JavaScript 语法检查&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sublimelinter-jshint&quot; id=&quot;markdown-toc-sublimelinter-jshint&quot;&gt;安装 SublimeLinter-jshint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nodejs--jshint&quot; id=&quot;markdown-toc-nodejs--jshint&quot;&gt;安装 nodeJS 和 jshint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#css-&quot; id=&quot;markdown-toc-css-&quot;&gt;css 语法检查&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sublimelinter-csslint&quot; id=&quot;markdown-toc-sublimelinter-csslint&quot;&gt;安装 SublimeLinter-csslint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#nodejs--csslint&quot; id=&quot;markdown-toc-nodejs--csslint&quot;&gt;在 nodeJS 下安装 csslint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文我将讲述一下 SublimeLinter 的安装过程。其组件 jshint 的安装与使用。其组件 csslint 的安装与使用。我将基于 &lt;a href=&quot;http://sublimetext.com/3&quot;&gt;Sublime Text 3&lt;/a&gt; 来安装。使用 Sublime Text 2 的用户阅读本文是没有帮助的。&lt;/p&gt;

&lt;p&gt;SublimeLinter 是 Sublime 的插件，它的作用是检查代码语法是否有错误，并提示。习惯了 IDE 下写代码的人一定需要一款在 Sublime 上类似的语法检查工具。下面我们开始。&lt;/p&gt;

&lt;h2 id=&quot;sublimelinter&quot;&gt;安装 SublimeLinter&lt;/h2&gt;

&lt;p&gt;如同其他插件一样使用 Package Control 来安装。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下 &lt;code&gt;Ctrl+Shift+p&lt;/code&gt; 进入 Command Palette&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;install&lt;/code&gt;进入 Package Control: Install Package&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;SublimeLinter&lt;/code&gt;。进行安装.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-sublimeLinter.jpg&quot; alt=&quot;SublimeLinter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后可以看到这样一段话：&lt;/p&gt;

&lt;p&gt;```
Welcome to SublimeLinter, a linter framework for Sublime Text 3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;              * * * IMPORTANT! * * *

     SublimeLinter 3 is NOT a drop-in replacement for
    earlier versions.

     Linters *NOT* included with SublimeLinter 3,
     they must be installed separately.

     The settings are different.

             * * * READ THE DOCS! * * *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Otherwise you will never know how to install linters, nor will
 you know about all of the great new features in SublimeLinter 3.&lt;/p&gt;

&lt;p&gt;For complete documentation on how to install and use SublimeLinter,
 please see:&lt;/p&gt;

&lt;p&gt;http://www.sublimelinter.com
```&lt;/p&gt;

&lt;p&gt;可以看到具体的 Linters 组件&lt;strong&gt;不&lt;/strong&gt;被包含在 SublimeLinter 3 中，所以我们要额外独立安装组件。 &lt;br /&gt;
可以针对不同的语言安装不同的组件。&lt;/p&gt;

&lt;h2 id=&quot;javascript-&quot;&gt;JavaScript 语法检查&lt;/h2&gt;

&lt;p&gt;SublimeLinter-jshint 是基于 nodeJS 下的 jshint 的插件，实际上 SublimeLinter-jshint 调用了 nodeJS 中 jshint 的接口来进行语法检查的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sublimelinter-jshint&quot;&gt;安装 SublimeLinter-jshint&lt;/h3&gt;

&lt;p&gt;为了让 JavaScript 代码有语法检查，我们安装 SublimeLinter-jshint &lt;br /&gt;
同样的方法，我们安装 SublimeLinter-jshint&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下 &lt;code&gt;Ctrl+Shift+p&lt;/code&gt; 进入 Command Palette&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;install&lt;/code&gt;进入 Package Control: Install Package&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;SublimeLinter-jshint&lt;/code&gt;。进行安装.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint.jpg&quot; alt=&quot;SublimeLinter-jshint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后我们可以看到下面的一段话&lt;/p&gt;

&lt;p&gt;```
SublimeLinter-jshint
  ——————————-
  This linter plugin for SublimeLinter provides an interface to jshint.&lt;/p&gt;

&lt;p&gt;** IMPORTANT! **&lt;/p&gt;

&lt;p&gt;Before this plugin will activate, you &lt;em&gt;must&lt;/em&gt;
  follow the installation instructions here:&lt;/p&gt;

&lt;p&gt;https://github.com/SublimeLinter/SublimeLinter-jshint
```&lt;/p&gt;

&lt;h3 id=&quot;nodejs--jshint&quot;&gt;安装 nodeJS 和 jshint&lt;/h3&gt;

&lt;p&gt;在插件开始工作之前，我们必须再看一下上述插件的&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-jshint&quot;&gt;安装说明&lt;/a&gt; &lt;br /&gt;
通过 &lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-jshint&quot;&gt;SublimeLinter-jshint 的说明&lt;/a&gt; 我们可以看到，这个组件依赖于 nodeJS 下的 jshint，所以我们安装 nodeJS 环境和 nodeJS 下的 jshint。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装 &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;通过 npm 安装&lt;code&gt;jshint&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在命令行下输入如下代码，完成安装&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g jshint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后命令行中出现如下的信息&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:\Users\Administrator\AppData\Roaming\npm\jshint -&amp;gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint\bin\jshint
jshint@2.6.3 C:\Users\Administrator\AppData\Roaming\npm\node_modules\jshint
├── strip-json-comments@1.0.2
├── underscore@1.6.0
├── exit@0.1.2
├── shelljs@0.3.0
├── console-browserify@1.1.0 (date-now@0.1.4)
├── htmlparser2@3.8.2 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.13, domutils@1.5.1)
├── minimatch@1.0.0 (sigmund@1.0.0, lru-cache@2.5.0)
└── cli@0.6.6 (glob@3.2.11)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以查看 jshint 版本，已确认安装完成。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:\Users\Administrator&amp;gt;jshint -v
jshint v2.6.3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在，恭喜你，我们使用 Sublime 编辑 JavaScript 文件，就会有语法检查了！&lt;/p&gt;

&lt;p&gt;在编辑过程中，会有如下提示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test.jpg&quot; alt=&quot;SublimeLinter-jshint-test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击提示点后，Sublime 状态栏也会有相应的说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-jshint-test2.jpg&quot; alt=&quot;SublimeLinter-jshint-test2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;css-&quot;&gt;css 语法检查&lt;/h2&gt;

&lt;p&gt;与 jshint 同理，SublimeLinter-csslint 也是基于 nodeJS 下的 csslint 的插件，实际上 SublimeLinter-csslint 调用了 nodeJS 中 csslint 的接口来进行语法检查的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sublimelinter-csslint&quot;&gt;安装 SublimeLinter-csslint&lt;/h3&gt;

&lt;p&gt;同样的方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按下 &lt;code&gt;Ctrl+Shift+p&lt;/code&gt; 进入 Command Palette&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;install&lt;/code&gt;进入 Package Control: Install Package&lt;/li&gt;
  &lt;li&gt;输入&lt;code&gt;SublimeLinter-csslint&lt;/code&gt;。进行安装.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint.jpg&quot; alt=&quot;SublimeLinter-csslint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后我们可以看到下面的一段话&lt;/p&gt;

&lt;p&gt;```
SublimeLinter-csslint
——————————-
This linter plugin for SublimeLinter provides an interface to csslint.&lt;/p&gt;

&lt;p&gt;** IMPORTANT! **&lt;/p&gt;

&lt;p&gt;Before this plugin will activate, you &lt;em&gt;must&lt;/em&gt;
follow the installation instructions here:&lt;/p&gt;

&lt;p&gt;https://github.com/SublimeLinter/SublimeLinter-csslint
```&lt;/p&gt;

&lt;p&gt;在使用插件之前，必须遵循上述网址中的&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter-csslint&quot;&gt;安装说明&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;nodejs--csslint&quot;&gt;在 nodeJS 下安装 csslint&lt;/h3&gt;

&lt;p&gt;进入上述的 GitHub 地址，csslint 的说明页。我们知道了和 jshint 一样，csslint 也是基于 nodeJS 下的 csslint 来使用的。&lt;/p&gt;

&lt;p&gt;这里安装 nodeJS 过程省略。 &lt;br /&gt;
只需用 npm 安装 csslint 即可。&lt;/p&gt;

&lt;p&gt;在命令行中输入&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
npm install -g csslint   
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完成后命令行中出现如下的信息&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:\Users\Administrator\AppData\Roaming\npm\csslint -&amp;gt; C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint\cli.js
csslint@0.10.0 C:\Users\Administrator\AppData\Roaming\npm\node_modules\csslint
└── parserlib@0.2.5
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以查看 csslint 版本，已确认安装完成。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:\Users\Administrator&amp;gt;csslint --version
v0.10.0
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;现在，恭喜你，我们使用 Sublime 编辑 css 文件，就会有语法检查了！&lt;/p&gt;

&lt;p&gt;在编辑过程中，会有如下提示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test.jpg&quot; alt=&quot;SublimeLinter-csslint-test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击提示点后，Sublime 状态栏也会有相应的说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/SublimeLinter-csslint-test2.jpg&quot; alt=&quot;SublimeLinter-csslint-test2&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Teach Girlfriend to make a Web Pages like Zhihu</title>
   <link href="http://127.0.0.1/bootstrap/2015/03/21/teach-girlfriend-html-css/"/>
   <updated>2015-03-21T23:14:54+08:00</updated>
   <id>http://127.0.0.1/bootstrap/2015/03/21/teach-girlfriend-html-css</id>
   <content type="html">
&lt;p&gt;My girlfriend is learning html and css recently. I told her to follow the video. Here, I recommend a video in Chinese that suite for fresh learners. The name of course is Getting HTML web pages dev in 8 hours ( 8小时学会HTML网页开发 ) . I watched this video at very first time. The teacher named Eighteen Swallows ( 燕十八 ) . He teached very clear even himself being on screen to show what is float or box-model.&lt;/p&gt;

&lt;!-- ![燕十八](http://7q5cdt.com1.z0.glb.clouddn.com/teach-girlfriend-html-18swallows.png) --&gt;

&lt;p&gt;Here is the site of the free online video.
&lt;a href=&quot;http://study.163.com/course/courseMain.htm?courseId=432008&quot;&gt;http://study.163.com/course/courseMain.htm?courseId=432008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did the detailed note about this course. You can read here: &lt;a href=&quot;http://wenku.baidu.com/view/aa136099f90f76c660371a35&quot;&gt;http://wenku.baidu.com/view/aa136099f90f76c660371a35&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I’ll tell something happend today. She has watched the video above, and knows a little on BootStrap. So she wants to do some pages with BootStrap.&lt;/p&gt;

&lt;p&gt;We determined to copy the pages on &lt;a href=&quot;http://zhihu.com&quot;&gt;Zhihu&lt;/a&gt; &lt;br /&gt;
Like this: &lt;br /&gt;
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/teach-girlfriend-html-zhihu.jpg&quot; alt=&quot;知乎zhihu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I teached her &lt;a href=&quot;http://www.bootcss.com/&quot;&gt;Boostrap&lt;/a&gt; this afternoon. She has already got to read the docs and can code simple statics pages.&lt;/p&gt;

&lt;p&gt;She seems to enjoy Web Pages Design. Though she used to be a Graphic Designer. And now, she really works hard.&lt;/p&gt;

&lt;p&gt;At last I’ll show the works that we did together in 2 hours. It’s unfinished. I guess she will do it later. It’s a nice weekend, isn’t it?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/test/bootstrap-zhihu/&quot;&gt;to see Copy Zhihu, click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;screenshot of copy Zhihu:
&lt;img src=&quot;http://7q5cdt.com1.z0.glb.clouddn.com/teach-girlfriend-html-CopyZhihu.jpg&quot; alt=&quot;Copy Zhihu&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PowerDisigner15.1安装教程</title>
   <link href="http://127.0.0.1/software/2015/03/01/powerdisigner-15-1/"/>
   <updated>2015-03-01T00:00:00+08:00</updated>
   <id>http://127.0.0.1/software/2015/03/01/PowerDisigner 15.1</id>
   <content type="html">&lt;hr /&gt;

&lt;!-- more --&gt;

&lt;p&gt;1.运行 PowerDesigner 15.1 安装包：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_1.jpg&quot; alt=&quot;PowerDisigner_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.运行安装包后出现下图并选择红圈中的Next&amp;gt; ：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_2.jpg&quot; alt=&quot;PowerDisigner_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.点击 Next&amp;gt; 后出现如下界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_3.jpg&quot; alt=&quot;PowerDisigner_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;PS：红圈1选择安装的地区，这里选择的是 Hong Kong(中国香港)&lt;/p&gt;

&lt;p&gt;红圈2选择I AGREE(我同意)条约&lt;/p&gt;

&lt;p&gt;点击红圈3的Next&amp;gt; (下一步)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;4.点击 Next&amp;gt; 后出现如下界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_4.jpg&quot; alt=&quot;PowerDisigner_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;PS：红圈1是选择安装的路径，这里选择安装在了D盘下&lt;/p&gt;

&lt;p&gt;点击红圈2的 Next&amp;gt; (下一步)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;5.点击 Next&amp;gt; 后出现如下界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_5.jpg&quot; alt=&quot;PowerDisigner_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;PS：选择需要安装的组件，我这里选择的系统默认的组件。&lt;/p&gt;

&lt;p&gt;单击红圈中的 Next&amp;gt; (下一步)&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;6.点击 Next&amp;gt; 后出现如下界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_6.jpg&quot; alt=&quot;PowerDisigner_6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;PS：选择需要安装的用户配置文件，这里我选择了全部安装&lt;/p&gt;

&lt;p&gt;单击红圈中的 Next&amp;gt; (下一步)，，从这里开始后就可以一直点击下一步。直接依次上图&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_6.jpg&quot; alt=&quot;PowerDisigner_7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_6.jpg&quot; alt=&quot;PowerDisigner_8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_6.jpg&quot; alt=&quot;PowerDisigner_9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;PS：等待安装完成。很快便安装好了。&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/res/img/blog/Software/PowerDisigner_6.jpg&quot; alt=&quot;PowerDisigner_9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;PS：完成安装，点击红圈中的 Finish 退出安装。&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git操作手册|命令速查表</title>
   <link href="http://127.0.0.1/php/2015/02/20/create-github/"/>
   <updated>2015-02-20T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2015/02/20/create github</id>
   <content type="html">&lt;hr /&gt;

&lt;!-- more --&gt;

&lt;p&gt;这篇文章主要介绍Git分布式版本管理与集中式管理的一些差异，总结下Git常用命令作为日后的速查表，最后介绍Git进阶的一些案例。
本文分为以下几个部分：
1. Git与SVN差异
2. Git常用命令
3. Git进阶指南&lt;/p&gt;

&lt;h2 id=&quot;gitsvn&quot;&gt;Git与SVN差异&lt;/h2&gt;

&lt;p&gt;Git的第一个版本是Linux之父Linus Torvalds亲手操刀设计和实现的,Git 基于 DAG 结构 (Directed Acyclic Graph)，其运行起来相当的快,它已经是现在的主流。&lt;/p&gt;

&lt;p&gt;Git 和 SVN 思想最大的差别有四个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;去中心化&lt;/li&gt;
  &lt;li&gt;直接记录快照，而非差异&lt;/li&gt;
  &lt;li&gt;不一样的分支概念&lt;/li&gt;
  &lt;li&gt;三个文件状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;去中心化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git是一个DVCS（分布式版本管理系统），在技术层面上并不存在一个像中心仓库这样的东西 ， 所有的数据都在本地，不存在谁是中心&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/git.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中每个开发者拉取(pull)并推送(push)到origin。但除了这种集中式的推送拉取关系，每个开发者也可能会从其他的开发者处拉取代码的变更，从技术上讲，这意味着Alice定义了一个名为bob的Git的remote，它指向了Bob的软件仓库。反之亦然。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;直接记录快照，而非差异&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git每一个版本都是直接记录快照，而非文件的差异。 下面两个对比图在网上是广为流传大家应该熟悉：&lt;/p&gt;

&lt;p&gt;SVN：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/svn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/gitgit.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git使用SHA-1算法计算数据的校验和，通过文件的内容或目录计算出SHA-1哈希值，作为指纹字符串，每个Version 都是一个快照。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不一样的分支概念&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git的分支本质是一个指向提交快照的指针，是从某个提交快照往回看的历史。当创建/切换分支的时候，只是变换了指针指向而已.而SVN创建一个分支， 是的的确确的复制了一份文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三个文件状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在Git中文件有三种状态：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;已提交（committed）：该文件被安全地保存在了本地数据库&lt;/li&gt;
  &lt;li&gt;已修改（modified）：修改了某个文件，但还没有保存&lt;/li&gt;
  &lt;li&gt;已暂存（staged）：把已修改的文件放下下次保存的清单中&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git&quot;&gt;Git常用命令&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;创建&lt;/h3&gt;

&lt;p&gt;复制一个已创建的仓库:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone ssh://user@domain.com/repo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个新的本地仓库:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;本地修改&lt;/h3&gt;

&lt;p&gt;显示工作路径下已修改的文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示与上次提交版本文件的不同：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把当前所有修改添加到下次提交中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把对某个文件的修改添加到下次提交中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交本地的所有修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交之前已标记的变化：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;附加消息提交：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &#39;message here&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交，并将提交时间设置为之前的某个日期:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit --date=&quot;`date --date=&#39;n day ago&#39;`&quot; -am &quot;Commit Message&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;修改上次提交&lt;/h3&gt;

&lt;p&gt;请勿修改已发布的提交记录!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把当前分支中未提交的修改移动到其他分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash
git checkout branch2
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;搜索&lt;/h3&gt;

&lt;p&gt;从当前目录的所有文件中查找文本内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git grep &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在某一版本中搜索文本：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git grep &quot;Hello&quot; v2.5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-4&quot;&gt;提交历史&lt;/h3&gt;

&lt;p&gt;从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示所有提交（仅显示提交的hash和message）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示某个用户的所有提交：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log --author=&quot;username&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示某个文件的所有修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;谁，在什么时间，修改了文件的什么内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-5&quot;&gt;分支与标签&lt;/h3&gt;

&lt;p&gt;列出所有的分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;切换分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建并切换到新分支:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基于当前分支创建新分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch &amp;lt;new-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基于远程分支创建新的可追溯的分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch --track &amp;lt;new-branch&amp;gt; &amp;lt;remote-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除本地分支:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch -d &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给当前版本打标签：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git tag &amp;lt;tag-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-6&quot;&gt;更新与发布&lt;/h3&gt;

&lt;p&gt;列出当前配置的远程端：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示远程端的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote show &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加新的远程端：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载远程端版本，但不合并到HEAD中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git fetch &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载远程端版本，并自动与HEAD版本合并：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote pull &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将远程端版本合并到本地版本中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git pull origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将本地版本发布到远程端：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push remote &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除远程端分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push &amp;lt;remote&amp;gt; :&amp;lt;branch&amp;gt; (since Git v1.5.0)
或
git push &amp;lt;remote&amp;gt; --delete &amp;lt;branch&amp;gt; (since Git v1.7.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发布标签:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-7&quot;&gt;合并与重置&lt;/h3&gt;

&lt;p&gt;将分支合并到当前HEAD中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将当前HEAD版本重置到分支中:
请勿重置已发布的提交!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;退出重置:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase --abort
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决冲突后继续重置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用配置好的merge tool 解决冲突：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git mergetool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在编辑器中手动解决冲突后，标记文件为已解决冲突&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add &amp;lt;resolved-file&amp;gt;
$ git rm &amp;lt;resolved-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-8&quot;&gt;撤销&lt;/h3&gt;

&lt;p&gt;放弃工作目录下的所有修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除缓存区的所有文件（i.e. 撤销上次git add）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;放弃某个文件的所有本地修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout HEAD &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重置一个提交（通过创建一个截然不同的新提交）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git revert &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --hard &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将HEAD重置到上一次提交的版本，并保留未提交的本地修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --keep &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;git-1&quot;&gt;Git进阶指南&lt;/h2&gt;

&lt;h3 id=&quot;origin-&quot;&gt;问：如何修改 origin 仓库信息？&lt;/h3&gt;

&lt;h4 id=&quot;origin--1&quot;&gt;1、添加 origin 仓库信息&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin &amp;lt;git仓库地址&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;origin--2&quot;&gt;2、查看 origin 仓库信息&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# 以下三种方式均可
git config get --remote.origin.url
git remote -v
git remote show origin
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;origin--3&quot;&gt;3、删除 origin 仓库信息&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt; git remote rm origin
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;git-ssh-keys-&quot;&gt;问：如何配置 git ssh keys ？&lt;/h3&gt;

&lt;p&gt;在本地生成 ssh 私钥 / 公钥 文件
将「公钥」添加到 git 服务（github、gitlab、coding.net 等）网站后台
测试 git ssh 连接是否成功
接下来以添加 github ssh keys 为例，请注意替换 github 文件名。&lt;/p&gt;

&lt;p&gt;注：如果对密钥机制不熟悉，建议不要指定 -f 参数，直接使用默认的 id_rsa 文件名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 运行以下命令，一直回车，文件名可随意指定
ssh-keygen -t rsa -b 4096 -C &quot;kaiye@macbook&quot; -f ~/.ssh/github

# 如果不是默认密钥 id_rsa ，则需要以下命令注册密钥文件，-K 参数将密钥存入 Mac Keychain
ssh-add -K ~/.ssh/github

# 将 pub 公钥的内容粘贴到线上网站的后台
cat ~/.ssh/github.pub

# 测试 git ssh 是否连接成功
ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-9&quot;&gt;问：如何撤销修改？&lt;/h3&gt;

&lt;p&gt;修改包含四种情况，需单独区分。&lt;/p&gt;

&lt;h4 id=&quot;section-10&quot;&gt;1、新建的文件和目录，且从未提交至版本库&lt;/h4&gt;

&lt;p&gt;此类文件的状态为 Untracked files ，撤销方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clean -fd .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，. 表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径，以下其他情况类似。&lt;/p&gt;

&lt;h4 id=&quot;git-add&quot;&gt;2、提交过版本库，但未提交至暂存区的文件（未执行 git add）&lt;/h4&gt;

&lt;p&gt;此类文件的状态为&lt;code&gt; Changes not staged for commit&lt;/code&gt;，撤销方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; git checkout .
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-11&quot;&gt;3、已提交至暂存区的文件&lt;/h4&gt;

&lt;p&gt;此类文件的状态为 Changes to be committed，撤销方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行之后文件将会回到以上的 1 或者 2 状态，可继续按以上步骤执行撤销，若 git reset 同时加上 –hard 参数，将会把修改过的文件也还原成版本库中的版本。&lt;/p&gt;

&lt;h4 id=&quot;git-commit&quot;&gt;4、已提交至版本库（执行了 git commit）&lt;/h4&gt;

&lt;p&gt;每次提交都会生成一个 hash 版本号，通过以下命令可查阅版本号并将其回滚：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log
git reset &amp;lt;版本号&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果需要「回滚至上一次提交」，可直接使用以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset head~1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行之后，再按照 1 或者 2 状态进行处理即可，如果回滚之后的代码同时需要提交至 origin 仓库（即回滚 origin 线上仓库的代码），需要使用 -f 强制提交参数，且当前用户需要具备「强制提交的权限」。&lt;/p&gt;

&lt;h4 id=&quot;section-12&quot;&gt;5、如果回滚了之后又不想回滚了怎么办？&lt;/h4&gt;

&lt;p&gt;如果是以上的情况 1 或者 2，只能歇屁了，因为修改没入过版本库，无法回滚。&lt;/p&gt;

&lt;p&gt;如果是情况 4，回滚之后通过 git log 将看不到回滚之前的版本号，但可通过 git reflog 命令（所有使用过的版本号）找到回滚之前的版本号，然后 git reset &lt;版本号&gt; 。&lt;/版本号&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;问：遇到冲突了怎么解决？&lt;/h3&gt;

&lt;p&gt;两个分支进行合并时（通常是 git pull 时），可能会遇到冲突，同时被修改的文件会进入 Unmerged 状态，需要解决冲突。&lt;/p&gt;

&lt;h4 id=&quot;section-14&quot;&gt;1、最快的办法&lt;/h4&gt;

&lt;p&gt;大部分时候，「最快解决冲突」的办法是：使用当前 HEAD 的版本（ours），或使用合并进来的分支版本（theirs）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 使用当前分支 HEAD 版本，通常是冲突源文件的 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; 标记部分，======= 的上方
git checkout --ours &amp;lt;文件名&amp;gt;

 # 使用合并分支版本，通常是源冲突文件的 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 标记部分
 git checkout --theirs &amp;lt;文件名&amp;gt;

# 标记为解决状态加入暂存区
git add &amp;lt;文件名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-15&quot;&gt;2、最通用的办法&lt;/h4&gt;

&lt;p&gt;用编辑器打开冲突的源文件进行修改，可能会发生遗留，且体验不好，通常需要借助 git mergetool 命令。&lt;/p&gt;

&lt;p&gt;在 Mac 系统下，运行 git mergetool &lt;文件名&gt; 可以开启配置的第三方工具进行 merge，默认的是 FileMerge 应用程序，还可以配置成 Meld 或 kdiff3，体验更佳。&lt;/文件名&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-16&quot;&gt;3、最好的习惯&lt;/h4&gt;

&lt;p&gt;有三个好的习惯，可以减少代码的冲突：
 在开始修改代码前先 git pull 一下；
  将业务代码进行划分，尽量不要多个人在同一时间段修改同一文件；
  通过Gitflow 工作流也可以提升 git流程效率，减少发生冲突的可能性。&lt;/p&gt;

&lt;h4 id=&quot;section-17&quot;&gt;4、最复杂的情况&lt;/h4&gt;

&lt;p&gt;如果你的项目周期比较长，还应该养成「定期 rebase 的习惯」，git pull –rebase 可以让分支的代码和 origin 仓库的代码保持兼容，同时还不会破坏线上代码的可靠性。&lt;/p&gt;

&lt;p&gt;它的大概原理是，先将 origin 仓库的代码按 origin 的时间流在本地分支中提交，再将本地分支的修改记录追加到 origin 分支上。如果发生冲突，则可以即时的发现问题并解决，否则到项目上线时再解决冲突，可能会发生额外的风险。&lt;/p&gt;

&lt;p&gt;rebase 大概的操作步骤如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 将当前分支的版本追加到从远程 pull 回来的节点之后
git pull --rebase

# 若发生冲突，则按以上其他方法进行解决，解决后继续
git rebase --continue

# 直到所有冲突得以解决，待项目最后上线前再执行
git push origin

# 若多次提交修改了同一文件，可能需要直接跳过后续提交，按提示操作即可
git rebase --skip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;pull--merge-&quot;&gt;问：如何在不提交修改的前提下，执行 pull / merge 等操作？&lt;/h3&gt;

&lt;p&gt;有些修改没有完全完成之前，可能不需要提交到版本库，圡方法是将修改的文件 copy 到 git 仓库之外的目录临时存放，pull / merge 操作完成之后，再 copy 回来。&lt;/p&gt;

&lt;p&gt;这样的做法一个是效率不高，另外一个可能会遗漏潜在的冲突。此类需求最好是通过 git stash 命令来完成，它可以将当前工作状态（WIP，work in progress）临时存放在 stash 队列中，待操作完成后再从 stash 队列中重新应用这些修改。&lt;/p&gt;

&lt;p&gt;以下是 git stash 常用命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 查看 stash 队列中已暂存了多少 WIP
git stash list

# 恢复上一次的 WIP 状态，并从队列中移除
git stash pop

# 添加当前 WIP，注意：未提交到版本库的文件会自动忽略，只要不运行 git clean -fd . 就不会丢失
git stash

# 恢复指定编号的 WIP，同时从队列中移除
git stash pop stash@{num}

# 恢复指定编号的 WIP，但不从队列中移除
git stash apply stash@{num}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;git-log-&quot;&gt;问：如何在 git log 中查看修改的文件列表？&lt;/h3&gt;

&lt;p&gt;默认的 git log 会显示较全的信息，且不包含文件列表。使用 –name-status 可以看到修改的文件列表，使用 –oneline 可以将参数简化成一行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log --name-status --oneline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每次手动加上参数很麻烦，可以通过自定义快捷命令的方式来简化操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.ls &#39;log --name-status --oneline --graph&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行以上配置后，可通过 git ls 命令来实现「自定义 git log」效果，通过该方法也可以创建 git st 、 git ci 等一系列命令，以便沿用 svn 命令行习惯。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global alias.st &#39;status --porcelain&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多 git log 参数，可通过 git help log 查看手册。&lt;/p&gt;

&lt;p&gt;如果是看上一次提交的版本日志，直接运行 git show 即可。&lt;/p&gt;

&lt;p&gt;此外，如果你的 Mac 安装了zsh（参考《全新Mac安装指南（编程篇），那么可以直接使用 gst、glog 等一系列快捷命令，详情见此列表：Plugin:git 。&lt;/p&gt;

&lt;h3 id=&quot;git-submodule-update-&quot;&gt;问：git submodule update 时出错怎么解决？&lt;/h3&gt;

&lt;p&gt;例如，在执行 git submodule update 时有以下错误信息：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fatal: reference is not a tree: f869da471c5d8a185cd110bbe4842d6757b002f5
Unable to checkout ‘f869da471c5d8a185cd110bbe4842d6757b002f5’ in submodule path ‘source/i18n-php-server’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在此例中，发生以上错误是因为 i18n-php-server 子仓库在某电脑 A 的「本地」commit 了新的版本 「f869da471c5d8a185cd110bbe4842d6757b002f5」，且该次 commit 未 push origin。但其父级仓库 i18n-www 中引用了该子仓库的版本号，且将引用记录 push origin，导致其他客户机无法 update 。&lt;/p&gt;

&lt;p&gt;解决方法，在电脑 A 上将 i18n-php-server 版本库 push origin 后，在其他客户机上执行 git submodule update 。或者用以上提到的 git reset 方法，将子仓库的引用版本号还原成 origin 上存在的最新版本号。&lt;/p&gt;

&lt;h3 id=&quot;section-18&quot;&gt;其他问题&lt;/h3&gt;

&lt;p&gt;设置本地分支与远程分支保持同步，在第一次 git push 的时候带上 -u 参数即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master -u 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;支持中文目录与文件名的显示（git 默认将非 ASCII 编码的目录与文件名以八进制编码展示）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config core.quotepath off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用的打 tag 操作，更多请查看《Git 基础 - 打标签》&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 列出所有本地 tag
git tag   

# 本地新增一个 tag，推送至 origin 服务器
git tag -a v1.0.0 -m &#39;tag description&#39;
git push origin v1.0.0

# 删除本地与 origin tag
git tag -d v1.0.0
git push origin --delete v1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 git GUI 客户端（如，SoureTree、Github Desktop）能极大的提升分支管理效率。分支合并操作通常只有两种情况：从 origin merge 到本地，使用 git pull 即可；从另外一个本地分支 merge 到当前分支，使用 git merge &lt;分支名&gt;，以下是常用命令：&lt;/分支名&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 新建分支 branch1，并切换过去
git checkout -b branch1

# 查看所有本地与远程分支
git branch -a

# 修改完成后，切换回 master 分支，将 branch1 分支合并进来
git checkout master
git merge branch1

# 删除已完成合并的分支 branch1
git branch -d branch1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-19&quot;&gt;参考资料&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Pro Git 简体中文版&lt;/li&gt;
  &lt;li&gt;Git权威指南&lt;/li&gt;
  &lt;li&gt;命令行man手册&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll 搭建静态博客</title>
   <link href="http://127.0.0.1/jekyll/2015/02/16/jekyll/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/jekyll/2015/02/16/jekyll</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;搭建过程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ruby&quot; id=&quot;markdown-toc-ruby&quot;&gt;安装Ruby&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygems&quot; id=&quot;markdown-toc-rubygems&quot;&gt;安装RubyGems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygemsjekyll&quot; id=&quot;markdown-toc-rubygemsjekyll&quot;&gt;用RubyGems安装Jekyll&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;创建博客&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;后续&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;可能出现的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hitimeshitimes-loaderror&quot; id=&quot;markdown-toc-hitimeshitimes-loaderror&quot;&gt;&lt;code&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;序&lt;/h2&gt;

&lt;p&gt;一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教研室的网络很坑爹，所以也一直没顾得上。之前用过 WordPress 托管在免费的京东云擎上，但是速度太慢。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;搭建过程&lt;/h2&gt;

&lt;p&gt;在jekyll的官网上 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;http://jekyllrb.com/&lt;/a&gt; 其实已经说得比较明白了，我在这里还是简单的说一下吧。我用的是Windows系统。  &lt;br /&gt;
主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ruby&quot;&gt;安装Ruby&lt;/h3&gt;

&lt;p&gt;ruby官网下载安装：&lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;https://www.ruby-lang.org/en/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装完成后配置环境变量&lt;/p&gt;

&lt;p&gt;在命令提示符中，得到ruby版本号，如下图，即安装成功
&lt;img src=&quot;/css/pics/ruby-v.png&quot; alt=&quot;ruby-v&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rubygems&quot;&gt;安装RubyGems&lt;/h3&gt;

&lt;p&gt;官网下载 &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;http://rubygems.org/pages/download&lt;/a&gt; rubygems-2.4.5.zip&lt;/p&gt;

&lt;p&gt;cd到RubyGems目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/ruby-gems.png&quot; alt=&quot;ruby-gems&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/ruby-gems-setup.png&quot; alt=&quot;ruby-gems-setup&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rubygemsjekyll&quot;&gt;用RubyGems安装Jekyll&lt;/h3&gt;

&lt;p&gt;执行下面的语句安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyll-setup.png&quot; alt=&quot;jekyll-setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装结束画面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyll-setup-finish.png&quot; alt=&quot;jekyll-setup-finish&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;创建博客&lt;/h3&gt;

&lt;p&gt;在d盘新建一个工作区jekyllWorkspace&lt;/p&gt;

&lt;p&gt;cd到jekyllWorkspace&lt;/p&gt;

&lt;p&gt;执行jekyll new name创建新的工作区&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyllWorkSpace.png&quot; alt=&quot;jekyllWorkSpace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文件结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/jekyllFiles.png&quot; alt=&quot;jekyllFiles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cd到博客文件夹，开启服务器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/serve.png&quot; alt=&quot;serve&quot; /&gt;&lt;/p&gt;

&lt;p&gt;watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll&lt;/p&gt;

&lt;p&gt;我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/yajl.png&quot; alt=&quot;yajl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次启动服务器成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/serve-sucess.png&quot; alt=&quot;serve-sucess&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问 http://localhost:4000/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/browser.png&quot; alt=&quot;browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;详细文章页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/css/pics/browser2.png&quot; alt=&quot;browser2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;后续&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。&lt;a href=&quot;http://jekyllcn.com&quot;&gt;jekyll中文网 http://jekyllcn.com&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll英文网 http://jekyllrb.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jekyll中的css是用sass写的，当然直接在&lt;code&gt;_sass/_layout.scss&lt;/code&gt;中添加css也是可以的。&lt;/li&gt;
  &lt;li&gt;本文是用Markdown格式来写的，相关语法可参考： &lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;按照本文的说明搭建完博客后，用&lt;code&gt;github Pages&lt;/code&gt;托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为&lt;code&gt;highlighter: pygments&lt;/code&gt;就可以了&lt;/li&gt;
  &lt;li&gt;博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问&lt;a href=&quot;http://duoshuo.com/&quot;&gt;多说官网 http://duoshuo.com/&lt;/a&gt;，当然也可以使用&lt;a href=&quot;http://changyan.sohu.com/&quot;&gt;搜狐畅言 http://changyan.sohu.com/&lt;/a&gt;作为评论系统。&lt;/li&gt;
  &lt;li&gt;也可以绑定自己的域名，如果没有域名，可以在&lt;a href=&quot;http://www.godaddy.com/&quot;&gt;godaddy http://www.godaddy.com/&lt;/a&gt;上将域名放入购物车等待降价，买之。&lt;/li&gt;
  &lt;li&gt;祝各位新年快乐！&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;可能出现的问题&lt;/h2&gt;

&lt;h3 id=&quot;hitimeshitimes-loaderror&quot;&gt;&lt;code&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;错误代码：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;C:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在stackoverflow上又一个很好的解决方法。&lt;a href=&quot;http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1&quot;&gt;hitimes require error when running jekyll serve on windows 8.1&lt;/a&gt; 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。&lt;/p&gt;

  &lt;p&gt;所以卸载 hitimes 并通过 &lt;code&gt;--platform ruby&lt;/code&gt; 重装即可。代码如下：&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;gem uni hitimes
**Remove ALL versions**
gem ins hitimes -v 1.2.1 --platform ruby
&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;然后将自动重新编译 hitimes 并适用于 Ruby 2.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我自己的卸载和安装过程：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem uni hitimes

You have requested to uninstall the gem:
        hitimes-1.2.2-x86-mingw32

timers-4.0.1 depends on hitimes (&amp;gt;= 0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  y
Successfully uninstalled hitimes-1.2.2-x86-mingw32

E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem ins hitimes -v 1.2.1 --platform ruby
Fetching: hitimes-1.2.1.gem (100%)
Temporarily enhancing PATH to include DevKit...
Building native extensions.  This could take a while...
Successfully installed hitimes-1.2.1
Parsing documentation for hitimes-1.2.1
Installing ri documentation for hitimes-1.2.1
Done installing documentation for hitimes after 1 seconds
1 gem installed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于，&lt;a href=&quot;https://rubygems.org/gems/hitimes/versions/1.2.2&quot;&gt;hitimes&lt;/a&gt; 是一个快速的高效的定时器解决方案库，详情可以去官网查看。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll 搭建静态博客</title>
   <link href="http://127.0.0.1/jekyll/2015/02/16/create-my-blog-with-jekyll/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/jekyll/2015/02/16/create-my-blog-with-jekyll</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;搭建过程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ruby&quot; id=&quot;markdown-toc-ruby&quot;&gt;安装Ruby&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygems&quot; id=&quot;markdown-toc-rubygems&quot;&gt;安装RubyGems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygemsjekyll&quot; id=&quot;markdown-toc-rubygemsjekyll&quot;&gt;用RubyGems安装Jekyll&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;创建博客&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;后续&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;可能出现的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hitimeshitimes-loaderror&quot; id=&quot;markdown-toc-hitimeshitimes-loaderror&quot;&gt;&lt;code&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教研室的网络很坑爹，所以也一直没顾得上。之前用过 WordPress 托管在免费的京东云擎上，但是速度太慢。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;搭建过程&lt;/h2&gt;

&lt;p&gt;在jekyll的官网上 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;http://jekyllrb.com/&lt;/a&gt; 其实已经说得比较明白了，我在这里还是简单的说一下吧。我用的是Windows系统。  &lt;br /&gt;
主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;安装Ruby&lt;/h3&gt;

&lt;p&gt;ruby官网下载安装：&lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;https://www.ruby-lang.org/en/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安装完成后配置环境变量&lt;/p&gt;

&lt;p&gt;在命令提示符中，得到ruby版本号，如下图，即安装成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue0e393vj20cu00t748.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubygems&quot;&gt;安装RubyGems&lt;/h3&gt;

&lt;p&gt;官网下载 &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;http://rubygems.org/pages/download&lt;/a&gt; rubygems-2.4.5.zip&lt;/p&gt;

&lt;p&gt;cd到RubyGems目录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue1l2yscj20gk02amxj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue1w8eqnj20bx00hglg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubygemsjekyll&quot;&gt;用RubyGems安装Jekyll&lt;/h3&gt;

&lt;p&gt;执行下面的语句安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue2g2p3uj207x00ft8j.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装结束画面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue32drwhj20hv09xq5m.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;创建博客&lt;/h3&gt;

&lt;p&gt;在d盘新建一个工作区jekyllWorkspace&lt;/p&gt;

&lt;p&gt;cd到jekyllWorkspace&lt;/p&gt;

&lt;p&gt;执行jekyll new name创建新的工作区&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7011d6cfjw1f2ue3lt31nj20cj02nt8u.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文件结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue3ujsybj20ek06wabh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cd到博客文件夹，开启服务器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue47y9lgj20ao00f0sl.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll&lt;/p&gt;

&lt;p&gt;我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue4nelnxj20dd077q49.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再次启动服务器成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/7011d6cfjw1f2ue4v42koj20g505bdgy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问 http://localhost:4000/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f2ue56ckwoj20je0eumz3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;详细文章页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/7011d6cfjw1f2ue5f3j9cj20je0gyq7a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;后续&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。&lt;a href=&quot;http://jekyllcn.com&quot;&gt;jekyll中文网 http://jekyllcn.com&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll英文网 http://jekyllrb.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jekyll中的css是用sass写的，当然直接在&lt;code&gt;_sass/_layout.scss&lt;/code&gt;中添加css也是可以的。&lt;/li&gt;
  &lt;li&gt;本文是用Markdown格式来写的，相关语法可参考： &lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;按照本文的说明搭建完博客后，用&lt;code&gt;github Pages&lt;/code&gt;托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为&lt;code&gt;highlighter: pygments&lt;/code&gt;就可以了&lt;/li&gt;
  &lt;li&gt;博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问&lt;a href=&quot;http://duoshuo.com/&quot;&gt;多说官网 http://duoshuo.com/&lt;/a&gt;，当然也可以使用&lt;a href=&quot;http://changyan.sohu.com/&quot;&gt;搜狐畅言 http://changyan.sohu.com/&lt;/a&gt;作为评论系统。&lt;/li&gt;
  &lt;li&gt;也可以绑定自己的域名，如果没有域名，可以在&lt;a href=&quot;http://www.godaddy.com/&quot;&gt;godaddy http://www.godaddy.com/&lt;/a&gt;上将域名放入购物车等待降价，买之。&lt;/li&gt;
  &lt;li&gt;祝各位新年快乐！&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;可能出现的问题&lt;/h2&gt;

&lt;h3 id=&quot;hitimeshitimes-loaderror&quot;&gt;&lt;code&gt;hitimes/hitimes (LoadError)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;错误代码：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
C:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39;: cannot load such file -- hitimes/hitimes (LoadError)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在stackoverflow上又一个很好的解决方法。&lt;a href=&quot;http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1&quot;&gt;hitimes require error when running jekyll serve on windows 8.1&lt;/a&gt; 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。&lt;/p&gt;

  &lt;p&gt;所以卸载 hitimes 并通过 &lt;code&gt;--platform ruby&lt;/code&gt; 重装即可。代码如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;
gem uni hitimes
**Remove ALL versions**
gem ins hitimes -v 1.2.1 --platform ruby
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;然后将自动重新编译 hitimes 并适用于 Ruby 2.2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是我自己的卸载和安装过程：&lt;/p&gt;

&lt;p&gt;```
E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem uni hitimes&lt;/p&gt;

&lt;p&gt;You have requested to uninstall the gem:
        hitimes-1.2.2-x86-mingw32&lt;/p&gt;

&lt;p&gt;timers-4.0.1 depends on hitimes (&amp;gt;= 0)
If you remove this gem, these dependencies will not be met.
Continue with Uninstall? [yN]  y
Successfully uninstalled hitimes-1.2.2-x86-mingw32&lt;/p&gt;

&lt;p&gt;E:\GitWorkSpace\gaohaoyang.github.io&amp;gt;gem ins hitimes -v 1.2.1 –platform ruby
Fetching: hitimes-1.2.1.gem (100%)
Temporarily enhancing PATH to include DevKit…
Building native extensions.  This could take a while…
Successfully installed hitimes-1.2.1
Parsing documentation for hitimes-1.2.1
Installing ri documentation for hitimes-1.2.1
Done installing documentation for hitimes after 1 seconds
1 gem installed
```&lt;/p&gt;

&lt;p&gt;关于，&lt;a href=&quot;https://rubygems.org/gems/hitimes/versions/1.2.2&quot;&gt;hitimes&lt;/a&gt; 是一个快速的高效的定时器解决方案库，详情可以去官网查看。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PSR1代码规范2</title>
   <link href="http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr2/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr2</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;代码风格指南&lt;/h1&gt;

&lt;p&gt;本手册是基础代码规范(&lt;a href=&quot;https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-1-basic-coding-standard.md&quot;&gt;PSR-1&lt;/a&gt;)的继承和扩展。&lt;/p&gt;

&lt;p&gt;为了尽可能的提升阅读其他人代码时的效率，下面例举了一系列的通用规则，特别是有关于PHP代码风格的。&lt;/p&gt;

&lt;p&gt;各个成员项目间的共性组成了这组代码规范。当开发者们在多个项目中合作时，本指南将会成为所有这些项目中共用的一组代码规范。 因此，本指南的益处不在于这些规则本身，而在于在所有项目中共用这些规则。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2119.txt&quot;&gt;RFC 2119&lt;/a&gt;中的&lt;code&gt;必须(MUST)&lt;/code&gt;，&lt;code&gt;不可(MUST NOT)&lt;/code&gt;，&lt;code&gt;建议(SHOULD)&lt;/code&gt;，&lt;code&gt;不建议(SHOULD NOT)&lt;/code&gt;，&lt;code&gt;可以/可能(MAY)&lt;/code&gt;等关键词将在本节用来做一些解释性的描述。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-1&quot;&gt;概述&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码&lt;code&gt;必须&lt;/code&gt;遵守 &lt;a href=&quot;https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-1-basic-coding-standard.md&quot;&gt;PSR-1&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码&lt;code&gt;必须&lt;/code&gt;使用4个空格来进行缩进，而不是用制表符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一行代码的长度&lt;code&gt;不建议&lt;/code&gt;有硬限制；软限制&lt;code&gt;必须&lt;/code&gt;为120个字符，&lt;code&gt;建议&lt;/code&gt;每行代码80个字符或者更少。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code&gt;命名空间(namespace)&lt;/code&gt;的声明下面&lt;code&gt;必须&lt;/code&gt;有一行空行，并且在&lt;code&gt;导入(use)&lt;/code&gt;的声明下面也&lt;code&gt;必须&lt;/code&gt;有一行空行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;类(class)&lt;/code&gt;的左花括号&lt;code&gt;必须&lt;/code&gt;放到其声明下面自成一行，右花括号则&lt;code&gt;必须&lt;/code&gt;放到类主体下面自成一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;方法(method)&lt;/code&gt;的左花括号&lt;code&gt;必须&lt;/code&gt;放到其声明下面自成一行，右花括号则&lt;code&gt;必须&lt;/code&gt;放到方法主体的下一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有的&lt;code&gt;属性(property)&lt;/code&gt;和&lt;code&gt;方法(method)&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;有可见性声明；&lt;code&gt;抽象(abstract)&lt;/code&gt;和&lt;code&gt;终结(final)&lt;/code&gt;声明&lt;code&gt;必须&lt;/code&gt;在可见性声明之前；而&lt;code&gt;静态(static)&lt;/code&gt;声明&lt;code&gt;必须&lt;/code&gt;在可见性声明之后。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在控制结构关键字的后面&lt;code&gt;必须&lt;/code&gt;有一个空格；而&lt;code&gt;方法(method)&lt;/code&gt;和&lt;code&gt;函数(function)&lt;/code&gt;的关键字的后面&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;控制结构的左花括号&lt;code&gt;必须&lt;/code&gt;跟其放在同一行，右花括号&lt;code&gt;必须&lt;/code&gt;放在该控制结构代码主体的下一行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;控制结构的左括号之后&lt;code&gt;不可&lt;/code&gt;有空格，右括号之前也&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.1. 示例&lt;/h3&gt;

&lt;p&gt;这个示例中简单展示了上文中提到的一些规则：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;use FooInterface;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;&lt;/p&gt;

&lt;p&gt;class Foo extends Bar implements FooInterface
{
    public function sampleFunction($a, $b = null)
    {
        if ($a === $b) {
            bar();
        } elseif ($a &amp;gt; $b) {
            $foo-&amp;gt;bar($arg1);
        } else {
            BazClass::bar($arg2, $arg3);
        }
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;final public static function bar()
{
    // 方法主体
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-3&quot;&gt;通则&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2.1 基础代码规范&lt;/h3&gt;

&lt;p&gt;代码&lt;code&gt;必须&lt;/code&gt;遵守 &lt;a href=&quot;https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-1-basic-coding-standard.md&quot;&gt;PSR-1&lt;/a&gt; 中的所有规则。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2.2 源文件&lt;/h3&gt;

&lt;p&gt;所有的PHP源文件&lt;code&gt;必须&lt;/code&gt;使用Unix LF(换行)作为行结束符。&lt;/p&gt;

&lt;p&gt;所有PHP源文件&lt;code&gt;必须&lt;/code&gt;以一个空行结束。&lt;/p&gt;

&lt;p&gt;纯PHP代码源文件的关闭标签&lt;code&gt;?&amp;gt;&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;省略。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2.3. 行&lt;/h3&gt;

&lt;p&gt;行长度&lt;code&gt;不可&lt;/code&gt;有硬限制。&lt;/p&gt;

&lt;p&gt;行长度的软限制&lt;code&gt;必须&lt;/code&gt;是120个字符；对于软限制，代码风格检查器&lt;code&gt;必须&lt;/code&gt;警告但&lt;code&gt;不可&lt;/code&gt;报错。&lt;/p&gt;

&lt;p&gt;一行代码的长度&lt;code&gt;不建议&lt;/code&gt;超过80个字符；较长的行&lt;code&gt;建议&lt;/code&gt;拆分成多个不超过80个字符的子行。&lt;/p&gt;

&lt;p&gt;在非空行后面&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/p&gt;

&lt;p&gt;空行&lt;code&gt;可以&lt;/code&gt;用来增强可读性和区分相关代码块。&lt;/p&gt;

&lt;p&gt;一行&lt;code&gt;不可&lt;/code&gt;多于一个语句。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;2.4. 缩进&lt;/h3&gt;

&lt;p&gt;代码&lt;code&gt;必须&lt;/code&gt;使用4个空格，且&lt;code&gt;不可&lt;/code&gt;使用制表符来作为缩进。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：代码中只使用空格，且不和制表符混合使用，将会对避免代码差异，补丁，历史和注解中的一些问题有帮助。空格的使用还可以使通过调整细微的缩进来改进行间对齐变得更加的简单。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;truefalsenull&quot;&gt;2.5. 关键字和 True/False/Null&lt;/h3&gt;

&lt;p&gt;PHP关键字(&lt;a href=&quot;http://php.net/manual/en/reserved.keywords.php&quot;&gt;keywords&lt;/a&gt;)&lt;code&gt;必须&lt;/code&gt;使用小写字母。&lt;/p&gt;

&lt;p&gt;PHP常量&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;使用小写字母。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;namespaceuse&quot;&gt;&lt;code&gt;命名空间(Namespace)&lt;/code&gt;和&lt;code&gt;导入(Use)&lt;/code&gt;声明&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;命名空间(namespace)&lt;/code&gt;的声明后面&lt;code&gt;必须&lt;/code&gt;有一行空行。&lt;/p&gt;

&lt;p&gt;所有的&lt;code&gt;导入(use)&lt;/code&gt;声明&lt;code&gt;必须&lt;/code&gt;放在&lt;code&gt;命名空间(namespace)&lt;/code&gt;声明的下面。&lt;/p&gt;

&lt;p&gt;一句声明中，&lt;code&gt;必须&lt;/code&gt;只有一个&lt;code&gt;导入(use)&lt;/code&gt;关键字。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;导入(use)&lt;/code&gt;声明代码块后面&lt;code&gt;必须&lt;/code&gt;有一行空行。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;&lt;/p&gt;

&lt;p&gt;// … 其它PHP代码 …&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;classpropertymethod&quot;&gt;&lt;code&gt;类(class)&lt;/code&gt;，&lt;code&gt;属性(property)&lt;/code&gt;和&lt;code&gt;方法(method)&lt;/code&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;术语“类”指所有的&lt;code&gt;类(class)&lt;/code&gt;，&lt;code&gt;接口(interface)&lt;/code&gt;和&lt;code&gt;特性(trait)&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;extendimplement&quot;&gt;4.1. &lt;code&gt;扩展(extend)&lt;/code&gt;和&lt;code&gt;实现(implement)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;一个类的&lt;code&gt;扩展(extend)&lt;/code&gt;和&lt;code&gt;实现(implement)&lt;/code&gt;关键词&lt;code&gt;必须&lt;/code&gt;和&lt;code&gt;类名(class name)&lt;/code&gt;在同一行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;类(class)&lt;/code&gt;的左花括号&lt;code&gt;必须&lt;/code&gt;放在下面自成一行；右花括号必须放在&lt;code&gt;类(class)&lt;/code&gt;主体的后面自成一行。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;&lt;/p&gt;

&lt;p&gt;class ClassName extends ParentClass implements \ArrayAccess, \Countable
{
    // 常量、属性、方法
}
```&lt;/p&gt;

&lt;p&gt;&lt;code&gt;实现(implement)&lt;/code&gt;列表&lt;code&gt;可以&lt;/code&gt;被拆分为多个缩进了一次的子行。如果要拆成多个子行，列表的第一项&lt;code&gt;必须&lt;/code&gt;要放在下一行，并且每行&lt;code&gt;必须&lt;/code&gt;只有一个&lt;code&gt;接口(interface)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;&lt;/p&gt;

&lt;p&gt;class ClassName extends ParentClass implements
    \ArrayAccess,
    \Countable,
    \Serializable
{
    // 常量、属性、方法
}
```&lt;/p&gt;

&lt;h3 id=&quot;property&quot;&gt;4.2. &lt;code&gt;属性(property)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;所有的&lt;code&gt;属性(property)&lt;/code&gt;都&lt;code&gt;必须&lt;/code&gt;声明其可见性。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;变量(var)&lt;/code&gt;关键字&lt;code&gt;不可&lt;/code&gt;用来声明一个&lt;code&gt;属性(property)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一条语句&lt;code&gt;不可&lt;/code&gt;声明多个&lt;code&gt;属性(property)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;属性名(property name)&lt;/code&gt; &lt;code&gt;不推荐&lt;/code&gt;用单个下划线作为前缀来表明其&lt;code&gt;保护(protected)&lt;/code&gt;或&lt;code&gt;私有(private)&lt;/code&gt;的可见性。&lt;/p&gt;

&lt;p&gt;一个&lt;code&gt;属性(property)&lt;/code&gt;声明看起来应该像下面这样。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;class ClassName
{
    public $foo = null;
}
```&lt;/p&gt;

&lt;h3 id=&quot;method&quot;&gt;4.3. &lt;code&gt;方法(method)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;所有的&lt;code&gt;方法(method)&lt;/code&gt;都&lt;code&gt;必须&lt;/code&gt;声明其可见性。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;方法名(method name)&lt;/code&gt; &lt;code&gt;不推荐&lt;/code&gt;用单个下划线作为前缀来表明其&lt;code&gt;保护(protected)&lt;/code&gt;或&lt;code&gt;私有(private)&lt;/code&gt;的可见性。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;方法名(method name)&lt;/code&gt;在其声明后面&lt;code&gt;不可&lt;/code&gt;有空格跟随。其左花括号&lt;code&gt;必须&lt;/code&gt;放在下面自成一行，且右花括号&lt;code&gt;必须&lt;/code&gt;放在方法主体的下面自成一行。左括号后面&lt;code&gt;不可&lt;/code&gt;有空格，且右括号前面也&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/p&gt;

&lt;p&gt;一个&lt;code&gt;方法(method)&lt;/code&gt;声明看来应该像下面这样。 注意括号，逗号，空格和花括号的位置：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;class ClassName
{
    public function fooBarBaz($arg1, &amp;amp;$arg2, $arg3 = [])
    {
        // 方法主体部分
    }
}
```&lt;/p&gt;

&lt;h3 id=&quot;method-1&quot;&gt;4.4. &lt;code&gt;方法(method)&lt;/code&gt;的参数&lt;/h3&gt;

&lt;p&gt;在参数列表中，逗号之前&lt;code&gt;不可&lt;/code&gt;有空格，而逗号之后则&lt;code&gt;必须&lt;/code&gt;要有一个空格。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;方法(method)&lt;/code&gt;中有默认值的参数必须放在参数列表的最后面。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;class ClassName
{
    public function foo($arg1, &amp;amp;$arg2, $arg3 = [])
    {
        // 方法主体部分
    }
}
```&lt;/p&gt;

&lt;p&gt;参数列表&lt;code&gt;可以&lt;/code&gt;被拆分为多个缩进了一次的子行。如果要拆分成多个子行，参数列表的第一项&lt;code&gt;必须&lt;/code&gt;放在下一行，并且每行&lt;code&gt;必须&lt;/code&gt;只有一个参数。&lt;/p&gt;

&lt;p&gt;当参数列表被拆分成多个子行，右括号和左花括号之间&lt;code&gt;必须&lt;/code&gt;又一个空格并且自成一行。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;class ClassName
{
    public function aVeryLongMethodName(
        ClassTypeHint $arg1,
        &amp;amp;$arg2,
        array $arg3 = []
    ) {
        // 方法主体部分
    }
}
```&lt;/p&gt;

&lt;h3 id=&quot;abstractfinal-static&quot;&gt;4.5. &lt;code&gt;抽象(abstract)&lt;/code&gt;，&lt;code&gt;终结(final)&lt;/code&gt;和 &lt;code&gt;静态(static)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;当用到&lt;code&gt;抽象(abstract)&lt;/code&gt;和&lt;code&gt;终结(final)&lt;/code&gt;来做类声明时，它们&lt;code&gt;必须&lt;/code&gt;放在可见性声明的前面。&lt;/p&gt;

&lt;p&gt;而当用到&lt;code&gt;静态(static)&lt;/code&gt;来做类声明时，则&lt;code&gt;必须&lt;/code&gt;放在可见性声明的后面。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Package;&lt;/p&gt;

&lt;p&gt;abstract class ClassName
{
    protected static $foo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;abstract protected function zim();

final public static function bar()
{
    // 方法主体部分
} } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-8&quot;&gt;4.6. 调用方法和函数&lt;/h3&gt;

&lt;p&gt;调用一个方法或函数时，在方法名或者函数名和左括号之间&lt;code&gt;不可&lt;/code&gt;有空格，左括号之后&lt;code&gt;不可&lt;/code&gt;有空格，右括号之前也&lt;code&gt;不可&lt;/code&gt;有空格。参数列表中，逗号之前&lt;code&gt;不可&lt;/code&gt;有空格，逗号之后则&lt;code&gt;必须&lt;/code&gt;有一个空格。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
bar();
$foo-&amp;gt;bar($arg1);
Foo::bar($arg2, $arg3);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参数列表&lt;code&gt;可以&lt;/code&gt;被拆分成多个缩进了一次的子行。如果拆分成子行，列表中的第一项&lt;code&gt;必须&lt;/code&gt;放在下一行，并且每一行&lt;code&gt;必须&lt;/code&gt;只能有一个参数。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
$foo-&amp;gt;bar(
    $longArgument,
    $longerArgument,
    $muchLongerArgument
);
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-9&quot;&gt;控制结构&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是对于控制结构代码风格的概括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;控制结构的关键词之后&lt;code&gt;必须&lt;/code&gt;有一个空格。&lt;/li&gt;
  &lt;li&gt;控制结构的左括号之后&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/li&gt;
  &lt;li&gt;控制结构的右括号之前&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/li&gt;
  &lt;li&gt;控制结构的右括号和左花括号之间&lt;code&gt;必须&lt;/code&gt;有一个空格。&lt;/li&gt;
  &lt;li&gt;控制结构的代码主体&lt;code&gt;必须&lt;/code&gt;进行一次缩进。&lt;/li&gt;
  &lt;li&gt;控制结构的右花括号&lt;code&gt;必须&lt;/code&gt;主体的下一行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每个控制结构的代码主体&lt;code&gt;必须&lt;/code&gt;被括在花括号里。这样可是使代码看上去更加标准化，并且加入新代码的时候还可以因此而减少引入错误的可能性。&lt;/p&gt;

&lt;h3 id=&quot;ifelseifelse&quot;&gt;5.1. &lt;code&gt;if&lt;/code&gt;，&lt;code&gt;elseif&lt;/code&gt;，&lt;code&gt;else&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;下面是一个&lt;code&gt;if&lt;/code&gt;条件控制结构的示例，注意其中括号，空格和花括号的位置。同时注意&lt;code&gt;else&lt;/code&gt;和&lt;code&gt;elseif&lt;/code&gt;要和前一个条件控制结构的右花括号在同一行。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
if ($expr1) {
    // if body
} elseif ($expr2) {
    // elseif body
} else {
    // else body;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;推荐&lt;/code&gt;用&lt;code&gt;elseif&lt;/code&gt;来替代&lt;code&gt;else if&lt;/code&gt;，以保持所有的条件控制关键字看起来像是一个单词。&lt;/p&gt;

&lt;h3 id=&quot;switchcase&quot;&gt;5.2. &lt;code&gt;switch&lt;/code&gt;，&lt;code&gt;case&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;下面是一个&lt;code&gt;switch&lt;/code&gt;条件控制结构的示例，注意其中括号，空格和花括号的位置。&lt;code&gt;case&lt;/code&gt;语句&lt;code&gt;必须&lt;/code&gt;要缩进一级，而&lt;code&gt;break&lt;/code&gt;关键字（或其他中止关键字）&lt;code&gt;必须&lt;/code&gt;和&lt;code&gt;case&lt;/code&gt;结构的代码主体在同一个缩进层级。如果一个有主体代码的&lt;code&gt;case&lt;/code&gt;结构故意的继续向下执行则&lt;code&gt;必须&lt;/code&gt;要有一个类似于&lt;code&gt;// no break&lt;/code&gt;的注释。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
switch ($expr) {
    case 0:
        echo &#39;First case, with a break&#39;;
        break;
    case 1:
        echo &#39;Second case, which falls through&#39;;
        // no break
    case 2:
    case 3:
    case 4:
        echo &#39;Third case, return instead of break&#39;;
        return;
    default:
        echo &#39;Default case&#39;;
        break;
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;whiledo-while&quot;&gt;5.3. &lt;code&gt;while&lt;/code&gt;，&lt;code&gt;do while&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;下面是一个&lt;code&gt;while&lt;/code&gt;循环控制结构的示例，注意其中括号，空格和花括号的位置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
while ($expr) {
    // structure body
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下面是一个&lt;code&gt;do while&lt;/code&gt;循环控制结构的示例，注意其中括号，空格和花括号的位置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
do {
    // structure body;
} while ($expr);
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;for&quot;&gt;5.4. &lt;code&gt;for&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;下面是一个&lt;code&gt;for&lt;/code&gt;循环控制结构的示例，注意其中括号，空格和花括号的位置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
for ($i = 0; $i &amp;lt; 10; $i++) {
    // for body
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;foreach&quot;&gt;5.5. &lt;code&gt;foreach&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;下面是一个&lt;code&gt;foreach&lt;/code&gt;循环控制结构的示例，注意其中括号，空格和花括号的位置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
foreach ($iterable as $key =&amp;gt; $value) {
    // foreach body
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;try-catch&quot;&gt;5.6. &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;下面是一个&lt;code&gt;try catch&lt;/code&gt;异常处理控制结构的示例，注意其中括号，空格和花括号的位置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
try {
    // try body
} catch (FirstExceptionType $e) {
    // catch body
} catch (OtherExceptionType $e) {
    // catch body
}
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-10&quot;&gt;闭包&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;声明闭包时所用的&lt;code&gt;function&lt;/code&gt;关键字之后&lt;code&gt;必须&lt;/code&gt;要有一个空格，而&lt;code&gt;use&lt;/code&gt;关键字的前后都要有一个空格。&lt;/p&gt;

&lt;p&gt;闭包的左花括号&lt;code&gt;必须&lt;/code&gt;跟其在同一行，而右花括号&lt;code&gt;必须&lt;/code&gt;在闭包主体的下一行。&lt;/p&gt;

&lt;p&gt;闭包的参数列表和变量列表的左括号后面&lt;code&gt;不可&lt;/code&gt;有空格，右括号的前面也&lt;code&gt;不可&lt;/code&gt;有空格。&lt;/p&gt;

&lt;p&gt;闭包的参数列表和变量列表中逗号前面&lt;code&gt;不可&lt;/code&gt;有空格，而逗号后面则&lt;code&gt;必须&lt;/code&gt;有空格。&lt;/p&gt;

&lt;p&gt;闭包的参数列表中带默认值的参数&lt;code&gt;必须&lt;/code&gt;放在参数列表的结尾部分。&lt;/p&gt;

&lt;p&gt;下面是一个闭包的示例。注意括号，空格和花括号的位置。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
$closureWithArgs = function ($arg1, $arg2) {
    // body
};&lt;/p&gt;

&lt;p&gt;$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {
    // body
};
```&lt;/p&gt;

&lt;p&gt;参数列表和变量列表&lt;code&gt;可以&lt;/code&gt;被拆分成多个缩进了一级的子行。如果要拆分成多个子行，列表中的第一项&lt;code&gt;必须&lt;/code&gt;放在下一行，并且每一行&lt;code&gt;必须&lt;/code&gt;只放一个参数或变量。&lt;/p&gt;

&lt;p&gt;当列表（不管是参数还是变量）最终被拆分成多个子行，右括号和左花括号之间&lt;code&gt;必须&lt;/code&gt;要有一个空格并且自成一行。&lt;/p&gt;

&lt;p&gt;下面是一个参数列表和变量列表被拆分成多个子行的示例。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
$longArgs_noVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) {
   // body
};&lt;/p&gt;

&lt;p&gt;$noArgs_longVars = function () use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};&lt;/p&gt;

&lt;p&gt;$longArgs_longVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};&lt;/p&gt;

&lt;p&gt;$longArgs_shortVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) use ($var1) {
   // body
};&lt;/p&gt;

&lt;p&gt;$shortArgs_longVars = function ($arg) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};
```&lt;/p&gt;

&lt;p&gt;把闭包作为一个参数在函数或者方法中调用时，依然要遵守上述规则。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
$foo-&amp;gt;bar(
    $arg1,
    function ($arg2) use ($var1) {
        // body
    },
    $arg3
);
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-11&quot;&gt;结论&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本指南有意的省略了许多元素的代码风格。主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;全局变量和全局常量的声明&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;函数声明&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;操作符和赋值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行间对齐&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注释和文档块&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类名的前缀和后缀&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最佳实践&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以后的代码规范中&lt;code&gt;可能&lt;/code&gt;会修正或扩展本指南中规定的代码风格。&lt;/p&gt;

&lt;h2 id=&quot;a-&quot;&gt;附录A 调查&lt;/h2&gt;

&lt;p&gt;为了写这个风格指南，我们调查了各个项目以最终确定通用的代码风格。并把这次调查在这里公布出来。&lt;/p&gt;

&lt;h3 id=&quot;a1-&quot;&gt;A.1. 调查数据&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;url,http://www.horde.org/apps/horde/docs/CODING_STANDARDS,http://pear.php.net/manual/en/standards.php,http://solarphp.com/manual/appendix-standards.style,http://framework.zend.com/manual/en/coding-standard.html,http://symfony.com/doc/2.0/contributing/code/standards.html,http://www.ppi.io/docs/coding-standards.html,https://github.com/ezsystems/ezp-next/wiki/codingstandards,http://book.cakephp.org/2.0/en/contributing/cakephp-coding-conventions.html,https://github.com/UnionOfRAD/lithium/wiki/Spec%3A-Coding,http://drupal.org/coding-standards,http://code.google.com/p/sabredav/,http://area51.phpbb.com/docs/31x/coding-guidelines.html,https://docs.google.com/a/zikula.org/document/edit?authkey=CPCU0Us&amp;amp;hgd=1&amp;amp;id=1fcqb93Sn-hR9c0mkN6m_tyWnmEvoswKBtSc0tKkZmJA,http://www.chisimba.com,n/a,https://github.com/Respect/project-info/blob/master/coding-standards-sample.php,n/a,Object Calisthenics for PHP,http://doc.nette.org/en/coding-standard,http://flow3.typo3.org,https://github.com/propelorm/Propel2/wiki/Coding-Standards,http://developer.joomla.org/coding-standards.html
voting,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,no,no,no,?,yes,no,yes
indent_type,4,4,4,4,4,tab,4,tab,tab,2,4,tab,4,4,4,4,4,4,tab,tab,4,tab
line_length_limit_soft,75,75,75,75,no,85,120,120,80,80,80,no,100,80,80,?,?,120,80,120,no,150
line_length_limit_hard,85,85,85,85,no,no,no,no,100,?,no,no,no,100,100,?,120,120,no,no,no,no
class_names,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,studly,lower_under,studly,lower,studly,studly,studly,studly,?,studly,studly,studly
class_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,next,next,next,next,next,next,same,next,next
constant_names,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper,upper
true_false_null,lower,lower,lower,lower,lower,lower,lower,lower,lower,upper,lower,lower,lower,upper,lower,lower,lower,lower,lower,upper,lower,lower
method_names,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel,lower_under,camel,camel,camel,camel,camel,camel,camel,camel,camel,camel
method_brace_line,next,next,next,next,next,same,next,same,same,same,same,next,next,same,next,next,next,next,next,same,next,next
control_brace_line,same,same,same,same,same,same,next,same,same,same,same,next,same,same,next,same,same,same,same,same,same,next
control_space_after,yes,yes,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes,yes
always_use_control_braces,yes,yes,yes,yes,yes,yes,no,yes,yes,yes,no,yes,yes,yes,yes,no,yes,yes,yes,yes,yes,yes
else_elseif_line,same,same,same,same,same,same,next,same,same,next,same,next,same,next,next,same,same,same,same,same,same,next
case_break_indent_from_switch,0/1,0/1,0/1,1/2,1/2,1/2,1/2,1/1,1/1,1/2,1/2,1/1,1/2,1/2,1/2,1/2,1/2,1/2,0/1,1/1,1/2,1/2
function_space_after,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no
closing_php_tag_required,no,no,no,no,no,no,no,no,yes,no,no,no,no,yes,no,no,no,no,no,yes,no,no
line_endings,LF,LF,LF,LF,LF,LF,LF,LF,?,LF,?,LF,LF,LF,LF,?,,LF,?,LF,LF,LF
static_or_visibility_first,static,?,static,either,either,either,visibility,visibility,visibility,either,static,either,?,visibility,?,?,either,either,visibility,visibility,static,?
control_space_parens,no,no,no,no,no,no,yes,no,no,no,no,no,no,yes,?,no,no,no,no,no,no,no
blank_line_after_php,no,no,no,no,yes,no,no,no,no,yes,yes,no,no,yes,?,yes,yes,no,yes,no,yes,no
class_method_control_brace,next/next/same,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/next,same/same/same,same/same/same,same/same/same,same/same/same,next/next/next,next/next/same,next/same/same,next/next/next,next/next/same,next/next/same,next/next/same,next/next/same,same/same/same,next/next/same,next/next/next
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;a2-&quot;&gt;A.2. 调查说明&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;indent_type&lt;/code&gt;:
缩进类型。 &lt;code&gt;tab&lt;/code&gt; = “使用制表符”，&lt;code&gt;2&lt;/code&gt; or &lt;code&gt;4&lt;/code&gt; = “空格数量”&lt;/p&gt;

&lt;p&gt;&lt;code&gt;line_length_limit_soft&lt;/code&gt;:
行长度的“软”限制，用字符。 &lt;code&gt;?&lt;/code&gt; = 不表示或者数字 &lt;code&gt;no&lt;/code&gt; 意为不限制.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;line_length_limit_hard&lt;/code&gt;:
行长度的”硬”限制，用字符。 &lt;code&gt;?&lt;/code&gt; = 不表示或者数字, &lt;code&gt;no&lt;/code&gt; 意为不限制.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class_names&lt;/code&gt;:
类名如何命名 &lt;code&gt;lower&lt;/code&gt; = 只是小写, &lt;code&gt;lower_under&lt;/code&gt; = 小写加下划线, &lt;code&gt;studly&lt;/code&gt; = 骆驼型.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class_brace_line&lt;/code&gt;:
类的左花括号是放在同(&lt;code&gt;same&lt;/code&gt;)一行还是在下(&lt;code&gt;next&lt;/code&gt;)一行？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;constant_names&lt;/code&gt;:
类常量如何命名？&lt;code&gt;upper&lt;/code&gt; = 大写加下划线分隔符。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;true_false_null&lt;/code&gt;:
全小写或者全大写？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;method_names&lt;/code&gt;:
方法名如何命名？&lt;code&gt;camel&lt;/code&gt; = &lt;code&gt;驼峰式&lt;/code&gt;, &lt;code&gt;lower_under&lt;/code&gt; = 小写加下划线分隔符。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;method_brace_line&lt;/code&gt;:
方法的左花括号在同(&lt;code&gt;same&lt;/code&gt;)一行还是在下(&lt;code&gt;next&lt;/code&gt;)一行？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;control_brace_line&lt;/code&gt;:
控制结构的左花括号在同(&lt;code&gt;same&lt;/code&gt;)一行还是在下(&lt;code&gt;next&lt;/code&gt;)一行？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;control_space_after&lt;/code&gt;:
控制结构关键词后是否有空格？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;always_use_control_braces&lt;/code&gt;:
控制结构总是使用花括号？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;else_elseif_line&lt;/code&gt;:
当使用&lt;code&gt;else&lt;/code&gt;和&lt;code&gt;elseif&lt;/code&gt;，是否放在同(&lt;code&gt;same&lt;/code&gt;)一行还是在下(&lt;code&gt;next&lt;/code&gt;)一行？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;case_break_indent_from_switch&lt;/code&gt;:
&lt;code&gt;case&lt;/code&gt;和&lt;code&gt;break&lt;/code&gt;分别从&lt;code&gt;swith&lt;/code&gt;语句处缩进多少次？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function_space_after&lt;/code&gt;:
函数调用的函数名和左括号是否有空格？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;closing_php_tag_required&lt;/code&gt;:
如过是纯PHP文件，关闭标签&lt;code&gt;?&amp;gt;&lt;/code&gt;是否需要？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;line_endings&lt;/code&gt;:
使用何种的行结束符？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;static_or_visibility_first&lt;/code&gt;:
在定义方法的时候&lt;code&gt;static&lt;/code&gt;和可见性谁在前面？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;control_space_parens&lt;/code&gt;:
在控制结构表达式中，左括号后面和右括号前面是否要有一个空格？&lt;code&gt;yes&lt;/code&gt; = &lt;code&gt;if ( $expr )&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; = &lt;code&gt;if ($expr)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;blank_line_after_php&lt;/code&gt;:
PHP的开始标签后面是否需要一个空行？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class_method_control_brace&lt;/code&gt;:
左花括号在类，方法和控制结构中的位置。&lt;/p&gt;

&lt;h3 id=&quot;a3-&quot;&gt;A.3. 调查结果&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;indent_type:
    tab: 7
    2: 1
    4: 14
line_length_limit_soft:
    ?: 2
    no: 3
    75: 4
    80: 6
    85: 1
    100: 1
    120: 4
    150: 1
line_length_limit_hard:
    ?: 2
    no: 11
    85: 4
    100: 3
    120: 2
class_names:
    ?: 1
    lower: 1
    lower_under: 1
    studly: 19
class_brace_line:
    next: 16
    same: 6
constant_names:
    upper: 22
true_false_null:
    lower: 19
    upper: 3
method_names:
    camel: 21
    lower_under: 1
method_brace_line:
    next: 15
    same: 7
control_brace_line:
    next: 4
    same: 18
control_space_after:
    no: 2
    yes: 20
always_use_control_braces:
    no: 3
    yes: 19
else_elseif_line:
    next: 6
    same: 16
case_break_indent_from_switch:
    0/1: 4
    1/1: 4
    1/2: 14
function_space_after:
    no: 22
closing_php_tag_required:
    no: 19
    yes: 3
line_endings:
    ?: 5
    LF: 17
static_or_visibility_first:
    ?: 5
    either: 7
    static: 4
    visibility: 6
control_space_parens:
    ?: 1
    no: 19
    yes: 2
blank_line_after_php:
    ?: 1
    no: 13
    yes: 8
class_method_control_brace:
    next/next/next: 4
    next/next/same: 11
    next/same/same: 1
    same/same/same: 6
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>PSR1代码规范1</title>
   <link href="http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr1/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr1</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;基本代码规范&lt;/h1&gt;

&lt;p&gt;本节我们将会讨论一些基本的代码规范问题，以此作为将来讨论更高级别的代码分享和技术互用的基础。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2119.txt&quot;&gt;RFC 2119&lt;/a&gt;中的&lt;code&gt;必须(MUST)&lt;/code&gt;，&lt;code&gt;不可(MUST NOT)&lt;/code&gt;，&lt;code&gt;建议(SHOULD)&lt;/code&gt;，&lt;code&gt;不建议(SHOULD NOT)&lt;/code&gt;，&lt;code&gt;可以/可能(MAY)&lt;/code&gt;等关键词将在本节用来做一些解释性的描述。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-1&quot;&gt;概述&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;源文件&lt;code&gt;必须&lt;/code&gt;只使用 &lt;code&gt;&amp;lt;?php&lt;/code&gt; 和 &lt;code&gt;&amp;lt;?=&lt;/code&gt; 这两种标签。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;源文件中php代码的编码格式&lt;code&gt;必须&lt;/code&gt;只使用不带&lt;code&gt;字节顺序标记(BOM)&lt;/code&gt;的&lt;code&gt;UTF-8&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个源文件&lt;code&gt;建议&lt;/code&gt;只用来做声明（&lt;code&gt;类(class)&lt;/code&gt;，&lt;code&gt;函数(function)&lt;/code&gt;，&lt;code&gt;常量(constant)&lt;/code&gt;等）或者只用来做一些引起副作用的操作（例如：输出信息，修改&lt;code&gt;.ini&lt;/code&gt;配置等）,但&lt;code&gt;不建议&lt;/code&gt;同时做这两件事。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;命名空间(namespace)&lt;/code&gt;和&lt;code&gt;类(class)&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;遵守&lt;a href=&quot;https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt;标准。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;类名(class name)&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;使用&lt;code&gt;骆驼式(StudlyCaps)&lt;/code&gt;写法 (译者注：&lt;code&gt;驼峰式(cameCase)&lt;/code&gt;的一种变种，后文将直接用&lt;code&gt;StudlyCaps&lt;/code&gt;表示)。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;类(class)&lt;/code&gt;中的常量&lt;code&gt;必须&lt;/code&gt;只由大写字母和&lt;code&gt;下划线(_)&lt;/code&gt;组成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;方法名(method name)&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;使用&lt;code&gt;驼峰式(cameCase)&lt;/code&gt;写法(译者注：后文将直接用&lt;code&gt;camelCase&lt;/code&gt;表示)。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-2&quot;&gt;文件&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;php&quot;&gt;2.1. PHP标签&lt;/h3&gt;

&lt;p&gt;PHP代码&lt;code&gt;必须&lt;/code&gt;只使用&lt;code&gt;长标签(&amp;lt;?php ?&amp;gt;)&lt;/code&gt;或者&lt;code&gt;短输出式标签(&amp;lt;?= ?&amp;gt;)&lt;/code&gt;；而&lt;code&gt;不可&lt;/code&gt;使用其他标签。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2.2. 字符编码&lt;/h3&gt;

&lt;p&gt;PHP代码的编码格式&lt;code&gt;必须&lt;/code&gt;只使用不带&lt;code&gt;字节顺序标记(BOM)&lt;/code&gt;的&lt;code&gt;UTF-8&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2.3. 副作用&lt;/h3&gt;

&lt;p&gt;一个源文件&lt;code&gt;建议&lt;/code&gt;只用来做声明（&lt;code&gt;类(class)&lt;/code&gt;，&lt;code&gt;函数(function)&lt;/code&gt;，&lt;code&gt;常量(constant)&lt;/code&gt;等）或者只用来做一些引起副作用的操作（例如：输出信息，修改&lt;code&gt;.ini&lt;/code&gt;配置等）,但&lt;code&gt;不建议&lt;/code&gt;同时做这两件事。&lt;/p&gt;

&lt;p&gt;短语&lt;code&gt;副作用(side effects)&lt;/code&gt;的意思是 &lt;em&gt;在包含文件时&lt;/em&gt; 所执行的逻辑与所声明的&lt;code&gt;类(class)&lt;/code&gt;，&lt;code&gt;函数(function)&lt;/code&gt;，&lt;code&gt;常量(constant)&lt;/code&gt;等没有直接的关系。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;副作用(side effects)&lt;/code&gt;包含但不局限于：产生输出，显式地使用&lt;code&gt;require&lt;/code&gt;或&lt;code&gt;include&lt;/code&gt;，连接外部服务，修改ini配置，触发错误或异常，修改全局或者静态变量，读取或修改文件等等&lt;/p&gt;

&lt;p&gt;下面是一个既包含声明又有副作用的示例文件；即应避免的例子：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
// 副作用：修改了ini配置
ini_set(‘error_reporting’, E_ALL);&lt;/p&gt;

&lt;p&gt;// 副作用：载入了文件
include “file.php”;&lt;/p&gt;

&lt;p&gt;// 副作用：产生了输出
echo “&amp;lt;html&amp;gt;\n”;&lt;/p&gt;

&lt;p&gt;// 声明
function foo()
{
    // 函数体
}
```&lt;/p&gt;

&lt;p&gt;下面是一个仅包含声明的示例文件；即应提倡的例子：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
// 声明
function foo()
{
    // 函数体
}&lt;/p&gt;

&lt;p&gt;// 条件式声明不算做是副作用
if (! function_exists(‘bar’)) {
    function bar()
    {
        // 函数体
    }
}
```&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;namespaceclass-name&quot;&gt;&lt;code&gt;空间名(namespace)&lt;/code&gt;和&lt;code&gt;类名(class name)&lt;/code&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;命名空间(namespace)&lt;/code&gt;和&lt;code&gt;类(class)&lt;/code&gt;必须遵守 &lt;a href=&quot;https://github.com/hfcorriez/fig-standards/blob/zh_CN/接受/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;这意味着一个源文件中只能有一个&lt;code&gt;类(class)&lt;/code&gt;，并且每个&lt;code&gt;类(class)&lt;/code&gt;至少要有一级&lt;code&gt;空间名（namespace）&lt;/code&gt;：即一个顶级的&lt;code&gt;组织名(vendor name)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;类名(class name)&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;使用&lt;code&gt;StudlyCaps&lt;/code&gt;写法。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PHP5.3&lt;/code&gt;之后的代码&lt;code&gt;必须&lt;/code&gt;使用正式的&lt;code&gt;命名空间(namespace)&lt;/code&gt;
例子：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
// PHP 5.3 及之后:
namespace Vendor\Model;&lt;/p&gt;

&lt;p&gt;class Foo
{
}
```&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PHP5.2.x&lt;/code&gt;之前的代码&lt;code&gt;建议&lt;/code&gt;用伪命名空间&lt;code&gt;Vendor_&lt;/code&gt;作为&lt;code&gt;类名(class name)&lt;/code&gt;的前缀&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
&amp;lt;?php
// PHP 5.2.x 及之前:
class Vendor_Model_Foo
{
}
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-5&quot;&gt;类的常量、属性和方法&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;术语&lt;code&gt;类(class)&lt;/code&gt;指所有的&lt;code&gt;类(class)&lt;/code&gt;，&lt;code&gt;接口(interface)&lt;/code&gt;和&lt;code&gt;特性(trait)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;4.1. 常量&lt;/h3&gt;

&lt;p&gt;类常量&lt;code&gt;必须&lt;/code&gt;只由大写字母和&lt;code&gt;下划线(_)&lt;/code&gt;组成。
例子：&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php
namespace Vendor\Model;&lt;/p&gt;

&lt;p&gt;class Foo
{
    const VERSION = ‘1.0’;
    const DATE_APPROVED = ‘2012-06-01’;
}
```&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;4.2. 属性&lt;/h3&gt;

&lt;p&gt;本指南中故意不对&lt;code&gt;$StulyCaps&lt;/code&gt;，&lt;code&gt;$camelCase&lt;/code&gt;或者&lt;code&gt;$unser_score&lt;/code&gt;中的某一种风格作特别推荐，完全由读者依据个人喜好决定属性名的命名风格。&lt;/p&gt;

&lt;p&gt;但是不管你如何定义属性名，&lt;code&gt;建议&lt;/code&gt;在一个合理的范围内保持一致。这个范围可能是&lt;code&gt;组织(vendor)&lt;/code&gt;级别的，&lt;code&gt;包(package)&lt;/code&gt;级别的，&lt;code&gt;类(class)&lt;/code&gt;级别的，或者&lt;code&gt;方法(method)&lt;/code&gt;级别的。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;4.3. 方法&lt;/h3&gt;

&lt;p&gt;方法名则&lt;code&gt;必须&lt;/code&gt;使用&lt;code&gt;camelCase()&lt;/code&gt;风格来声明。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PSR1代码规范4</title>
   <link href="http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr4/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr4</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;1. 概况&lt;/h2&gt;

&lt;p&gt;这个 PSR 描述的是通过文件路径&lt;a href=&quot;http://php.net/autoload&quot;&gt;自动载入&lt;/a&gt;类的指南；它作为对 &lt;a href=&quot;https://github.com/hfcorriez/fig-standards/tree/master/accepted/zh_CN/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt; 的补充；根据这个
指导如何规范存放文件来自动载入；&lt;/p&gt;

&lt;h2 id=&quot;specification&quot;&gt;2. 说明（Specification）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;术语「类」是一个泛称；它包含类，接口，traits 以及其他类似的结构；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;完全限定类名应该类似如下范例：&lt;/p&gt;

    &lt;p&gt;&amp;lt;NamespaceName&amp;gt;(&amp;lt;SubNamespaceNames&amp;gt;)*&amp;lt;ClassName&amp;gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;完全限定类名必须有一个顶级命名空间（Vendor Name）；&lt;/li&gt;
      &lt;li&gt;完全限定类名可以有多个子命名空间；&lt;/li&gt;
      &lt;li&gt;完全限定类名应该有一个终止类名；&lt;/li&gt;
      &lt;li&gt;下划线在完全限定类名中是没有特殊含义的；&lt;/li&gt;
      &lt;li&gt;字母在完全限定类名中可以是任何大小写的组合；&lt;/li&gt;
      &lt;li&gt;所有类名必须以大小写敏感的方式引用；&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当从完全限定类名载入文件时：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;在完全限定类名中，连续的一个或几个子命名空间构成的命名空间前缀（不包括顶级命名空间的分隔符），至少对应着至少一个基础目录。&lt;/li&gt;
      &lt;li&gt;在「命名空间前缀」后的连续子命名空间名称对应一个「基础目录」下的子目录，其中的命名
空间分隔符表示目录分隔符。子目录名称必须和子命名空间名大小写匹配；&lt;/li&gt;
      &lt;li&gt;终止类名对应一个以 &lt;code&gt;.php&lt;/code&gt; 结尾的文件。文件名必须和终止类名大小写匹配；&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自动载入器的实现不可抛出任何异常，不可引发任何等级的错误；也不应返回值；&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 范例&lt;/h2&gt;

&lt;p&gt;如下表格展示的是与完全限定类名、命名空间前缀和基础目录相对应的文件路径：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;完全限定类名&lt;/th&gt;
      &lt;th&gt;命名空间前缀&lt;/th&gt;
      &lt;th&gt;基础目录&lt;/th&gt;
      &lt;th&gt;实际的文件路径&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\Acme\Log\Writer\File_Writer&lt;/td&gt;
      &lt;td&gt;Acme\Log\Writer&lt;/td&gt;
      &lt;td&gt;./acme-log-writer/lib/&lt;/td&gt;
      &lt;td&gt;./acme-log-writer/lib/File_Writer.php&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\Aura\Web\Response\Status&lt;/td&gt;
      &lt;td&gt;Aura\Web&lt;/td&gt;
      &lt;td&gt;/path/to/aura-web/src/&lt;/td&gt;
      &lt;td&gt;/path/to/aura-web/src/Response/Status.php&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\Symfony\Core\Request&lt;/td&gt;
      &lt;td&gt;Symfony\Core&lt;/td&gt;
      &lt;td&gt;./vendor/Symfony/Core/&lt;/td&gt;
      &lt;td&gt;./vendor/Symfony/Core/Request.php&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\Zend\Acl&lt;/td&gt;
      &lt;td&gt;Zend&lt;/td&gt;
      &lt;td&gt;/usr/includes/Zend/&lt;/td&gt;
      &lt;td&gt;/usr/includes/Zend/Acl.php&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;例子中的自动载入器非常适应这个指南，请参照 &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/PSR-4-autoloader-examples.md&quot;&gt;示例文件&lt;/a&gt;。由于可能随时变更，实例不能作为指南的一部分。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>PSR1代码规范3</title>
   <link href="http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr3/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr3</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;日志接口&lt;/h1&gt;

&lt;p&gt;本文档描述了日志类库的通用接口。&lt;/p&gt;

&lt;p&gt;主要目标是让类库获得一个&lt;code&gt;Psr\Log\LoggerInterface&lt;/code&gt;对象并能通过简单通用的方式来写日志。有自定义需求的框架和CMS&lt;code&gt;可以&lt;/code&gt;根据情况扩展这个接口，但&lt;code&gt;推荐&lt;/code&gt;保持和该文档的兼容性，以确保应用中使用到的第三方库能将日志集中写到应用日志里。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2119&quot;&gt;RFC 2119&lt;/a&gt;中的&lt;code&gt;必须(MUST)&lt;/code&gt;，&lt;code&gt;不可(MUST NOT)&lt;/code&gt;，&lt;code&gt;建议(SHOULD)&lt;/code&gt;，&lt;code&gt;不建议(SHOULD NOT)&lt;/code&gt;，&lt;code&gt;可以/可能(MAY)&lt;/code&gt;等关键词将在本节用来做一些解释性的描述。&lt;/p&gt;

&lt;p&gt;关键词&lt;code&gt;实现者&lt;/code&gt;在这个文档被解释为：在日志相关的库或框架实现&lt;code&gt;LoggerInterface&lt;/code&gt;接口的开发人员。用这些实现者开发出来的类库的人都被称作&lt;code&gt;用户&lt;/code&gt;。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-1&quot;&gt;规范&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.1 基础&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;LoggerInterface&lt;/code&gt;暴露八个接口用来记录八个等级(debug, info, notice, warning, error, critical, alert, emergency)的日志。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第九个方法是&lt;code&gt;log&lt;/code&gt;，接受日志等级作为第一个参数。用一个日志等级常量来调用这个方法&lt;code&gt;必须&lt;/code&gt;和直接调用指定等级方法的结果一致。用一个本规范中未定义且不为具体实现所知的日志等级来调用该方法&lt;code&gt;必须&lt;/code&gt;抛出一个&lt;code&gt;Psr\Log\InvalidArgumentException&lt;/code&gt;。&lt;code&gt;不推荐&lt;/code&gt;使用自定义的日志等级，除非你非常确定当前类库对其有所支持。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;1.2 消息&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每个方法都接受一个字符串，或者一个有&lt;code&gt;__toString&lt;/code&gt;方法的对象作为&lt;code&gt;message&lt;/code&gt;参数。&lt;code&gt;实现者&lt;/code&gt; &lt;code&gt;可以&lt;/code&gt;对传入的对象有特殊的处理。如果没有，&lt;code&gt;实现者&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;将它转换成字符串。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;message&lt;/code&gt;参数中&lt;code&gt;可能&lt;/code&gt;包含一些&lt;code&gt;可以&lt;/code&gt;被&lt;code&gt;context&lt;/code&gt;参数的数值所替换的占位符。&lt;/p&gt;

    &lt;p&gt;占位符名字&lt;code&gt;必须&lt;/code&gt;和&lt;code&gt;context&lt;/code&gt;数组类型参数的键名对应。&lt;/p&gt;

    &lt;p&gt;占位符名字&lt;code&gt;必须&lt;/code&gt;使用一对花括号来作为分隔符。在占位符和分隔符之间&lt;code&gt;不能&lt;/code&gt;有任何空格。&lt;/p&gt;

    &lt;p&gt;占位符名字&lt;code&gt;应该&lt;/code&gt;只能由&lt;code&gt;A-Z&lt;/code&gt;，&lt;code&gt;a-z&lt;/code&gt;，&lt;code&gt;0-9&lt;/code&gt;，下划线&lt;code&gt;_&lt;/code&gt;和句号&lt;code&gt;.&lt;/code&gt;组成。其它的字符作为以后占位符规范的保留字。&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;实现者&lt;/code&gt; &lt;code&gt;可以&lt;/code&gt;使用占位符来实现不同的转义和翻译日志成文。因为&lt;code&gt;用户&lt;/code&gt;并不知道上下文数据会是什么，所以&lt;code&gt;不推荐&lt;/code&gt;提前转义占位符。&lt;/p&gt;

    &lt;p&gt;下面提供一个占位符替换的例子，仅作为参考：&lt;/p&gt;

    &lt;p&gt;```php
  &amp;lt;?php
  /**
   * Interpolates context values into the message placeholders.
   */
  function interpolate($message, array $context = array())
  {
      // build a replacement array with braces around the context keys
      $replace = array();
      foreach ($context as $key =&amp;gt; $val) {
          $replace[’{‘ . $key . ‘}’] = $val;
      }&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  // interpolate replacement values into the message and return
  return strtr($message, $replace);   }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;// a message with brace-delimited placeholder names
  $message = “User {username} created”;&lt;/p&gt;

    &lt;p&gt;// a context array of placeholder names =&amp;gt; replacement values
  $context = array(‘username’ =&amp;gt; ‘bolivar’);&lt;/p&gt;

    &lt;p&gt;// echoes “Username bolivar created”
  echo interpolate($message, $context);
  ```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;1.3 上下文&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每个方法接受一个数组作为&lt;code&gt;context&lt;/code&gt;参数，用来存储不适合在字符串中填充的信息。数组可以包括任何东西。&lt;code&gt;实现者&lt;/code&gt; &lt;code&gt;必须&lt;/code&gt;确保他们尽可能包容的对&lt;code&gt;context&lt;/code&gt;参数进行处理。一个&lt;code&gt;context&lt;/code&gt;参数的给定值&lt;code&gt;不可&lt;/code&gt;导致抛出异常，也&lt;code&gt;不可&lt;/code&gt;产生任何PHP错误，警告或者提醒。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果在&lt;code&gt;context&lt;/code&gt;参数中传入了一个&lt;code&gt;异常&lt;/code&gt;对象，它必须以&lt;code&gt;exception&lt;/code&gt;作为键名。记录异常轨迹是通用的模式，并且可以在日志系统支持的情况下从异常中提取出整个调用栈。&lt;code&gt;实现者&lt;/code&gt;在将&lt;code&gt;exception&lt;/code&gt;当做&lt;code&gt;异常&lt;/code&gt;对象来使用之前&lt;code&gt;必须&lt;/code&gt;去验证它是不是一个&lt;code&gt;异常&lt;/code&gt;对象，因为它&lt;code&gt;可能&lt;/code&gt;包含着任何东西。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;1.4 助手类和接口&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Psr\Log\AbstractLogger&lt;/code&gt;类可以让你通过继承它并实现通用的&lt;code&gt;log&lt;/code&gt;方法来方便的实现&lt;code&gt;LoggerInterface&lt;/code&gt;接口。而其他八个方法将会把消息和上下文转发给&lt;code&gt;log&lt;/code&gt;方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类似的，使用&lt;code&gt;Psr\Log\LoggerTrait&lt;/code&gt;只需要你实现通用的&lt;code&gt;log&lt;/code&gt;方法。注意特性是不能用来实现接口的，所以你依然需要在你的类中&lt;code&gt;implement LoggerInterface&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Psr\Log\NullLogger&lt;/code&gt;是和接口一起提供的。它在没有可用的日志记录器时，&lt;code&gt;可以&lt;/code&gt;为使用日志接口的&lt;code&gt;用户&lt;/code&gt;们提供一个后备的“黑洞”。但是，当&lt;code&gt;context&lt;/code&gt;参数的构建非常耗时的时候，直接判断是否需要记录日志可能是个更好的选择。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Psr\Log\LoggerAwareInterface&lt;/code&gt;只有一个&lt;code&gt;setLogger(LoggerInterface $logger)&lt;/code&gt;方法，它可以在框架中用来随意设置一个日志记录器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Psr\Log\LoggerAwareTrait&lt;/code&gt;特性可以被用来在各个类中轻松实现相同的接口。通过它可以访问到&lt;code&gt;$this-&amp;gt;logger&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;Psr\Log\LogLevel&lt;/code&gt;类拥有八个日志等级的常量。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-6&quot;&gt;包&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://packagist.org/packages/psr/log&quot;&gt;psr/log&lt;/a&gt;中提供了上文描述过的接口和类，以及相关的异常类，还有一组用来验证你的实现的单元测试。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;psrlogloggerinterface&quot;&gt;&lt;code&gt;Psr\Log\LoggerInterface&lt;/code&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;namespace Psr\Log;&lt;/p&gt;

&lt;p&gt;/**
 * Describes a logger instance
 *
 * The message MUST be a string or object implementing __toString().
 *
 * The message MAY contain placeholders in the form: {foo} where foo
 * will be replaced by the context data in key “foo”.
 *
 * The context array can contain arbitrary data, the only assumption that
 * can be made by implementors is that if an Exception instance is given
 * to produce a stack trace, it MUST be in a key named “exception”.
 *
 * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
 * for the full interface specification.
 */
interface LoggerInterface
{
    /**
     * System is unusable.
     *
     * @param string $message
     * @param array $context
     * @return null
     */
    public function emergency($message, array $context = array());&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Action must be taken immediately.
 *
 * Example: Entire website down, database unavailable, etc. This should
 * trigger the SMS alerts and wake you up.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function alert($message, array $context = array());

/**
 * Critical conditions.
 *
 * Example: Application component unavailable, unexpected exception.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function critical($message, array $context = array());

/**
 * Runtime errors that do not require immediate action but should typically
 * be logged and monitored.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function error($message, array $context = array());

/**
 * Exceptional occurrences that are not errors.
 *
 * Example: Use of deprecated APIs, poor use of an API, undesirable things
 * that are not necessarily wrong.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function warning($message, array $context = array());

/**
 * Normal but significant events.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function notice($message, array $context = array());

/**
 * Interesting events.
 *
 * Example: User logs in, SQL logs.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function info($message, array $context = array());

/**
 * Detailed debug information.
 *
 * @param string $message
 * @param array $context
 * @return null
 */
public function debug($message, array $context = array());

/**
 * Logs with an arbitrary level.
 *
 * @param mixed $level
 * @param string $message
 * @param array $context
 * @return null
 */
public function log($level, $message, array $context = array()); } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;psrlogloggerawareinterface&quot;&gt;&lt;code&gt;Psr\Log\LoggerAwareInterface&lt;/code&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;namespace Psr\Log;&lt;/p&gt;

&lt;p&gt;/**
 * Describes a logger-aware instance
 */
interface LoggerAwareInterface
{
    /**
     * Sets a logger instance on the object
     *
     * @param LoggerInterface $logger
     * @return null
     */
    public function setLogger(LoggerInterface $logger);
}
```&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;psrlogloglevel&quot;&gt;&lt;code&gt;Psr\Log\LogLevel&lt;/code&gt;&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;namespace Psr\Log;&lt;/p&gt;

&lt;p&gt;/**
 * Describes log levels
 */
class LogLevel
{
    const EMERGENCY = ‘emergency’;
    const ALERT     = ‘alert’;
    const CRITICAL  = ‘critical’;
    const ERROR     = ‘error’;
    const WARNING   = ‘warning’;
    const NOTICE    = ‘notice’;
    const INFO      = ‘info’;
    const DEBUG     = ‘debug’;
}
```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PSR1代码规范0</title>
   <link href="http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr0/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/2015/02/16/psr0</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;已弃用&lt;/strong&gt; - 截止到2014年10月21日，PSR-0已被弃用。 推荐替代使用&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下文描述了若要使用一个通用的&lt;code&gt;自动加载器(autoloader)&lt;/code&gt;，你所需要遵守的规范：&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;规范&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;一个完全标准的&lt;code&gt;命名空间(namespace)&lt;/code&gt;和&lt;code&gt;类(class)&lt;/code&gt;的结构是这样的：&lt;code&gt;\&amp;lt;Vendor Name&amp;gt;\(&amp;lt;Namespace&amp;gt;\)*&amp;lt;Class Name&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;每个&lt;code&gt;命名空间(namespace)&lt;/code&gt;都必须有一个顶级的&lt;code&gt;空间名(namespace)&lt;/code&gt;(“&lt;code&gt;组织名(Vendor Name)&lt;/code&gt;”)。&lt;/li&gt;
  &lt;li&gt;每个&lt;code&gt;命名空间(namespace)&lt;/code&gt;中可以根据需要使用任意数量的&lt;code&gt;子命名空间(sub-namespace)&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;从文件系统中加载源文件时，&lt;code&gt;空间名(namespace)&lt;/code&gt;中的分隔符将被转换为 &lt;code&gt;DIRECTORY_SEPARATOR&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;类名(class name)&lt;/code&gt;中的每个下划线&lt;code&gt;_&lt;/code&gt;都将被转换为一个&lt;code&gt;DIRECTORY_SEPARATOR&lt;/code&gt;。下划线&lt;code&gt;_&lt;/code&gt;在&lt;code&gt;空间名(namespace)&lt;/code&gt;中没有什么特殊的意义。&lt;/li&gt;
  &lt;li&gt;完全标准的&lt;code&gt;命名空间(namespace)&lt;/code&gt;和&lt;code&gt;类(class)&lt;/code&gt;从文件系统加载源文件时将会加上&lt;code&gt;.php&lt;/code&gt;后缀。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;组织名(vendor name)&lt;/code&gt;，&lt;code&gt;空间名(namespace)&lt;/code&gt;，&lt;code&gt;类名(class name)&lt;/code&gt;都由大小写字母组合而成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;示例&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\Doctrine\Common\IsolatedClassLoader&lt;/code&gt; =&amp;gt; &lt;code&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\Symfony\Core\Request&lt;/code&gt; =&amp;gt; &lt;code&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\Zend\Acl&lt;/code&gt; =&amp;gt; &lt;code&gt;/path/to/project/lib/vendor/Zend/Acl.php&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\Zend\Mail\Message&lt;/code&gt; =&amp;gt; &lt;code&gt;/path/to/project/lib/vendor/Zend/Mail/Message.php&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;namespaceclass-name&quot;&gt;&lt;code&gt;空间名(namespace)&lt;/code&gt;和&lt;code&gt;类名(class name)&lt;/code&gt;中的下划线&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;\namespace\package\Class_Name&lt;/code&gt; =&amp;gt; &lt;code&gt;/path/to/project/lib/vendor/namespace/package/Class/Name.php&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;\namespace\package_name\Class_Name&lt;/code&gt; =&amp;gt; &lt;code&gt;/path/to/project/lib/vendor/namespace/package_name/Class/Name.php&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上是我们为实现通用的自动加载而制定的最低标准。你可以利用能够自动加载&lt;code&gt;PHP 5.3&lt;/code&gt;类的&lt;code&gt;SplClassLoader&lt;/code&gt;来测试你的代码是否符合这些标准。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;实例&lt;/h2&gt;

&lt;p&gt;下面是一个怎样利用上述标准来实现自动加载的示例函数。&lt;/p&gt;

&lt;p&gt;```php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;function autoload($className)
{
    $className = ltrim($className, ‘\’);
    $fileName  = ‘’;
    $namespace = ‘’;
    if ($lastNsPos = strrpos($className, ‘\’)) {
        $namespace = substr($className, 0, $lastNsPos);
        $className = substr($className, $lastNsPos + 1);
        $fileName  = str_replace(‘\’, DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
    }
    $fileName .= str_replace(‘_’, DIRECTORY_SEPARATOR, $className) . ‘.php’;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require $fileName; } ```
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;splclassloader&quot;&gt;&lt;code&gt;SplClassLoader&lt;/code&gt;实现&lt;/h2&gt;

&lt;p&gt;下面的gist是一个按照上面建议的标准来自动加载类的&lt;code&gt;SplClassLoader&lt;/code&gt;实例。这是依据这些标准来加载&lt;code&gt;PHP 5.3&lt;/code&gt;类的推荐方案。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gist.github.com/221634&quot;&gt;http://gist.github.com/221634&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>什么是javascript</title>
   <link href="http://127.0.0.1/javascript/2015/02/16/javascript/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/02/16/javascript</id>
   <content type="html">&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;1、什么是javascript&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JavaScript 是网景（Netscape）公司开发的一种基于客户端浏览器、面向（基于）对象、事件驱动式的网页脚本语言。
客户端浏览器：
HTML、CSS、JavaScript客户端语言
PHP/Java/.NET服务器语言
判断一种语言是客户端还是服务器端，主要看“它”在哪里运行
JavaScript是一种面向对象的脚本语言
事件驱动式
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、javascript的用途&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）网页特效
2）表单验证
3）网页小游戏（超级玛丽、五子棋、坦克大战）
4）服务器端编程（Ajax、Node.js）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、javascript的基本语法&lt;/p&gt;

&lt;p&gt;1、基本格式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）JavaScript区分大小写
2）JavaScript脚本程序须嵌入在HTML文件中
3）JavaScript脚本程序中不能包含HTML标记代码,如果想在javascript中使用html代码，可以采用document.write(“&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;”);
4）每行写一条脚本语句:document.write(‘hello’);alert(‘world’);
5）语句末尾可以加分号（建议都加分号）document.write(‘hello world’);alert(‘hello javascript’);
6）JavaScript脚本程序可以独立保存为一个外部文件public.js文件中，并通过script中的src属性直接引入
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;变量是用来临时存储数值的容器，变量存储的数值是可以变化的。
变量必须要先声明才能使用，使用var声明变量。

错误的：
alert(i);
正确的：
var i=10;
alert(i);
正确的：（只限全局，不推荐使用）
i=10;
alert(i)
变量的命名规则：第一个字符必须是英文字母，或者是下划线(_)，还可以是$美元符号，其后的字符，可以是英文字母，数字，下划线；变量名不能是JavaScript的保留字
变量的作用域:全局变量、局部变量
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、变量的数据类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）String 字符类型 
2）Number 整型、浮点型
3）、boolean  true、false  
4）Undefined（变量声明，但未赋值）
5）Null 空类型
6）Object 对象类型（数组）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4、parseInt、parseFloat、isNaN函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseInt()：将字符串转化为整数
parseFloat()：将字符串转化为浮点数
isNaN()：判断给定的值是否不为数值，如果不是数值则返回true，是数值返返回false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、运算符&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）算术运算符
+ - * / %
++ ：自加
--  ：自减

2）比较运算符
&amp;gt; &amp;lt; == === &amp;gt;= &amp;lt;= != !==
==：值相等，类型可以不同
===：全等于，要求值相等且类型要一致

3）逻辑运算符
&amp;amp;&amp;amp;  ||  !

4）赋值运算符
= += -= *= /= %=

5）字符串运算符
+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三、通过id找对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;基本语法：document.getElementById(id值)
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Ajax</title>
   <link href="http://127.0.0.1/javascript/2015/02/16/ajax/"/>
   <updated>2015-02-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/javascript/2015/02/16/ajax</id>
   <content type="html">&lt;p&gt;一、Ajax发展历史&lt;/p&gt;

&lt;p&gt;1、历史起源&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1998年	微软公司  IE5   XMLHTTP（技术）
2005年  谷歌  Gmail（邮箱）、谷歌地图  XMLHttpRequest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、什么是Ajax&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Asynchronous ：异步
JavaScript ：JS
And ：和
XML ：XML
所谓的Ajax就是基于Javascript+XML的异步请求
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、Ajax运行平台&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Google Chrome
Mozilla
Firefox
Internet Explorer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4、Ajax运行机制有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）传统模式下的同步请求
2）Ajax模式下的异步请求
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、Ajax的应用场景&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;百度地图、谷歌地图
邮箱
判断用户名是否可用
无刷新分页
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、创建Ajax对象&lt;/p&gt;

&lt;p&gt;1、创建Ajax对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;在使用Ajax的前提下，我们首先要创建Ajax对象，又由于Ajax属于客户端语言，所以Ajax对象也必须进行兼容处理：
IE模型下：
var xhr = new ActiveXObject(‘Microsoft.XMLHTTP’); (IE7以下版本，在IE8也支持)
W3C模型下
var  xhr = new XMLHttpRequest(); （W3C浏览器与IE高版本浏览器)
注意：目前IE浏览器的大部分是IE8以上，所以使用var xhr = new XMLHttpRequest()创建对象
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、Ajax对象中的常用属性与方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）常用方法：
open(method,服务器的url) ：初始化Ajax对象
method：模拟http的get与post请求，如get请求，’get’;否则则为’post’;
url：要请求的url地址 	setRequestHeader(header,value) ：设置请求头信息
header：请求头参数
value：设置请求头的值 	send(content) ：发送Ajax请求
content：http请求时所传递的参数
如果是get请求，该值为null
如果是post请求，该值为要传递的参数

2）常用属性：
onreadystatechange ：Ajax状态码改变时所调用的回调函数
readyState ：Ajax状态码
0：表示对象已建立，但未初始化   new XMLHttpRequest()
1：表示对象已初始化，但未发送   open()
2：已调用send方法进行请求      send()
3：正在接收数据（接收到一部分）
4：接收完成
status : 响应状态码 200（成功） 404（页面未找到）304（缓存）
reponseText ：响应文本信息
当服务器端返回的是字符串类型的文本数据时，Ajax通过responseText进行调用
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三、Ajax请求中的GET请求&lt;/p&gt;

&lt;p&gt;1、Ajax中的get请求五步走：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）创建Ajax对象   xhr=new XMLHttpRequest();
2）设置回调函数   xhr.onreadystatechange=function(){//步骤5}
3）初始化Ajax     xhr.open(‘get’,’url’+数据)
4）发送Ajax请求   xhr.send(null)
5）判断Ajax状态码与响应状态码进行相关处理   xhr.readyState==4&amp;amp;&amp;amp;xhr.status==200
例1：通过ajax计算两个数的和
例2：判断用户名是否存在
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、echo与return的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;我们发现，在我们所写的PHP页面，我们的数据都是通过echo进行输出的，那么采用return可不可以？
通过实验验证发现，我们在PHP页面只能通过echo进行返回，而不能通过return，原因如下：
return只能返回数据到当前服务器端页面，所以如果Ajax中的处理页面采用return方式，那么Ajax是无法接收到最终结果的。
echo是返回数据到浏览器Client，我们的Ajax引擎可以直接接收到echo返回的数据，所以在Ajax中，只能使用echo方式进行数据返回。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;四、Ajax中的post请求&lt;/p&gt;

&lt;p&gt;1、回顾get与post请求的区别&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）大小不同：
get请求有大小限制 2k
post请求无大小限制(在HTTP中)，但从PHP的角度，其是有大小限制的8M（php.ini），一般情况下，通常CMS或框架会对上传文件进行2M限制 
2）参数不同：
get请求其参数是追加在url的尾部
post请求其参数是追加在空白行
3）安全方面：
post安全性要高于get请求
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、Ajax中的post请求（Ajax中的post请求六步走）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1）创建ajax对象   xhr=new XMLHttpRequest();
2）初始化Ajax对象   xhr.open(‘post’,url)
3）设置请求头信息    xhr.setRequestHeader(‘content-type’,’application/x-www-form-urlencode’)
4）发送Ajax请求    xhr.send(data)
5）判断与执行   xhr.readyState==4&amp;amp;&amp;amp;xhr.status==200
6）设置回调函数   xhr.onreadystatechange=function(){//步骤5}
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>php数组操作方法  </title>
   <link href="http://127.0.0.1/php/2014/08/12/php/"/>
   <updated>2014-08-12T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/12/php</id>
   <content type="html">&lt;p&gt;一、数组操作的基本函数&lt;/p&gt;

&lt;p&gt;数组的键名和值&lt;/p&gt;

&lt;p&gt;array_values($arr);获得数组的值&lt;/p&gt;

&lt;p&gt;array_keys($arr);获得数组的键名&lt;/p&gt;

&lt;p&gt;array_flip($arr);数组中的值与键名互换（如果有重复前面的会被后面的覆盖）&lt;/p&gt;

&lt;p&gt;in_array(“apple”,$arr);在数组中检索apple&lt;/p&gt;

&lt;p&gt;array_search(“apple”,$arr);在数组中检索apple ，如果存在返回键名&lt;/p&gt;

&lt;p&gt;array_key_exists(“apple”,$arr);检索给定的键名是否存在数组中&lt;/p&gt;

&lt;p&gt;isset($arr[apple]):检索给定的键名是否存在数组中&lt;/p&gt;

&lt;p&gt;数组的内部指针&lt;/p&gt;

&lt;p&gt;current($arr);返回数组中的当前单元&lt;/p&gt;

&lt;p&gt;pos($arr);返回数组中的当前单元&lt;/p&gt;

&lt;p&gt;key($arr);返回数组中当前单元的键名&lt;/p&gt;

&lt;p&gt;prev($arr);将数组中的内部指针倒回一位&lt;/p&gt;

&lt;p&gt;next($arr);将数组中的内部指针向前移动一位&lt;/p&gt;

&lt;p&gt;end($arr);将数组中的内部指针指向最后一个单元&lt;/p&gt;

&lt;p&gt;reset($arr;将数组中的内部指针指向第一个单元&lt;/p&gt;

&lt;p&gt;each($arr);将返回数组当前元素的一个键名/值的构造数组，并使数组指针向前移动一位&lt;/p&gt;

&lt;p&gt;list($key,$value)=each($arr);获得数组当前元素的键名和值&lt;/p&gt;

&lt;p&gt;数组和变量之间的转换&lt;/p&gt;

&lt;p&gt;extract($arr);用于把数组中的元素转换成变量导入到当前文件中，键名当作变量名，值作为变量值&lt;/p&gt;

&lt;p&gt;注：（第二个参数很重要，可以看手册使用）使用方法 echo $a;&lt;/p&gt;

&lt;p&gt;compact(var1,var2,var3);用给定的变量名创建一个数组&lt;/p&gt;

&lt;p&gt;二、数组的分段和填充&lt;/p&gt;

&lt;p&gt;数组的分段&lt;/p&gt;

&lt;p&gt;array_slice($arr,0,3);可以将数组中的一段取出，此函数忽略键名&lt;/p&gt;

&lt;p&gt;array_splice($arr,0,3，array(“black”,”maroon”));可以将数组中的一段取出，与上个函数不同在于返回的序列从原数组中删除&lt;/p&gt;

&lt;p&gt;分割多个数组&lt;/p&gt;

&lt;p&gt;array_chunk($arr,3,TRUE);可以将一个数组分割成多个，TRUE为保留原数组的键名&lt;/p&gt;

&lt;p&gt;数组的填充&lt;/p&gt;

&lt;p&gt;array_pad($arr,5,’x’);将一个数组填补到制定长度&lt;/p&gt;

&lt;p&gt;三、数组与栈&lt;/p&gt;

&lt;p&gt;array_push($arr,”apple”,”pear”);将一个或多个元素压入数组栈的末尾（入栈），返回入栈元素的个数&lt;/p&gt;

&lt;p&gt;array_pop($arr);将数组栈的最后一个元素弹出（出栈）&lt;/p&gt;

&lt;p&gt;四、数组与列队&lt;/p&gt;

&lt;p&gt;array_shift($arr);数组中的第一个元素移出并作为结果返回（数组长度减1，其他元素向前移动一位，数字键名改为从零技术，文字键名不变）&lt;/p&gt;

&lt;p&gt;array_unshift($arr,”a”,array(1,2));在数组的开头插入一个或多个元素&lt;/p&gt;

&lt;p&gt;五、回调函数&lt;/p&gt;

&lt;p&gt;array_walk($arr,’function’,’words’);使用用户函数对数组中的每个成员进行处理（第三个参数传递给回调函数function）&lt;/p&gt;

&lt;p&gt;array_mpa(“function”,$arr1,$arr2);可以处理多个数组（当使用两个或更多数组时，他们的长度应该相同）&lt;/p&gt;

&lt;p&gt;array_filter($arr,”function”);使用回调函数过滤数组中的每个元素，如果回调函数为TRUE，数组的当前元素会被包含在返回的结果数组中，数组的键名保留不变&lt;/p&gt;

&lt;p&gt;array_reduce($arr,”function”,”&lt;em&gt;”);转化为单值函数（&lt;/em&gt;为数组的第一个值）&lt;/p&gt;

&lt;p&gt;六、数组的排序&lt;/p&gt;

&lt;p&gt;通过元素值对数组排序&lt;/p&gt;

&lt;p&gt;sort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序&lt;/p&gt;

&lt;p&gt;rsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）忽略键名的数组排序&lt;/p&gt;

&lt;p&gt;usort($arr,”function”);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）忽略键名的数组排序&lt;/p&gt;

&lt;p&gt;asort($arr);由小到大的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序&lt;/p&gt;

&lt;p&gt;arsort($arr);由大到小的顺序排序（第二个参数为按什么方式排序）保留键名的数组排序&lt;/p&gt;

&lt;p&gt;uasort($arr,”function”);使用用户自定义的比较函数对数组中的值进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）保留键名的数组排序&lt;/p&gt;

&lt;p&gt;通过键名对数组排序&lt;/p&gt;

&lt;p&gt;ksort($arr);按照键名正序排序&lt;/p&gt;

&lt;p&gt;krsort($arr);按照键名逆序排序&lt;/p&gt;

&lt;p&gt;uksort($arr,”function”);使用用户自定义的比较函数对数组中的键名进行排序（function中有两个参数，0表示相等，正数表示第一个大于第二个，负数表示第一个小于第二个）&lt;/p&gt;

&lt;p&gt;自然排序法排序&lt;/p&gt;

&lt;p&gt;natsort($arr);自然排序（忽略键名）&lt;/p&gt;

&lt;p&gt;natcasesort($arr);自然排序（忽略大小写，忽略键名）&lt;/p&gt;

&lt;p&gt;七、数组的计算&lt;/p&gt;

&lt;p&gt;数组元素的求和&lt;/p&gt;

&lt;p&gt;array_sum($arr);对数组内部的所有元素做求和运算&lt;/p&gt;

&lt;p&gt;数组的合并&lt;/p&gt;

&lt;p&gt;array_merge($arr1,$arr2);合并两个或多个数组（相同的字符串键名，后面的覆盖前面的，相同的数字键名，后面的不会做覆盖操作，而是附加到后面）&lt;/p&gt;

&lt;p&gt;“+”$arr1+$arr2;对于相同的键名只保留后一个&lt;/p&gt;

&lt;p&gt;array_merge_recursive($arr1,$arr2); 递归合并操作，如果数组中有相同的字符串键名，这些值将被合并到一个数组中去。如果一个值本身是一个数组，将按照相应的键名把它合并为另一个数组。当数组 具有相同的数组键名时，后一个值将不会覆盖原来的值，而是附加到后面&lt;/p&gt;

&lt;p&gt;数组的差集&lt;/p&gt;

&lt;p&gt;array_diff($arr1,$arr2);返回差集结果数组&lt;/p&gt;

&lt;p&gt;array_diff_assoc($arr1,$arr2,$arr3);返回差集结果数组，键名也做比较&lt;/p&gt;

&lt;p&gt;数组的交集&lt;/p&gt;

&lt;p&gt;array_intersect($arr1,$arr2);返回交集结果数组&lt;/p&gt;

&lt;p&gt;array_intersect_assoc($arr1,$arr2);返回交集结果数组，键名也做比较&lt;/p&gt;

&lt;p&gt;八、其他的数组函数&lt;/p&gt;

&lt;p&gt;range(0,12);创建一个包含指定范围单元的数组&lt;/p&gt;

&lt;p&gt;array_unique($arr);移除数组中重复的值，新的数组中会保留原始的键名&lt;/p&gt;

&lt;p&gt;array_reverse($arr,TRUE);返回一个单元顺序与原数组相反的数组，如果第二个参数为TRUE保留原来的键名&lt;/p&gt;

&lt;p&gt;//srand((float)microtime()*10000000); 随机种子触发器&lt;/p&gt;

&lt;p&gt;array_rand($arr,2);从数组中随机取出一个或 多个元素&lt;/p&gt;

&lt;p&gt;shuffle($arr);将数组的顺序打乱&lt;/p&gt;

&lt;p&gt;本类函数允许用多种方法来操作数组和与之交互。数组的本质是储存，管理和操作一组变量。&lt;/p&gt;

&lt;p&gt;PHP 支持一维和多维数组，可以是用户创建或由另一个函数创建。有一些特定的数据库处理函数可以从数据库查询中生成数组，还有一些函数返回数组。&lt;/p&gt;

&lt;p&gt;array_change_key_case — 返回字符串键名全为小写或大写的数组&lt;/p&gt;

&lt;p&gt;array_chunk — 将一个数组分割成多个&lt;/p&gt;

&lt;p&gt;array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值&lt;/p&gt;

&lt;p&gt;array_count_values — 统计数组中所有的值出现的次数&lt;/p&gt;

&lt;p&gt;array_diff_assoc — 带索引检查计算数组的差集&lt;/p&gt;

&lt;p&gt;array_diff_key — 使用键名比较计算数组的差集&lt;/p&gt;

&lt;p&gt;array_diff_uassoc — 用用户提供的回调函数做索引检查来计算数组的差集&lt;/p&gt;

&lt;p&gt;array_diff_ukey — 用回调函数对键名比较计算数组的差集&lt;/p&gt;

&lt;p&gt;array_diff — 计算数组的差集&lt;/p&gt;

&lt;p&gt;array_fill_keys — Fill an array with values, specifying keys&lt;/p&gt;

&lt;p&gt;array_fill — 用给定的值填充数组&lt;/p&gt;

&lt;p&gt;array_filter — 用回调函数过滤数组中的单元&lt;/p&gt;

&lt;p&gt;array_flip — 交换数组中的键和值&lt;/p&gt;

&lt;p&gt;array_intersect_assoc — 带索引检查计算数组的交集&lt;/p&gt;

&lt;p&gt;array_intersect_key — 使用键名比较计算数组的交集&lt;/p&gt;

&lt;p&gt;array_intersect_uassoc — 带索引检查计算数组的交集，用回调函数比较索引&lt;/p&gt;

&lt;p&gt;array_intersect_ukey — 用回调函数比较键名来计算数组的交集&lt;/p&gt;

&lt;p&gt;array_intersect — 计算数组的交集&lt;/p&gt;

&lt;p&gt;array_key_exists — 检查给定的键名或索引是否存在于数组中&lt;/p&gt;

&lt;p&gt;array_keys — 返回数组中所有的键名&lt;/p&gt;

&lt;p&gt;array_map — 将回调函数作用到给定数组的单元上&lt;/p&gt;

&lt;p&gt;array_merge_recursive — 递归地合并一个或多个数组&lt;/p&gt;

&lt;p&gt;array_merge — 合并一个或多个数组&lt;/p&gt;

&lt;p&gt;array_multisort — 对多个数组或多维数组进行排序&lt;/p&gt;

&lt;p&gt;array_pad — 用值将数组填补到指定长度&lt;/p&gt;

&lt;p&gt;array_pop — 将数组最后一个单元弹出（出栈）&lt;/p&gt;

&lt;p&gt;array_product — 计算数组中所有值的乘积&lt;/p&gt;

&lt;p&gt;array_push — 将一个或多个单元压入数组的末尾（入栈）&lt;/p&gt;

&lt;p&gt;array_rand — 从数组中随机取出一个或多个单元&lt;/p&gt;

&lt;p&gt;array_reduce — 用回调函数迭代地将数组简化为单一的值&lt;/p&gt;

&lt;p&gt;array_reverse — 返回一个单元顺序相反的数组&lt;/p&gt;

&lt;p&gt;array_search — 在数组中搜索给定的值，如果成功则返回相应的键名&lt;/p&gt;

&lt;p&gt;array_shift — 将数组开头的单元移出数组&lt;/p&gt;

&lt;p&gt;array_slice — 从数组中取出一段&lt;/p&gt;

&lt;p&gt;array_splice — 把数组中的一部分去掉并用其它值取代&lt;/p&gt;

&lt;p&gt;array_sum — 计算数组中所有值的和&lt;/p&gt;

&lt;p&gt;array_udiff_assoc — 带索引检查计算数组的差集，用回调函数比较数据&lt;/p&gt;

&lt;p&gt;array_udiff_uassoc — 带索引检查计算数组的差集，用回调函数比较数据和索引&lt;/p&gt;

&lt;p&gt;array_udiff — 用回调函数比较数据来计算数组的差集&lt;/p&gt;

&lt;p&gt;array_uintersect_assoc — 带索引检查计算数组的交集，用回调函数比较数据&lt;/p&gt;

&lt;p&gt;array_uintersect_uassoc — 带索引检查计算数组的交集，用回调函数比较数据和索引&lt;/p&gt;

&lt;p&gt;array_uintersect — 计算数组的交集，用回调函数比较数据&lt;/p&gt;

&lt;p&gt;array_unique — 移除数组中重复的值&lt;/p&gt;

&lt;p&gt;array_unshift — 在数组开头插入一个或多个单元&lt;/p&gt;

&lt;p&gt;array_values — 返回数组中所有的值&lt;/p&gt;

&lt;p&gt;array_walk_recursive — 对数组中的每个成员递归地应用用户函数&lt;/p&gt;

&lt;p&gt;array_walk — 对数组中的每个成员应用用户函数&lt;/p&gt;

&lt;p&gt;array — 新建一个数组&lt;/p&gt;

&lt;p&gt;arsort — 对数组进行逆向排序并保持索引关系&lt;/p&gt;

&lt;p&gt;asort — 对数组进行排序并保持索引关系&lt;/p&gt;

&lt;p&gt;compact — 建立一个数组，包括变量名和它们的值&lt;/p&gt;

&lt;p&gt;count — 计算数组中的单元数目或对象中的属性个数&lt;/p&gt;

&lt;p&gt;current — 返回数组中的当前单元&lt;/p&gt;

&lt;p&gt;each — 返回数组中当前的键／值对并将数组指针向前移动一步&lt;/p&gt;

&lt;p&gt;end — 将数组的内部指针指向最后一个单元&lt;/p&gt;

&lt;p&gt;extract — 从数组中将变量导入到当前的符号表&lt;/p&gt;

&lt;p&gt;in_array — 检查数组中是否存在某个值&lt;/p&gt;

&lt;p&gt;key — 从关联数组中取得键名&lt;/p&gt;

&lt;p&gt;krsort — 对数组按照键名逆向排序&lt;/p&gt;

&lt;p&gt;ksort — 对数组按照键名排序&lt;/p&gt;

&lt;p&gt;list — 把数组中的值赋给一些变量&lt;/p&gt;

&lt;p&gt;natcasesort — 用“自然排序”算法对数组进行不区分大小写字母的排序&lt;/p&gt;

&lt;p&gt;natsort — 用“自然排序”算法对数组排序&lt;/p&gt;

&lt;p&gt;next — 将数组中的内部指针向前移动一位&lt;/p&gt;

&lt;p&gt;pos — current() 的别名&lt;/p&gt;

&lt;p&gt;prev — 将数组的内部指针倒回一位&lt;/p&gt;

&lt;p&gt;range — 建立一个包含指定范围单元的数组&lt;/p&gt;

&lt;p&gt;reset — 将数组的内部指针指向第一个单元&lt;/p&gt;

&lt;p&gt;rsort — 对数组逆向排序&lt;/p&gt;

&lt;p&gt;shuffle — 将数组打乱&lt;/p&gt;

&lt;p&gt;sizeof — count() 的别名&lt;/p&gt;

&lt;p&gt;sort — 对数组排序&lt;/p&gt;

&lt;p&gt;uasort — 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联&lt;/p&gt;

&lt;p&gt;uksort — 使用用户自定义的比较函数对数组中的键名进行排序&lt;/p&gt;

&lt;p&gt;usort — 使用用户自定义的比较函数对数组中的值进行排序&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>linux 命令  </title>
   <link href="http://127.0.0.1/linux/2014/08/11/php/"/>
   <updated>2014-08-11T00:00:00+08:00</updated>
   <id>http://127.0.0.1/linux/2014/08/11/php</id>
   <content type="html">&lt;p&gt;重启网卡：service network start&lt;/p&gt;

&lt;p&gt;查询IP地址：ifconfig&lt;/p&gt;

&lt;p&gt;关闭防火墙：iptables -F&lt;/p&gt;

&lt;p&gt;查看防火墙：iptables -L&lt;/p&gt;

&lt;p&gt;关闭安全机制：setneforce 0&lt;/p&gt;

&lt;p&gt;终止本层程序：Ctrl+C&lt;/p&gt;

&lt;p&gt;清屏：Ctrl+L&lt;/p&gt;

&lt;p&gt;查看配置：setup&lt;/p&gt;

&lt;p&gt;打开之后可以别人可以查看你的信息 service sshd&lt;/p&gt;

&lt;p&gt;重启sshd   service sshd restart&lt;/p&gt;

&lt;p&gt;关机命令：1.poweroff   2.shutdown  3.halt 0&lt;/p&gt;

&lt;p&gt;重启：reboot&lt;/p&gt;

&lt;p&gt;查看当前目录：pwd&lt;/p&gt;

&lt;p&gt;删除一个目录： rm -r  a.PHP(请求是否删除)   rm  -rf  a.php 直接删除&lt;/p&gt;

&lt;p&gt;移动 mv&lt;/p&gt;

&lt;p&gt;查看一个文件里的内容  cat&lt;/p&gt;

&lt;p&gt;离开终端  exit&lt;/p&gt;

&lt;p&gt;显示日期 date&lt;/p&gt;

&lt;p&gt;查看2016年日期   cal 2016&lt;/p&gt;

&lt;p&gt;创建目录  mkdir&lt;/p&gt;

&lt;p&gt;建立文件  touch&lt;/p&gt;

&lt;p&gt;网络链接不到的原因：1.网线没有插好  2.网卡有没有配置好，有没有与客户端在同一网端上 3.查看防火墙有没有关闭&lt;/p&gt;

&lt;p&gt;只查看本目录 ll -d  home/&lt;/p&gt;

&lt;p&gt;图形化运行级别：文字化是3   单用户是1 关机的级别是0&lt;/p&gt;

&lt;p&gt;偷别人Linux中的东西  scp  -r /boot root @192.168.1.81:/tmp&lt;/p&gt;

&lt;p&gt;查找： find / -name “aa.txt”&lt;/p&gt;

&lt;p&gt;查询目录位置 locate ifcfg-eth0&lt;/p&gt;

&lt;p&gt;更新文件库 updatedb&lt;/p&gt;

&lt;p&gt;解压 gzip -9 /boot/*&lt;/p&gt;

&lt;p&gt;解压 gzip -d /boot/*&lt;/p&gt;

&lt;p&gt;统计文件行数  wc -l aa.txt&lt;/p&gt;

&lt;p&gt;统计文件字节数  wc -c&lt;/p&gt;

&lt;p&gt;统计文件单词数  wc -w&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;管道 cat  aa.txt&lt;/td&gt;
      &lt;td&gt;wc -L&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;过滤 cat aa.txt&lt;/td&gt;
      &lt;td&gt;grep (单词)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;打包 tar -cvf 1.tar(打包之后的名字)  aa.txt bb.txt cc.txt(需要打包的文件)&lt;/p&gt;

&lt;p&gt;解压 tar -xvf  1.tar -c /hunan&lt;/p&gt;

&lt;p&gt;打包之后再压缩 tar -zvcf 1.tar.gz aa.txt bb.txt cc.txt&lt;/p&gt;

&lt;p&gt;撤销 :U&lt;/p&gt;

&lt;p&gt;复制 yy&lt;/p&gt;

&lt;p&gt;粘贴 p&lt;/p&gt;

&lt;p&gt;剪切 dd&lt;/p&gt;

&lt;p&gt;替换 :s aaa/ppp 将aaa替换成ppp&lt;/p&gt;

&lt;p&gt;连接别人的电脑 ssh+IP地址&lt;/p&gt;

&lt;p&gt;查找前5行 head -5 aa.txt&lt;/p&gt;

&lt;p&gt;挂载：mount /dev/cdrom /mnt&lt;/p&gt;

&lt;p&gt;linux中打开yum搭建&lt;/p&gt;

&lt;p&gt;1.vim /etc/yum.repos.d&lt;/p&gt;

&lt;p&gt;2.[C6.0-base]&lt;/p&gt;

&lt;p&gt;name=haoyun&lt;/p&gt;

&lt;p&gt;baseurl=file:///mnt&lt;/p&gt;

&lt;p&gt;gpgcheck=0&lt;/p&gt;

&lt;p&gt;enabled=1&lt;/p&gt;

&lt;p&gt;3.yum clean all  清除yum缓存&lt;/p&gt;

&lt;p&gt;4.yum list&lt;/p&gt;

&lt;p&gt;安装apache.php.MySQL&lt;/p&gt;

&lt;p&gt;yum install httpd*&lt;/p&gt;

&lt;p&gt;yum install mysqld*&lt;/p&gt;

&lt;p&gt;yum install php*&lt;/p&gt;

&lt;p&gt;卸载 apache .php.mysql&lt;/p&gt;

&lt;p&gt;yum remove httpd*&lt;/p&gt;

&lt;p&gt;yum remove php*&lt;/p&gt;

&lt;p&gt;yum remove mysqld*&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;查询php  ls&lt;/td&gt;
      &lt;td&gt;grep php&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;源码安转：&lt;/p&gt;

&lt;p&gt;1.安装gcc 用yum&lt;/p&gt;

&lt;p&gt;2.解压程序&lt;/p&gt;

&lt;p&gt;3.进入解压程序&lt;/p&gt;

&lt;p&gt;./configure  运行配置工具&lt;/p&gt;

&lt;p&gt;make 编译&lt;/p&gt;

&lt;p&gt;make install 安转&lt;/p&gt;

&lt;p&gt;开机默认加载文件 cd /etc/rc/d/rc/local   vim /etc/rc.d/rc.loca&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> 在CI框架中如何发送email？ </title>
   <link href="http://127.0.0.1/php/2014/08/10/php/"/>
   <updated>2014-08-10T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/10/php</id>
   <content type="html">&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function sendemail()  
{     
    $config = array(&#39;protocol&#39;=&amp;gt;&#39;smtp&#39;,  
        &#39;smtp_host&#39; =&amp;gt; &#39;smtp.163.com&#39;,  
        &#39;smtp_user&#39; =&amp;gt; &#39;邮箱的用户名&#39;,  
        &#39;smtp_pass&#39; =&amp;gt; &#39;自身邮箱密码&#39;,  
        &#39;smtp_port&#39; =&amp;gt; &#39;25&#39;,  
        &#39;_smtp_auth&#39; =&amp;gt; TRUE,  
        &#39;wordwrap&#39; =&amp;gt; TRUE,  
        &#39;charset&#39; =&amp;gt; &#39;iso-8859-1&#39;  
  
    );  
    $this-&amp;gt;load-&amp;gt;library(&#39;email&#39;, $config);  
    $this-&amp;gt;email-&amp;gt;from(&#39;用户邮箱@163.com&#39;, &#39;用户&#39;);  
    $this-&amp;gt;email-&amp;gt;to(&#39;发送到哪个邮箱@163.com&#39;);  
    $this-&amp;gt;email-&amp;gt;subject(&#39;文件标题&#39;);  
    $this-&amp;gt;email-&amp;gt;message(&#39;文件内容&#39;);  
    $this-&amp;gt;email-&amp;gt;send();  
}  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>php在原生代码中如何简单快速的发送email  </title>
   <link href="http://127.0.0.1/php/2014/08/09/php/"/>
   <updated>2014-08-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/09/php</id>
   <content type="html">&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
header(&quot;content-type:text/html;charset=utf-8&quot;);  
include(&quot;class.phpmailer.php&quot;);  
include(&quot;class.smtp.php&quot;);  
$mail = new PHPMailer();  
$mail-&amp;gt;IsSMTP(); // send via SMTP  
$mail-&amp;gt;Host = &quot;smtp.163.com&quot;; // SMTP servers  
$mail-&amp;gt;SMTPAuth = true; // turn on SMTP authentication  
$mail-&amp;gt;Username = &quot;邮箱用户名&quot;; // SMTP username 注意：普通邮件认证不需要加 @域名  
$mail-&amp;gt;Password = &quot;邮箱密码&quot;; // SMTP password  
$mail-&amp;gt;From = &quot;发件人邮箱@163.com&quot;; // 发件人邮箱  
$mail-&amp;gt;FromName = &quot;发件人&quot;; // 发件人  
$mail-&amp;gt;CharSet = &quot;utf-8&quot;; // 这里指定字符集！  
$mail-&amp;gt;Encoding = &quot;base64&quot;;  
$mail-&amp;gt;AddAddress(&quot;收件人邮箱@163.com&quot;,&quot;toyou&quot;); // 收件人邮箱和姓名  
$mail-&amp;gt;AddReplyTo(&quot;收件人地址@163.com&quot;,&quot;wo&quot;);  
//$mail-&amp;gt;WordWrap = 50; // set word wrap 换行字数  
//$mail-&amp;gt;AddAttachment(&quot;/var/tmp/file.tar.gz&quot;); // attachment 附件  
//$mail-&amp;gt;AddAttachment(&quot;/tmp/image.jpg&quot;, &quot;new.jpg&quot;);  
$mail-&amp;gt;IsHTML(true); // send as HTML  
// 邮件主题  
$subject=&quot;邮件标题&quot;;  
$mail-&amp;gt;Subject = $subject;  
// 邮件内容  
$mail-&amp;gt;Body = &quot;  
邮件发送的内容  
&quot;;  
$mail-&amp;gt;AltBody =&quot;text/html&quot;;  
if(!$mail-&amp;gt;Send())  
{  
    echo &quot;邮件发送有误 &amp;lt;p&amp;gt;&quot;;  
    echo &quot;邮件错误信息: &quot; . $mail-&amp;gt;ErrorInfo;  
    exit;  
}  
else {  
    echo &quot;邮件发送成功!&amp;lt;br /&amp;gt;&quot;;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这里你如果想使用原生代码进行发送email，那么在这里的前提是必须要引用class.smtp.PHP和class.phpmailer.php这两个类。否则则无法使用&lt;/p&gt;

&lt;p&gt;class.phpmailer.php访问这个网站，复制代码，重新建立一个class.phpmailer.php&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://blog.csdn.net/haoyunyun888/article/details/51245003  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class.smtp.php复制这个类中代码重新建立一个class.smtp.com&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
/*~ class.smtp.php  
.---------------------------------------------------------------------------.  
|  Software: PHPMailer - PHP email class                                    |  
|   Version: 5.2.2                                                          |  
|      Site: https://code.google.com/a/apache-extras.org/p/phpmailer/       |  
| ------------------------------------------------------------------------- |  
|     Admin: Jim Jagielski (project admininistrator)                        |  
|   Authors: Andy Prevost (codeworxtech) codeworxtech@users.sourceforge.net |  
|          : Marcus Bointon (coolbru) coolbru@users.sourceforge.net         |  
|          : Jim Jagielski (jimjag) jimjag@gmail.com                        |  
|   Founder: Brent R. Matzelle (original founder)                           |  
| Copyright (c) 2010-2012, Jim Jagielski. All Rights Reserved.              |  
| Copyright (c) 2004-2009, Andy Prevost. All Rights Reserved.               |  
| Copyright (c) 2001-2003, Brent R. Matzelle                                |  
| ------------------------------------------------------------------------- |  
|   License: Distributed under the Lesser General Public License (LGPL)     |  
|            http://www.gnu.org/copyleft/lesser.html                        |  
| This program is distributed in the hope that it will be useful - WITHOUT  |  
| ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     |  
| FITNESS FOR A PARTICULAR PURPOSE.                                         |  
&#39;---------------------------------------------------------------------------&#39;  
*/  
  
/**  
 * PHPMailer - PHP SMTP email transport class  
 * NOTE: Designed for use with PHP version 5 and up  
 * @package PHPMailer  
 * @author Andy Prevost  
 * @author Marcus Bointon  
 * @copyright 2004 - 2008 Andy Prevost  
 * @author Jim Jagielski  
 * @copyright 2010 - 2012 Jim Jagielski  
 * @license http://www.gnu.org/copyleft/lesser.html Distributed under the Lesser General Public License (LGPL)  
 */  
  
/**  
 * PHP RFC821 SMTP client  
 *  
 * Implements all the RFC 821 SMTP commands except TURN which will always return a not implemented error.  
 * SMTP also provides some utility methods for sending mail to an SMTP server.  
 * @author Chris Ryan  
 * @package PHPMailer  
 */  
  
class SMTP {  
  /**  
   *  SMTP server port  
   *  @var int  
   */  
  public $SMTP_PORT = 25;  
  
  /**  
   *  SMTP reply line ending (don&#39;t change)  
   *  @var string  
   */  
  public $CRLF = &quot;\r\n&quot;;  
  
  /**  
   *  Sets whether debugging is turned on  
   *  @var bool  
   */  
  public $do_debug;       // the level of debug to perform  
  
  /**  
   * Sets the function/method to use for debugging output.  
   * Right now we only honor &quot;echo&quot; or &quot;error_log&quot;  
   * @var string  
   */  
  public $Debugoutput     = &quot;echo&quot;;  
  
  /**  
   *  Sets VERP use on/off (default is off)  
   *  @var bool  
   */  
  public $do_verp = false;  
  
  /**  
   * Sets the SMTP timeout value for reads, in seconds  
   * @var int  
   */  
  public $Timeout         = 15;  
  
  /**  
   * Sets the SMTP timelimit value for reads, in seconds  
   * @var int  
   */  
  public $Timelimit       = 30;  
  
  /**  
   * Sets the SMTP PHPMailer Version number  
   * @var string  
   */  
  public $Version         = &#39;5.2.2&#39;;  
  
  /////////////////////////////////////////////////  
  // PROPERTIES, PRIVATE AND PROTECTED  
  /////////////////////////////////////////////////  
  
  /**  
   * @var resource The socket to the server  
   */  
  private $smtp_conn;  
  /**  
   * @var string Error message, if any, for the last call  
   */  
  private $error;  
  /**  
   * @var string The reply the server sent to us for HELO  
   */  
  private $helo_rply;  
  
  /**  
   * Outputs debugging info via user-defined method  
   * @param string $str  
   */  
  private function edebug($str) {  
    if ($this-&amp;gt;Debugoutput == &quot;error_log&quot;) {  
        error_log($str);  
    } else {  
        echo $str;  
    }  
  }  
  
  /**  
   * Initialize the class so that the data is in a known state.  
   * @access public  
   * @return SMTP  
   */  
  public function __construct() {  
    $this-&amp;gt;smtp_conn = 0;  
    $this-&amp;gt;error = null;  
    $this-&amp;gt;helo_rply = null;  
  
    $this-&amp;gt;do_debug = 0;  
  }  
  
  /////////////////////////////////////////////////  
  // CONNECTION FUNCTIONS  
  /////////////////////////////////////////////////  
  
  /**  
   * Connect to the server specified on the port specified.  
   * If the port is not specified use the default SMTP_PORT.  
   * If tval is specified then a connection will try and be  
   * established with the server for that number of seconds.  
   * If tval is not specified the default is 30 seconds to  
   * try on the connection.  
   *  
   * SMTP CODE SUCCESS: 220  
   * SMTP CODE FAILURE: 421  
   * @access public  
   * @param string $host  
   * @param int $port  
   * @param int $tval  
   * @return bool  
   */  
  public function Connect($host, $port = 0, $tval = 30) {  
    // set the error val to null so there is no confusion  
    $this-&amp;gt;error = null;  
  
    // make sure we are __not__ connected  
    if($this-&amp;gt;connected()) {  
      // already connected, generate error  
      $this-&amp;gt;error = array(&quot;error&quot; =&amp;gt; &quot;Already connected to a server&quot;);  
      return false;  
    }  
  
    if(empty($port)) {  
      $port = $this-&amp;gt;SMTP_PORT;  
    }  
  
    // connect to the smtp server  
    $this-&amp;gt;smtp_conn = @fsockopen($host,    // the host of the server  
                                 $port,    // the port to use  
                                 $errno,   // error number if any  
                                 $errstr,  // error message if any  
                                 $tval);   // give up after ? secs  
    // verify we connected properly  
    if(empty($this-&amp;gt;smtp_conn)) {  
      $this-&amp;gt;error = array(&quot;error&quot; =&amp;gt; &quot;Failed to connect to server&quot;,  
                           &quot;errno&quot; =&amp;gt; $errno,  
                           &quot;errstr&quot; =&amp;gt; $errstr);  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: $errstr ($errno)&quot; . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
  
    // SMTP server can take longer to respond, give longer timeout for first read  
    // Windows does not have support for this timeout function  
    if(substr(PHP_OS, 0, 3) != &quot;WIN&quot;) {  
     $max = ini_get(&#39;max_execution_time&#39;);  
     if ($max != 0 &amp;amp;&amp;amp; $tval &amp;gt; $max) { // don&#39;t bother if unlimited  
      @set_time_limit($tval);  
     }  
     stream_set_timeout($this-&amp;gt;smtp_conn, $tval, 0);  
    }  
  
    // get any announcement  
    $announce = $this-&amp;gt;get_lines();  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $announce . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    return true;  
  }  
  
  /**  
   * Initiate a TLS communication with the server.  
   *  
   * SMTP CODE 220 Ready to start TLS  
   * SMTP CODE 501 Syntax error (no parameters allowed)  
   * SMTP CODE 454 TLS not available due to temporary reason  
   * @access public  
   * @return bool success  
   */  
  public function StartTLS() {  
    $this-&amp;gt;error = null; # to avoid confusion  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(&quot;error&quot; =&amp;gt; &quot;Called StartTLS() without being connected&quot;);  
      return false;  
    }  
  
    fputs($this-&amp;gt;smtp_conn,&quot;STARTTLS&quot; . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 220) {  
      $this-&amp;gt;error =  
         array(&quot;error&quot;     =&amp;gt; &quot;STARTTLS not accepted from server&quot;,  
               &quot;smtp_code&quot; =&amp;gt; $code,  
               &quot;smtp_msg&quot;  =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
  
    // Begin encrypted connection  
    if(!stream_socket_enable_crypto($this-&amp;gt;smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {  
      return false;  
    }  
  
    return true;  
  }  
  
  /**  
   * Performs SMTP authentication.  Must be run after running the  
   * Hello() method.  Returns true if successfully authenticated.  
   * @access public  
   * @param string $username  
   * @param string $password  
   * @param string $authtype  
   * @param string $realm  
   * @param string $workstation  
   * @return bool  
   */  
  public function Authenticate($username, $password, $authtype=&#39;LOGIN&#39;, $realm=&#39;&#39;, $workstation=&#39;&#39;) {  
    if (empty($authtype)) {  
      $authtype = &#39;LOGIN&#39;;  
    }  
  
    switch ($authtype) {  
      case &#39;PLAIN&#39;:  
        // Start authentication  
        fputs($this-&amp;gt;smtp_conn,&quot;AUTH PLAIN&quot; . $this-&amp;gt;CRLF);  
      
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
      
        if($code != 334) {  
          $this-&amp;gt;error =  
            array(&quot;error&quot; =&amp;gt; &quot;AUTH not accepted from server&quot;,  
                  &quot;smtp_code&quot; =&amp;gt; $code,  
                  &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
          if($this-&amp;gt;do_debug &amp;gt;= 1) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
          }  
          return false;  
        }  
        // Send encoded username and password  
        fputs($this-&amp;gt;smtp_conn, base64_encode(&quot;\0&quot;.$username.&quot;\0&quot;.$password) . $this-&amp;gt;CRLF);  
  
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
      
        if($code != 235) {  
          $this-&amp;gt;error =  
            array(&quot;error&quot; =&amp;gt; &quot;Authentication not accepted from server&quot;,  
                  &quot;smtp_code&quot; =&amp;gt; $code,  
                  &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
          if($this-&amp;gt;do_debug &amp;gt;= 1) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
          }  
          return false;  
        }  
        break;  
      case &#39;LOGIN&#39;:  
        // Start authentication  
        fputs($this-&amp;gt;smtp_conn,&quot;AUTH LOGIN&quot; . $this-&amp;gt;CRLF);  
      
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
      
        if($code != 334) {  
          $this-&amp;gt;error =  
            array(&quot;error&quot; =&amp;gt; &quot;AUTH not accepted from server&quot;,  
                  &quot;smtp_code&quot; =&amp;gt; $code,  
                  &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
          if($this-&amp;gt;do_debug &amp;gt;= 1) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
          }  
          return false;  
        }  
      
        // Send encoded username  
        fputs($this-&amp;gt;smtp_conn, base64_encode($username) . $this-&amp;gt;CRLF);  
      
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
      
        if($code != 334) {  
          $this-&amp;gt;error =  
            array(&quot;error&quot; =&amp;gt; &quot;Username not accepted from server&quot;,  
                  &quot;smtp_code&quot; =&amp;gt; $code,  
                  &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
          if($this-&amp;gt;do_debug &amp;gt;= 1) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
          }  
          return false;  
        }  
      
        // Send encoded password  
        fputs($this-&amp;gt;smtp_conn, base64_encode($password) . $this-&amp;gt;CRLF);  
      
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
      
        if($code != 235) {  
          $this-&amp;gt;error =  
            array(&quot;error&quot; =&amp;gt; &quot;Password not accepted from server&quot;,  
                  &quot;smtp_code&quot; =&amp;gt; $code,  
                  &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
          if($this-&amp;gt;do_debug &amp;gt;= 1) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
          }  
          return false;  
        }  
        break;  
      case &#39;NTLM&#39;:  
        /*  
         * ntlm_sasl_client.php  
         ** Bundled with Permission  
         **  
         ** How to telnet in windows: http://technet.microsoft.com/en-us/library/aa995718%28EXCHG.65%29.aspx  
         ** PROTOCOL Documentation http://curl.haxx.se/rfc/ntlm.html#ntlmSmtpAuthentication  
         */  
        require_once(&#39;ntlm_sasl_client.php&#39;);  
        $temp = new stdClass();  
        $ntlm_client = new ntlm_sasl_client_class;  
        if(! $ntlm_client-&amp;gt;Initialize($temp)){//let&#39;s test if every function its available  
            $this-&amp;gt;error = array(&quot;error&quot; =&amp;gt; $temp-&amp;gt;error);  
            if($this-&amp;gt;do_debug &amp;gt;= 1) {  
                $this-&amp;gt;edebug(&quot;You need to enable some modules in your php.ini file: &quot; . $this-&amp;gt;error[&quot;error&quot;] . $this-&amp;gt;CRLF);  
            }  
            return false;  
        }  
        $msg1 = $ntlm_client-&amp;gt;TypeMsg1($realm, $workstation);//msg1  
          
        fputs($this-&amp;gt;smtp_conn,&quot;AUTH NTLM &quot; . base64_encode($msg1) . $this-&amp;gt;CRLF);  
  
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
          
  
        if($code != 334) {  
            $this-&amp;gt;error =  
                array(&quot;error&quot; =&amp;gt; &quot;AUTH not accepted from server&quot;,  
                      &quot;smtp_code&quot; =&amp;gt; $code,  
                      &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
            if($this-&amp;gt;do_debug &amp;gt;= 1) {  
                $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF);  
            }  
            return false;  
        }  
          
        $challange = substr($rply,3);//though 0 based, there is a white space after the 3 digit number....//msg2  
        $challange = base64_decode($challange);  
        $ntlm_res = $ntlm_client-&amp;gt;NTLMResponse(substr($challange,24,8),$password);  
        $msg3 = $ntlm_client-&amp;gt;TypeMsg3($ntlm_res,$username,$realm,$workstation);//msg3  
        // Send encoded username  
        fputs($this-&amp;gt;smtp_conn, base64_encode($msg3) . $this-&amp;gt;CRLF);  
  
        $rply = $this-&amp;gt;get_lines();  
        $code = substr($rply,0,3);  
  
        if($code != 235) {  
            $this-&amp;gt;error =  
                array(&quot;error&quot; =&amp;gt; &quot;Could not authenticate&quot;,  
                      &quot;smtp_code&quot; =&amp;gt; $code,  
                      &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
            if($this-&amp;gt;do_debug &amp;gt;= 1) {  
                $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF);  
            }  
            return false;  
        }  
        break;  
    }  
    return true;  
  }  
  
  /**  
   * Returns true if connected to a server otherwise false  
   * @access public  
   * @return bool  
   */  
  public function Connected() {  
    if(!empty($this-&amp;gt;smtp_conn)) {  
      $sock_status = socket_get_status($this-&amp;gt;smtp_conn);  
      if($sock_status[&quot;eof&quot;]) {  
        // the socket is valid but we are not connected  
        if($this-&amp;gt;do_debug &amp;gt;= 1) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; NOTICE:&quot; . $this-&amp;gt;CRLF . &quot;EOF caught while checking if connected&quot;);  
        }  
        $this-&amp;gt;Close();  
        return false;  
      }  
      return true; // everything looks good  
    }  
    return false;  
  }  
  
  /**  
   * Closes the socket and cleans up the state of the class.  
   * It is not considered good to use this function without  
   * first trying to use QUIT.  
   * @access public  
   * @return void  
   */  
  public function Close() {  
    $this-&amp;gt;error = null; // so there is no confusion  
    $this-&amp;gt;helo_rply = null;  
    if(!empty($this-&amp;gt;smtp_conn)) {  
      // close the connection and cleanup  
      fclose($this-&amp;gt;smtp_conn);  
      $this-&amp;gt;smtp_conn = 0;  
    }  
  }  
  
  /////////////////////////////////////////////////  
  // SMTP COMMANDS  
  /////////////////////////////////////////////////  
  
  /**  
   * Issues a data command and sends the msg_data to the server  
   * finializing the mail transaction. $msg_data is the message  
   * that is to be send with the headers. Each header needs to be  
   * on a single line followed by a &amp;lt;CRLF&amp;gt; with the message headers  
   * and the message body being seperated by and additional &amp;lt;CRLF&amp;gt;.  
   *  
   * Implements rfc 821: DATA &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE INTERMEDIATE: 354  
   *     [data]  
   *     &amp;lt;CRLF&amp;gt;.&amp;lt;CRLF&amp;gt;  
   *     SMTP CODE SUCCESS: 250  
   *     SMTP CODE FAILURE: 552,554,451,452  
   * SMTP CODE FAILURE: 451,554  
   * SMTP CODE ERROR  : 500,501,503,421  
   * @access public  
   * @param string $msg_data  
   * @return bool  
   */  
  public function Data($msg_data) {  
    $this-&amp;gt;error = null; // so no confusion is caused  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
              &quot;error&quot; =&amp;gt; &quot;Called Data() without being connected&quot;);  
      return false;  
    }  
  
    fputs($this-&amp;gt;smtp_conn,&quot;DATA&quot; . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 354) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; &quot;DATA command not accepted from server&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
  
    /* the server is ready to accept data!  
     * according to rfc 821 we should not send more than 1000  
     * including the CRLF  
     * characters on a single line so we will break the data up  
     * into lines by \r and/or \n then if needed we will break  
     * each of those into smaller lines to fit within the limit.  
     * in addition we will be looking for lines that start with  
     * a period &#39;.&#39; and append and additional period &#39;.&#39; to that  
     * line. NOTE: this does not count towards limit.  
     */  
  
    // normalize the line breaks so we know the explode works  
    $msg_data = str_replace(&quot;\r\n&quot;,&quot;\n&quot;,$msg_data);  
    $msg_data = str_replace(&quot;\r&quot;,&quot;\n&quot;,$msg_data);  
    $lines = explode(&quot;\n&quot;,$msg_data);  
  
    /* we need to find a good way to determine is headers are  
     * in the msg_data or if it is a straight msg body  
     * currently I am assuming rfc 822 definitions of msg headers  
     * and if the first field of the first line (&#39;:&#39; sperated)  
     * does not contain a space then it _should_ be a header  
     * and we can process all lines before a blank &quot;&quot; line as  
     * headers.  
     */  
  
    $field = substr($lines[0],0,strpos($lines[0],&quot;:&quot;));  
    $in_headers = false;  
    if(!empty($field) &amp;amp;&amp;amp; !strstr($field,&quot; &quot;)) {  
      $in_headers = true;  
    }  
  
    $max_line_length = 998; // used below; set here for ease in change  
  
    while(list(,$line) = @each($lines)) {  
      $lines_out = null;  
      if($line == &quot;&quot; &amp;amp;&amp;amp; $in_headers) {  
        $in_headers = false;  
      }  
      // ok we need to break this line up into several smaller lines  
      while(strlen($line) &amp;gt; $max_line_length) {  
        $pos = strrpos(substr($line,0,$max_line_length),&quot; &quot;);  
  
        // Patch to fix DOS attack  
        if(!$pos) {  
          $pos = $max_line_length - 1;  
          $lines_out[] = substr($line,0,$pos);  
          $line = substr($line,$pos);  
        } else {  
          $lines_out[] = substr($line,0,$pos);  
          $line = substr($line,$pos + 1);  
        }  
  
        /* if processing headers add a LWSP-char to the front of new line  
         * rfc 822 on long msg headers  
         */  
        if($in_headers) {  
          $line = &quot;\t&quot; . $line;  
        }  
      }  
      $lines_out[] = $line;  
  
      // send the lines to the server  
      while(list(,$line_out) = @each($lines_out)) {  
        if(strlen($line_out) &amp;gt; 0)  
        {  
          if(substr($line_out, 0, 1) == &quot;.&quot;) {  
            $line_out = &quot;.&quot; . $line_out;  
          }  
        }  
        fputs($this-&amp;gt;smtp_conn,$line_out . $this-&amp;gt;CRLF);  
      }  
    }  
  
    // message data has been sent  
    fputs($this-&amp;gt;smtp_conn, $this-&amp;gt;CRLF . &quot;.&quot; . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 250) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; &quot;DATA not accepted from server&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
    return true;  
  }  
  
  /**  
   * Sends the HELO command to the smtp server.  
   * This makes sure that we and the server are in  
   * the same known state.  
   *  
   * Implements from rfc 821: HELO &amp;lt;SP&amp;gt; &amp;lt;domain&amp;gt; &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 250  
   * SMTP CODE ERROR  : 500, 501, 504, 421  
   * @access public  
   * @param string $host  
   * @return bool  
   */  
  public function Hello($host = &#39;&#39;) {  
    $this-&amp;gt;error = null; // so no confusion is caused  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
            &quot;error&quot; =&amp;gt; &quot;Called Hello() without being connected&quot;);  
      return false;  
    }  
  
    // if hostname for HELO was not specified send default  
    if(empty($host)) {  
      // determine appropriate default to send to server  
      $host = &quot;localhost&quot;;  
    }  
  
    // Send extended hello first (RFC 2821)  
    if(!$this-&amp;gt;SendHello(&quot;EHLO&quot;, $host)) {  
      if(!$this-&amp;gt;SendHello(&quot;HELO&quot;, $host)) {  
        return false;  
      }  
    }  
  
    return true;  
  }  
  
  /**  
   * Sends a HELO/EHLO command.  
   * @access private  
   * @param string $hello  
   * @param string $host  
   * @return bool  
   */  
  private function SendHello($hello, $host) {  
    fputs($this-&amp;gt;smtp_conn, $hello . &quot; &quot; . $host . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 250) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; $hello . &quot; not accepted from server&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
  
    $this-&amp;gt;helo_rply = $rply;  
  
    return true;  
  }  
  
  /**  
   * Starts a mail transaction from the email address specified in  
   * $from. Returns true if successful or false otherwise. If True  
   * the mail transaction is started and then one or more Recipient  
   * commands may be called followed by a Data command.  
   *  
   * Implements rfc 821: MAIL &amp;lt;SP&amp;gt; FROM:&amp;lt;reverse-path&amp;gt; &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 250  
   * SMTP CODE SUCCESS: 552,451,452  
   * SMTP CODE SUCCESS: 500,501,421  
   * @access public  
   * @param string $from  
   * @return bool  
   */  
  public function Mail($from) {  
    $this-&amp;gt;error = null; // so no confusion is caused  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
              &quot;error&quot; =&amp;gt; &quot;Called Mail() without being connected&quot;);  
      return false;  
    }  
  
    $useVerp = ($this-&amp;gt;do_verp ? &quot; XVERP&quot; : &quot;&quot;);  
    fputs($this-&amp;gt;smtp_conn,&quot;MAIL FROM:&amp;lt;&quot; . $from . &quot;&amp;gt;&quot; . $useVerp . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 250) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; &quot;MAIL not accepted from server&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
    return true;  
  }  
  
  /**  
   * Sends the quit command to the server and then closes the socket  
   * if there is no error or the $close_on_error argument is true.  
   *  
   * Implements from rfc 821: QUIT &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 221  
   * SMTP CODE ERROR  : 500  
   * @access public  
   * @param bool $close_on_error  
   * @return bool  
   */  
  public function Quit($close_on_error = true) {  
    $this-&amp;gt;error = null; // so there is no confusion  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
              &quot;error&quot; =&amp;gt; &quot;Called Quit() without being connected&quot;);  
      return false;  
    }  
  
    // send the quit command to the server  
    fputs($this-&amp;gt;smtp_conn,&quot;quit&quot; . $this-&amp;gt;CRLF);  
  
    // get any good-bye messages  
    $byemsg = $this-&amp;gt;get_lines();  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $byemsg . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    $rval = true;  
    $e = null;  
  
    $code = substr($byemsg,0,3);  
    if($code != 221) {  
      // use e as a tmp var cause Close will overwrite $this-&amp;gt;error  
      $e = array(&quot;error&quot; =&amp;gt; &quot;SMTP server rejected quit command&quot;,  
                 &quot;smtp_code&quot; =&amp;gt; $code,  
                 &quot;smtp_rply&quot; =&amp;gt; substr($byemsg,4));  
      $rval = false;  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $e[&quot;error&quot;] . &quot;: &quot; . $byemsg . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
    }  
  
    if(empty($e) || $close_on_error) {  
      $this-&amp;gt;Close();  
    }  
  
    return $rval;  
  }  
  
  /**  
   * Sends the command RCPT to the SMTP server with the TO: argument of $to.  
   * Returns true if the recipient was accepted false if it was rejected.  
   *  
   * Implements from rfc 821: RCPT &amp;lt;SP&amp;gt; TO:&amp;lt;forward-path&amp;gt; &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 250,251  
   * SMTP CODE FAILURE: 550,551,552,553,450,451,452  
   * SMTP CODE ERROR  : 500,501,503,421  
   * @access public  
   * @param string $to  
   * @return bool  
   */  
  public function Recipient($to) {  
    $this-&amp;gt;error = null; // so no confusion is caused  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
              &quot;error&quot; =&amp;gt; &quot;Called Recipient() without being connected&quot;);  
      return false;  
    }  
  
    fputs($this-&amp;gt;smtp_conn,&quot;RCPT TO:&amp;lt;&quot; . $to . &quot;&amp;gt;&quot; . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 250 &amp;amp;&amp;amp; $code != 251) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; &quot;RCPT not accepted from server&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
    return true;  
  }  
  
  /**  
   * Sends the RSET command to abort and transaction that is  
   * currently in progress. Returns true if successful false  
   * otherwise.  
   *  
   * Implements rfc 821: RSET &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 250  
   * SMTP CODE ERROR  : 500,501,504,421  
   * @access public  
   * @return bool  
   */  
  public function Reset() {  
    $this-&amp;gt;error = null; // so no confusion is caused  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
              &quot;error&quot; =&amp;gt; &quot;Called Reset() without being connected&quot;);  
      return false;  
    }  
  
    fputs($this-&amp;gt;smtp_conn,&quot;RSET&quot; . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 250) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; &quot;RSET failed&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
  
    return true;  
  }  
  
  /**  
   * Starts a mail transaction from the email address specified in  
   * $from. Returns true if successful or false otherwise. If True  
   * the mail transaction is started and then one or more Recipient  
   * commands may be called followed by a Data command. This command  
   * will send the message to the users terminal if they are logged  
   * in and send them an email.  
   *  
   * Implements rfc 821: SAML &amp;lt;SP&amp;gt; FROM:&amp;lt;reverse-path&amp;gt; &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 250  
   * SMTP CODE SUCCESS: 552,451,452  
   * SMTP CODE SUCCESS: 500,501,502,421  
   * @access public  
   * @param string $from  
   * @return bool  
   */  
  public function SendAndMail($from) {  
    $this-&amp;gt;error = null; // so no confusion is caused  
  
    if(!$this-&amp;gt;connected()) {  
      $this-&amp;gt;error = array(  
          &quot;error&quot; =&amp;gt; &quot;Called SendAndMail() without being connected&quot;);  
      return false;  
    }  
  
    fputs($this-&amp;gt;smtp_conn,&quot;SAML FROM:&quot; . $from . $this-&amp;gt;CRLF);  
  
    $rply = $this-&amp;gt;get_lines();  
    $code = substr($rply,0,3);  
  
    if($this-&amp;gt;do_debug &amp;gt;= 2) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; FROM SERVER:&quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
  
    if($code != 250) {  
      $this-&amp;gt;error =  
        array(&quot;error&quot; =&amp;gt; &quot;SAML not accepted from server&quot;,  
              &quot;smtp_code&quot; =&amp;gt; $code,  
              &quot;smtp_msg&quot; =&amp;gt; substr($rply,4));  
      if($this-&amp;gt;do_debug &amp;gt;= 1) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; ERROR: &quot; . $this-&amp;gt;error[&quot;error&quot;] . &quot;: &quot; . $rply . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      return false;  
    }  
    return true;  
  }  
  
  /**  
   * This is an optional command for SMTP that this class does not  
   * support. This method is here to make the RFC821 Definition  
   * complete for this class and __may__ be implimented in the future  
   *  
   * Implements from rfc 821: TURN &amp;lt;CRLF&amp;gt;  
   *  
   * SMTP CODE SUCCESS: 250  
   * SMTP CODE FAILURE: 502  
   * SMTP CODE ERROR  : 500, 503  
   * @access public  
   * @return bool  
   */  
  public function Turn() {  
    $this-&amp;gt;error = array(&quot;error&quot; =&amp;gt; &quot;This method, TURN, of the SMTP &quot;.  
                                    &quot;is not implemented&quot;);  
    if($this-&amp;gt;do_debug &amp;gt;= 1) {  
      $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; NOTICE: &quot; . $this-&amp;gt;error[&quot;error&quot;] . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
    }  
    return false;  
  }  
  
  /**  
  * Get the current error  
  * @access public  
  * @return array  
  */  
  public function getError() {  
    return $this-&amp;gt;error;  
  }  
  
  /////////////////////////////////////////////////  
  // INTERNAL FUNCTIONS  
  /////////////////////////////////////////////////  
  
  /**  
   * Read in as many lines as possible  
   * either before eof or socket timeout occurs on the operation.  
   * With SMTP we can tell if we have more lines to read if the  
   * 4th character is &#39;-&#39; symbol. If it is a space then we don&#39;t  
   * need to read anything else.  
   * @access private  
   * @return string  
   */  
  private function get_lines() {  
    $data = &quot;&quot;;  
    $endtime = 0;  
    /* If for some reason the fp is bad, don&#39;t inf loop */  
    if (!is_resource($this-&amp;gt;smtp_conn)) {  
      return $data;  
    }  
    stream_set_timeout($this-&amp;gt;smtp_conn, $this-&amp;gt;Timeout);  
    if ($this-&amp;gt;Timelimit &amp;gt; 0) {  
      $endtime = time() + $this-&amp;gt;Timelimit;  
    }  
    while(is_resource($this-&amp;gt;smtp_conn) &amp;amp;&amp;amp; !feof($this-&amp;gt;smtp_conn)) {  
      $str = @fgets($this-&amp;gt;smtp_conn,515);  
      if($this-&amp;gt;do_debug &amp;gt;= 4) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; get_lines(): \$data was \&quot;$data\&quot;&quot; . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; get_lines(): \$str is \&quot;$str\&quot;&quot; . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      $data .= $str;  
      if($this-&amp;gt;do_debug &amp;gt;= 4) {  
        $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; get_lines(): \$data is \&quot;$data\&quot;&quot; . $this-&amp;gt;CRLF . &#39;&amp;lt;br /&amp;gt;&#39;);  
      }  
      // if 4th character is a space, we are done reading, break the loop  
      if(substr($str,3,1) == &quot; &quot;) { break; }  
      // Timed-out? Log and break  
      $info = stream_get_meta_data($this-&amp;gt;smtp_conn);  
      if ($info[&#39;timed_out&#39;]) {  
        if($this-&amp;gt;do_debug &amp;gt;= 4) {  
          $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; get_lines(): timed-out (&quot; . $this-&amp;gt;Timeout . &quot; seconds) &amp;lt;br /&amp;gt;&quot;);  
        }  
        break;  
      }  
      // Now check if reads took too long  
      if ($endtime) {  
        if (time() &amp;gt; $endtime) {  
          if($this-&amp;gt;do_debug &amp;gt;= 4) {  
            $this-&amp;gt;edebug(&quot;SMTP -&amp;gt; get_lines(): timelimit reached (&quot; . $this-&amp;gt;Timelimit . &quot; seconds) &amp;lt;br /&amp;gt;&quot;);  
          }  
          break;  
        }  
      }  
    }  
    return $data;  
  }  
  
}  
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQL 数据库性能优化之SQL优化!</title>
   <link href="http://127.0.0.1/naringu/2014/08/09/mysql/"/>
   <updated>2014-08-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/08/09/mysql</id>
   <content type="html">&lt;h3 id=&quot;font-colorredfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;优化目标&lt;/font&gt;&lt;/h3&gt;

&lt;p&gt;减少 IO 次数&lt;/p&gt;

&lt;p&gt;IO永远是数据库最容易瓶颈的地方，这是由数据库的职责所决定的，大部分数据库操作中超过90%的时间都是 IO 操作所占用的，减少 IO 次数是 SQL 优化中需要第一优先考虑，当然，也是收效最明显的优化手段。&lt;/p&gt;

&lt;p&gt;降低 CPU 计算&lt;/p&gt;

&lt;p&gt;除了 IO 瓶颈之外，SQL优化中需要考虑的就是 CPU 运算量的优化了。order by, group by,distinct … 都是消耗 CPU 的大户（这些操作基本上都是 CPU 处理内存中的数据比较运算）。当我们的 IO 优化做到一定阶段之后，降低 CPU 计算也就成为了我们 SQL 优化的重要目标&lt;/p&gt;

&lt;h3 id=&quot;font-colorredfont-1&quot;&gt;&lt;font color=&quot;red&quot;&gt;优化方法&lt;/font&gt;&lt;/h3&gt;

&lt;p&gt;改变 SQL 执行计划&lt;/p&gt;

&lt;p&gt;明确了优化目标之后，我们需要确定达到我们目标的方法。对于 SQL 语句来说，达到上述2个目标的方法其实只有一个，那就是改变 SQL 的执行计划，让他尽量“少走弯路”，尽量通过各种“捷径”来找到我们需要的数据，以达到 “减少 IO 次数” 和 “降低 CPU 计算” 的目标&lt;/p&gt;

&lt;p&gt;常见误区&lt;/p&gt;

&lt;p&gt;count(1)和count(primary_key) 优于 count(&lt;em&gt;)
很多人为了统计记录条数，就使用 count(1) 和 count(primary_key) 而不是 count(&lt;/em&gt;) ，他们认为这样性能更好，其实这是一个误区。对于有些场景，这样做可能性能会更差，应为数据库对 count(*) 计数操作做了一些特别的优化。&lt;/p&gt;

&lt;p&gt;count(column) 和 count(&lt;em&gt;)是一样的这个误区甚至在很多的资深工程师或者是 DBA 中都普遍存在，很多人都会认为这是理所当然的。实际上，count(column) 和 count(&lt;/em&gt;) 是一个完全不一样的操作，所代表的意义也完全不一样。
count(column) 是表示结果集中有多少个column字段不为空的记录
count(*) 是表示整个结果集有多少条记录&lt;/p&gt;

&lt;p&gt;select a,b from … 比 select a,b,c from … 可以让数据库访问更少的数据量
这个误区主要存在于大量的开发人员中，主要原因是对数据库的存储原理不是太了解。
实际上，大多数关系型数据库都是按照行（row）的方式存储，而数据存取操作都是以一个固定大小的IO单元（被称作 block 或者 page）为单位，一般为4KB，8KB… 大多数时候，每个IO单元中存储了多行，每行都是存储了该行的所有字段（lob等特殊类型字段除外）。
所以，我们是取一个字段还是多个字段，实际上数据库在表中需要访问的数据量其实是一样的。
当然，也有例外情况，那就是我们的这个查询在索引中就可以完成，也就是说当只取 a,b两个字段的时候，不需要回表，而c这个字段不在使用的索引中，需要回表取得其数据。在这样的情况下，二者的IO量会有较大差异。&lt;/p&gt;

&lt;p&gt;order by 一定需要排序操作
我们知道索引数据实际上是有序的，如果我们的需要的数据和某个索引的顺序一致，而且我们的查询又通过这个索引来执行，那么数据库一般会省略排序操作，而直接将数据返回，因为数据库知道数据已经满足我们的排序需求了。
实际上，利用索引来优化有排序需求的 SQL，是一个非常重要的优化手段
延伸阅读：MySQL ORDER BY 的实现分析 ，MySQL 中 GROUP BY 基本实现原理 以及 MySQL DISTINCT 的基本实现原理 这3篇文章中有更为深入的分析，尤其是第一篇&lt;/p&gt;

&lt;p&gt;执行计划中有 filesort 就会进行磁盘文件排序
有这个误区其实并不能怪我们，而是因为 MySQL 开发者在用词方面的问题。filesort 是我们在使用 explain 命令查看一条 SQL 的执行计划的时候可能会看到在 “Extra” 一列显示的信息。
实际上，只要一条 SQL 语句需要进行排序操作，都会显示“Using filesort”，这并不表示就会有文件排序操作。
延伸阅读：理解 MySQL Explain 命令输出中的filesort，我在这里有更为详细的介绍&lt;/p&gt;

&lt;p&gt;基本原则&lt;/p&gt;

&lt;p&gt;人为在column_name 上通过转换函数进行转换
直接导致 MySQL（实际上其他数据库也会有同样的问题）无法使用索引，如果非要转换，应该在传入的参数上进行转换&lt;/p&gt;

&lt;p&gt;由数据库自己进行转换
如果我们传入的数据类型和字段类型不一致，同时我们又没有做任何类型转换处理，MySQL 可能会自己对我们的数据进行类型转换操作，也可能不进行处理而交由存储引擎去处理，这样一来，就会出现索引无法使用的情况而造成执行计划问题。
上面误区中提到的通过利用索引来排序的方式进行优化
减少参与排序的记录条数
非必要不对数据进行排序
…&lt;/p&gt;

&lt;p&gt;尽量少 join&lt;/p&gt;

&lt;p&gt;MySQL 的优势在于简单，但这在某些方面其实也是其劣势。MySQL 优化器效率高，但是由于其统计信息的量有限，优化器工作过程出现偏差的可能性也就更多。对于复杂的多表 Join，一方面由于其优化器受限，再者在 Join 这方面所下的功夫还不够，所以性能表现离 Oracle 等关系型数据库前辈还是有一定距离。但如果是简单的单表查询，这一差距就会极小甚至在有些场景下要优于这些数据库前辈。&lt;/p&gt;

&lt;p&gt;尽量少排序&lt;/p&gt;

&lt;p&gt;排序操作会消耗较多的 CPU 资源，所以减少排序可以在缓存命中率高等 IO 能力足够的场景下会较大影响 SQL 的响应时间。
对于MySQL来说，减少排序有多种办法，比如：&lt;/p&gt;

&lt;p&gt;尽量避免 select *&lt;/p&gt;

&lt;p&gt;很多人看到这一点后觉得比较难理解，上面不是在误区中刚刚说 select 子句中字段的多少并不会影响到读取的数据吗？
是的，大多数时候并不会影响到 IO 量，但是当我们还存在 order by 操作的时候，select 子句中的字段多少会在很大程度上影响到我们的排序效率，这一点可以通过我之前一篇介绍 MySQL ORDER BY 的实现分析 的文章中有较为详细的介绍。
此外，上面误区中不是也说了，只是大多数时候是不会影响到 IO 量，当我们的查询结果仅仅只需要在索引中就能找到的时候，还是会极大减少 IO 量的。&lt;/p&gt;

&lt;p&gt;尽量用 join 代替子查询&lt;/p&gt;

&lt;p&gt;虽然 Join 性能并不佳，但是和 MySQL 的子查询比起来还是有非常大的性能优势。MySQL 的子查询执行计划一直存在较大的问题，虽然这个问题已经存在多年，但是到目前已经发布的所有稳定版本中都普遍存在，一直没有太大改善。虽然官方也在很早就承认这一问题，并且承诺尽快解决，但是至少到目前为止我们还没有看到哪一个版本较好的解决了这一问题。&lt;/p&gt;

&lt;p&gt;尽量少 or&lt;/p&gt;

&lt;p&gt;当 where 子句中存在多个条件以“或”并存的时候，MySQL 的优化器并没有很好的解决其执行计划优化问题，再加上 MySQL 特有的 SQL 与 Storage 分层架构方式，造成了其性能比较低下，很多时候使用 union all 或者是union（必要的时候）的方式来代替“or”会得到更好的效果。&lt;/p&gt;

&lt;p&gt;尽量用 union all 代替 union&lt;/p&gt;

&lt;p&gt;union 和 union all 的差异主要是前者需要将两个（或者多个）结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的 CPU 运算，加大资源消耗及延迟。所以当我们可以确认不可能出现重复结果集或者不在乎重复结果集的时候，尽量使用 union all 而不是 union。&lt;/p&gt;

&lt;p&gt;尽量早过滤&lt;/p&gt;

&lt;p&gt;这一优化策略其实最常见于索引的优化设计中（将过滤性更好的字段放得更靠前）。
在 SQL 编写中同样可以使用这一原则来优化一些 Join 的 SQL。比如我们在多个表进行分页数据查询的时候，我们最好是能够在一个表上先过滤好数据分好页，然后再用分好页的结果集与另外的表 Join，这样可以尽可能多的减少不必要的 IO 操作，大大节省 IO 操作所消耗的时间。&lt;/p&gt;

&lt;p&gt;避免类型转换&lt;/p&gt;

&lt;p&gt;这里所说的“类型转换”是指 where 子句中出现 column 字段的类型和传入的参数类型不一致的时候发生的类型转换：&lt;/p&gt;

&lt;p&gt;优先优化高并发的 SQL，而不是执行频率低某些“大”SQL&lt;/p&gt;

&lt;p&gt;对于破坏性来说，高并发的 SQL 总是会比低频率的来得大，因为高并发的 SQL 一旦出现问题，甚至不会给我们任何喘息的机会就会将系统压跨。而对于一些虽然需要消耗大量 IO 而且响应很慢的 SQL，由于频率低，即使遇到，最多就是让整个系统响应慢一点，但至少可能撑一会儿，让我们有缓冲的机会。
从全局出发优化，而不是片面调整
SQL 优化不能是单独针对某一个进行，而应充分考虑系统中所有的 SQL，尤其是在通过调整索引优化 SQL 的执行计划的时候，千万不能顾此失彼，因小失大。
尽可能对每一条运行在数据库中的SQL进行 explain
优化 SQL，需要做到心中有数，知道 SQL 的执行计划才能判断是否有优化余地，才能判断是否存在执行计划问题。在对数据库中运行的 SQL 进行了一段时间的优化之后，很明显的问题 SQL 可能已经很少了，大多都需要去发掘，这时候就需要进行大量的 explain 操作收集执行计划，并判断是否需要进行优化。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>微信订阅号 </title>
   <link href="http://127.0.0.1/php/2014/08/08/php/"/>
   <updated>2014-08-08T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/08/php</id>
   <content type="html">&lt;p&gt;1.
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;在微信公共平台中建立一个账号。  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;在开发者工具中进入微信公共平台测试账号  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;进入微信公共平台测试账号之后你可以看到appID和appsecret的信息  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;然后在体验接口权限表中-----基础支持-----获取access_token------开发者必读------接入指南  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.复制代码放到你的服务器中&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
/**  
 * wechat php test  
 */  
//define your token  
define(&quot;TOKEN&quot;,&quot;weixin&quot;);  
define(&quot;appID&quot;,&quot;wxbf7cb55e****a7a7&quot;);  
define(&quot;appsecret&quot;,&quot;f9cdc960*****ed32e7b72d296420a60 &quot;);  
$wechatObj = new wechatCallbackapiTest();  
$wechatObj-&amp;gt;valid();  
class wechatCallbackapiTest  
{  
    public function valid()  
    {  
        $echoStr = $_GET[&quot;echostr&quot;];  
  
        //valid signature , option  
        if($this-&amp;gt;checkSignature()){  
            echo $echoStr;  
            echo $this-&amp;gt;createMenu();  
            $this-&amp;gt;responseMsg();  
            exit;  
        }  
    }  
    public function responseMsg()  
    {  
        //get post data, May be due to the different environments  
        $postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];  
  
        //extract post data  
        if (!empty($postStr)){  
            /* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection,  
               the best way is to check the validity of xml by yourself */  
            libxml_disable_entity_loader(true);  
            $postObj = simplexml_load_string($postStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);  
            $fromUsername = $postObj-&amp;gt;FromUserName;  
            $toUsername = $postObj-&amp;gt;ToUserName;  
            $keyword = trim($postObj-&amp;gt;Content);  
            $time = time();  
            $textTpl = &quot;&amp;lt;xml&amp;gt;  
                            &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/ToUserName&amp;gt;  
                            &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/FromUserName&amp;gt;  
                            &amp;lt;CreateTime&amp;gt;%s&amp;lt;/CreateTime&amp;gt;  
                            &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MsgType&amp;gt;  
                            &amp;lt;Content&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/Content&amp;gt;  
                            &amp;lt;FuncFlag&amp;gt;0&amp;lt;/FuncFlag&amp;gt;  
                            &amp;lt;/xml&amp;gt;&quot;;  
                if(!empty( $keyword ))  
                {  
                    $msgType = &quot;text&quot;;  
                    //$contentStr = &quot;Welcome to wechat world!&quot;;  
                    $contentStr=$this-&amp;gt;test($keyword);  
                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
                    echo $resultStr;  
                }else{  
                    $msgType = &quot;text&quot;;  
                    $contentStr = &quot;欢迎光临&quot;;  
                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
                    echo $resultStr;  
                }  
        }else {  
            echo &quot;&quot;;  
            exit;  
        }  
    }  
    public function test($keyword){  
        $url=&quot;http://www.tuling123.com/openapi/api?key=7de9378923d2693b87223a03e7cc400e&amp;amp;info=&quot;.$keyword;  
        $html=file_get_contents($url);  
        $arr=json_decode($html,true);  
        return $arr[&#39;text&#39;];  
    }  
    private function checkSignature()  
    {  
        // you must define TOKEN by yourself  
        if (!defined(&quot;TOKEN&quot;)) {  
            throw new Exception(&#39;TOKEN is not defined!&#39;);  
        }  
        $signature = $_GET[&quot;signature&quot;];  
        $timestamp = $_GET[&quot;timestamp&quot;];  
        $nonce = $_GET[&quot;nonce&quot;];  
        $token = TOKEN;  
        $tmpArr = array($token, $timestamp, $nonce);  
        // use SORT_STRING rule  
        sort($tmpArr, SORT_STRING);  
        $tmpStr = implode( $tmpArr );  
        $tmpStr = sha1( $tmpStr );  
        if( $tmpStr == $signature ){  
            return true;  
        }else{  
            return false;  
        }  
    }  
    public function getAccessToken(){  
        $url=&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;amp;appid=&quot;.appID.&quot;&amp;amp;secret=&quot;.appsecret;  
        $json=file_get_contents($url);  
        $arr=json_decode($json,true);  
        $Accesstoken=$arr[&#39;access_token&#39;];  
        return $Accesstoken;  
    }  
    public function createMenu(){  
        $accesstoken=$this-&amp;gt;getAccessToken();  
        $url=&quot;https://api.weixin.qq.com/cgi-bin/menu/create?access_token=&quot;.$accesstoken;  
        $data=&#39;  
                 {  
             &quot;button&quot;:[  
             {  
                  &quot;type&quot;:&quot;click&quot;,  
                  &quot;name&quot;:&quot;名字&quot;,  
                  &quot;key&quot;:&quot;V1001_TODAY_MUSIC&quot;  
              },  
              {  
                   &quot;name&quot;:&quot;菜单&quot;,  
                   &quot;sub_button&quot;:[  
                   {  
                       &quot;type&quot;:&quot;view&quot;,  
                       &quot;name&quot;:&quot;搜索&quot;,  
                       &quot;url&quot;:&quot;http://www.soso.com/&quot;  
                    },  
                    {  
                       &quot;type&quot;:&quot;view&quot;,  
                       &quot;name&quot;:&quot;视频&quot;,  
                       &quot;url&quot;:&quot;http://v.qq.com/&quot;  
                    },  
                    {  
                       &quot;type&quot;:&quot;click&quot;,  
                       &quot;name&quot;:&quot;赞一下我们&quot;,  
                       &quot;key&quot;:&quot;V1001_GOOD&quot;  
                    }]  
               }]  
         }&#39;;  
        $this-&amp;gt;curlPost($url,$data,&#39;POST&#39;);  
    }  
    public function curlPost($url,$data,$method){  
        $ch = curl_init();   //1.初始化  
        curl_setopt($ch, CURLOPT_URL, $url); //2.请求地址  
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);//3.请求方式  
        //4.参数如下  
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);//https  
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);  
        curl_setopt($ch, CURLOPT_USERAGENT, &#39;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#39;);//模拟浏览器  
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);  
        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);  
        curl_setopt($ch, CURLOPT_HTTPHEADER,array(&#39;Accept-Encoding: gzip, deflate&#39;));//gzip解压内容  
        curl_setopt($ch, CURLOPT_ENCODING, &#39;gzip,deflate&#39;);  
        if($method==&quot;POST&quot;){//5.post方式的时候添加数据  
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);  
        }  
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  
        $tmpInfo = curl_exec($ch);//6.执行  
        if (curl_errno($ch)) {//7.如果出错  
            return curl_error($ch);  
        }  
        curl_close($ch);//8.关闭  
        return $tmpInfo;  
    }  
}  
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这样你就可以关注你的订阅号，并且自动回复  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>php7所具有的特色 </title>
   <link href="http://127.0.0.1/php/2014/08/07/php/"/>
   <updated>2014-08-07T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/07/php</id>
   <content type="html">&lt;p&gt;PHP（外文名:PHP Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。
PHP语法吸收了C语言、Java和Perl的特点，易于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。&lt;/p&gt;

&lt;p&gt;php7的一些特性
打破一切
　　PHP7要打破一切。 PHP开发人员应该接受打破版本之间向下兼容的定律。只要不允许大量的向后兼容，PHP7将是一个高度尊重的语言。
　　1、创建一个具体的核心语言 删除所有库方法，并保持在对象集中的核心方法。 您应该能够编写无需任何外部库或扩展PHP7和对基本输入/输出，字符串处理和数学一个很好的完整的语言。库以外的任何应该通过批准扩展。
　　2、 一切都当作一个对象 以从Ruby，Smalltalk和(主要)的Java对象，并把它一切当作对象。 整数是对象，字符串是对象，他们每个人都可以操作的方法， 我不相信PHP需要的Ruby和Smalltalk在对象之间传递彼此讯息的观念，而调用对象的方法才是最好的。
　　3、一致的命名方法和类 由于PHP的最大的抱怨之一是不断要检查，(needle,haystack) 或(haystack, needle)，或some_function()，或function_some()，或someFunction()，一个一致的格式需要制定。
　　4、让事情严格尝试传递到一个方法浮动字符串? 这是一个警告。
　　5、 一切是Unicode 在PHP6中的所有字符串都是Unicode，这很好，我主张PHP7也应该保持。
　　6、中央启动点 创建一个主类或初始化，所有代码执行源于此。
　　7、清理C代码我不是一个C的专家，但如果你比较了解Ruby的C代码到PHP的C代码，可以很容易地了解了PHP与Ruby的内部。 我非常熟悉PHP，所以我自己的写扩展更容易。
　　8、摆脱eval() eval()是邪恶的。 如果你正在使用它，那么这是一个错的主意：这将打破PHPUnit，抛弃它从现在开始。
　　9、支持操作符重载 因为一切都是对象，开发者只需掌握操作对象的方法即可。
　　10、允许的方法签名
PHP 7.0.0 Alpha 1[1]  使用新版的ZendEngine引擎，带来了许多新的特性，以下是不完全列表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;性能提升：PHP7比PHP5.6性能提升了两倍。 Improved performance: PHP 7 is up to twice as fast as PHP 5.6
全面一致的64位支持。 Consistent 64-bit support
以前的许多致命错误，现在改成抛出异常。Many fatal errors are now Exceptions
移除了一些老的不在支持的SAPI（服务器端应用编程端口）和扩展。Removal of old and unsupported SAPIs and extensions
新增了空接合操作符。The null coalescing operator (??)
新增加了结合比较运算符。Combined comparison Operator (&amp;lt;=&amp;gt;)
新增加了函数的返回类型声明。Return Type Declarations
新增加了标量类型声明。Scalar Type Declarations
新增加匿名类。Anonymous Classes
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>memcache案例 </title>
   <link href="http://127.0.0.1/php/2014/08/06/php/"/>
   <updated>2014-08-06T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/06/php</id>
   <content type="html">&lt;p&gt;```php
    &amp;lt;?php&lt;br /&gt;
            header(“content-type:text/html;charset=utf-8”);&amp;lt;pre name=&quot;code&quot; class=&quot;python&quot;&amp;gt;   public function lists(){&lt;br /&gt;
            $search=$_GET[‘search’];//搜索的值&lt;br /&gt;
            $mem=new Memcache;//连接memcache&lt;br /&gt;
            $mem-&amp;gt;connect(“127.0.0.1”,11211);&lt;br /&gt;
            $pd=$mem-&amp;gt;get(“$search”);//获得到搜索到的值&lt;br /&gt;
            if($pd){&lt;br /&gt;
                if($pd&amp;lt;=9){&lt;br /&gt;
                    $pd++;&lt;br /&gt;
                    $mem-&amp;gt;replace(“$search”,$pd,0,600);&lt;br /&gt;
                    $arr=$this-&amp;gt;db-&amp;gt;like(“content”,$search)-&amp;gt;get(“zk1”)-&amp;gt;result_array();&lt;br /&gt;
                    echo json_encode($arr);&lt;br /&gt;
                }else if($pd==10){&lt;br /&gt;
                    $arr=$this-&amp;gt;db-&amp;gt;like(“content”,$search)-&amp;gt;get(“zk1”)-&amp;gt;result_array();&lt;br /&gt;
                    $mem-&amp;gt;replace(“$search”,$arr,0,600);&lt;br /&gt;
                    echo json_encode($arr);&lt;br /&gt;
                }else{&lt;br /&gt;
                    echo json_encode($pd);&lt;br /&gt;
                }&lt;br /&gt;
            }else{&lt;br /&gt;
                    $mem-&amp;gt;set(“$search”,0,0,600);&lt;br /&gt;
                    $arr=$this-&amp;gt;db-&amp;gt;like(“content”,$search)-&amp;gt;get(“zk1”)-&amp;gt;result_array();&lt;br /&gt;
                    echo json_encode($arr);&lt;br /&gt;
            }&lt;br /&gt;
        }&lt;/p&gt;

&lt;p&gt;```
2.搜索数据，前十次从数据库中搜索数据，后十次从memcache中搜索数据&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function lists(){  
    $search=$_GET[&#39;search&#39;];//搜索的值  
    $mem=new Memcache;//连接memcache  
    $mem-&amp;gt;connect(&quot;127.0.0.1&quot;,11211);  
    $pd=$mem-&amp;gt;get(&quot;$search&quot;);//获得到搜索到的值  
    if($pd){  
        if($pd&amp;lt;=9){  
            $pd++;  
            $mem-&amp;gt;replace(&quot;$search&quot;,$pd,0,600);  
            $arr=$this-&amp;gt;db-&amp;gt;like(&quot;content&quot;,$search)-&amp;gt;get(&quot;zk1&quot;)-&amp;gt;result_array();  
            echo json_encode($arr);  
        }else if($pd==10){  
            $arr=$this-&amp;gt;db-&amp;gt;like(&quot;content&quot;,$search)-&amp;gt;get(&quot;zk1&quot;)-&amp;gt;result_array();  
            $mem-&amp;gt;replace(&quot;$search&quot;,$arr,0,600);  
            echo json_encode($arr);  
        }else{  
            echo json_encode($pd);  
        }  
    }else{  
            $mem-&amp;gt;set(&quot;$search&quot;,0,0,600);  
            $arr=$this-&amp;gt;db-&amp;gt;like(&quot;content&quot;,$search)-&amp;gt;get(&quot;zk1&quot;)-&amp;gt;result_array();  
            echo json_encode($arr);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.获取数据&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
    $(function(){  
        $(document).on(&quot;click&quot;,&quot;.search1&quot;,function(){  
            var search=$(&quot;#search&quot;).val();  
            $.getJSON(&quot;&amp;lt;?php echo site_url(&#39;welcome/lists&#39;) ?&amp;gt;&quot;,{search:search},function(obj){  
                var html = &#39;&amp;lt;table border=&quot;1&quot;&amp;gt;&#39;;  
                    html+=&#39;&amp;lt;th&amp;gt;编号&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;用户名&amp;lt;/th&amp;gt;&#39;;  
                    for(var i = 0;i&amp;lt;obj.length;i++){  
                        html+=&#39;&amp;lt;tr&amp;gt;&#39;;  
                        html+=&#39;&amp;lt;td&amp;gt;&#39;+obj[i][&#39;id&#39;]+&#39;&amp;lt;/td&amp;gt;&#39;;  
                        html+=&#39;&amp;lt;td&amp;gt;&#39;+obj[i][&#39;content&#39;]+&#39;&amp;lt;/td&amp;gt;&#39;;  
                        html+=&#39;&amp;lt;tr&amp;gt;&#39;;  
                    }  
                    html+=&#39;&amp;lt;/table&amp;gt;&#39;;  
                    $(&quot;#list&quot;).html(html);  
  
            })  
        })        
    })  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>pdo预处理案例  </title>
   <link href="http://127.0.0.1/php/2014/08/05/php/"/>
   <updated>2014-08-05T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/05/php</id>
   <content type="html">&lt;p&gt;pdo防止sql注入预处理&lt;/p&gt;

&lt;p&gt;1.查询&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function dologin2(){  
    $dsn = &quot;mysql:host=127.0.0.1;dbname=php7&quot;;//pdo 连接方法  
    $db = new PDO($dsn, &#39;root&#39;, &#39;root&#39;,array(PDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; &quot;set names utf8&quot;));  
    $name=$_POST[&#39;name&#39;];//$name=&quot;zhangsan&#39; or &#39;a&#39; =&#39;a&quot;  
    $pwd=$_POST[&#39;pwd&#39;];  
    /*  
    $count = $db-&amp;gt;exec(&quot;insert into pdo1(name,pwd) value(&#39;$name&#39;,&#39;$pwd&#39;)&quot;);  
    echo $count;  
    */  
    $sql=&quot;SELECT * FROM pdo1 where name=&#39;$name&#39; and pwd=&#39;$pwd&#39;&quot;;  
    $sql=&quot;select * from pdo1 where name = ? and pwd = ?&quot;;  
    $stmt = $db-&amp;gt;prepare($sql);  
    $exeres = $stmt-&amp;gt;execute(array($name,$pwd));  
    if ($exeres) {  
        while ($row = $stmt-&amp;gt;fetch(PDO::FETCH_ASSOC)) {  
            setcookie(&#39;name&#39;,$name);  
            redirect(&quot;welcome/asdf&quot;);  
        }  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.添加&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
    header(&quot;content-type:text/html;charset=utf-8&quot;);  
    $ch = curl_init();  
    $url =&#39;http://apis.baidu.com/apistore/iplookupservice/iplookup?ip=117.89.65.68&#39;;  
    $header = array(  
        &#39;apikey: 10d4752cc594de7808c253fccd754832&#39;,  
    );  
    curl_setopt($ch, CURLOPT_HTTPHEADER  , $header);  
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  
    curl_setopt($ch , CURLOPT_URL , $url);  
    $res = curl_exec($ch);  
    $arr=json_decode($res,true);  
    //print_r($json);die;  
    $dsn = &quot;mysql:host=localhost;dbname=php7&quot;;  
    $pdo=new PDO($dsn,&#39;root&#39;,&#39;root&#39;,array(PDO::MYSQL_ATTR_INIT_COMMAND=&amp;gt;&#39;set names utf8&#39;));  
    $stmt=$pdo-&amp;gt;prepare(&quot;insert into day15(ip,country,city,district,carrier,province)values(:ip,:co,:ci,:di,:ca,:pr)&quot;);  
    $stmt-&amp;gt;bindparam(&quot;ip&quot;,$arr[&#39;retData&#39;][&#39;ip&#39;]);  
    $stmt-&amp;gt;bindparam(&quot;co&quot;,$arr[&#39;retData&#39;][&#39;country&#39;]);  
    $stmt-&amp;gt;bindparam(&quot;ci&quot;,$arr[&#39;retData&#39;][&#39;city&#39;]);  
    $stmt-&amp;gt;bindparam(&quot;di&quot;,$arr[&#39;retData&#39;][&#39;district&#39;]);  
    $stmt-&amp;gt;bindparam(&quot;ca&quot;,$arr[&#39;retData&#39;][&#39;carrier&#39;]);  
    $stmt-&amp;gt;bindparam(&quot;pr&quot;,$arr[&#39;retData&#39;][&#39;province&#39;]);  
    if($stmt-&amp;gt;execute()){  
        echo &quot;执行成功&quot;;  
        echo &quot;最后插入的ID:&quot;.$pdo-&amp;gt;lastInsertId();  
    }else{  
        echo &quot;执行失败&quot;;  
    }  
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>把一张图片改成不同的样式 </title>
   <link href="http://127.0.0.1/php/2014/08/04/php/"/>
   <updated>2014-08-04T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/04/php</id>
   <content type="html">&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--只需改变图片的名字就可以--&amp;gt;  
&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;style&amp;gt;  
img {  
    width: 33%;  
    height: auto;  
    float: left;   
    max-width: 235px;  
}  
  
.blur {-webkit-filter: blur(4px);filter: blur(4px);}  
.brightness {-webkit-filter: brightness(250%);filter: brightness(250%);}  
.contrast {-webkit-filter: contrast(180%);filter: contrast(180%);}  
.grayscale {-webkit-filter: grayscale(100%);filter: grayscale(100%);}  
.huerotate {-webkit-filter: hue-rotate(180deg);filter: hue-rotate(180deg);}  
.invert {-webkit-filter: invert(100%);filter: invert(100%);}  
.opacity {-webkit-filter: opacity(50%);filter: opacity(50%);}  
.saturate {-webkit-filter: saturate(7); filter: saturate(7);}  
.sepia {-webkit-filter: sepia(100%);filter: sepia(100%);}  
.shadow {-webkit-filter: drop-shadow(8px 8px 10px green);filter: drop-shadow(8px 8px 10px green);}  
&amp;lt;/style&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;meta charset=&#39;utf-8&#39;&amp;gt;  
  
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;注意:&amp;lt;/strong&amp;gt; Internet Explorer &amp;lt;span lang=&quot;no-bok&quot;&amp;gt;或 Safari 5.1 (及更早版本)&amp;lt;/span&amp;gt; 不支持该属性。&amp;lt;/p&amp;gt;  
  
&amp;lt;img src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;blur&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;brightness&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;contrast&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;grayscale&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;huerotate&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;invert&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;opacity&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;saturate&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;sepia&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
&amp;lt;img class=&quot;shadow&quot; src=&quot;pineapple.jpg&quot; alt=&quot;Pineapple&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;  
  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>MyISAM与InnoDB区别 </title>
   <link href="http://127.0.0.1/php/2014/08/03/php/"/>
   <updated>2014-08-03T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/03/php</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;MySQL默认采用的是MyISAM。
MyISAM不支持事务，而InnoDB支持。InnoDB的AUTOCOMMIT默认是打开的，即每条SQL语句会默认被封装成一个事务，自动提交，这样会影响速度，所以最好是把多条SQL语句显示放在begin和commit之间，组成一个事务去提交。
InnoDB支持数据行锁定，MyISAM不支持行锁定，只支持锁定整个表。即MyISAM同一个表上的读锁和写锁是互斥的，MyISAM并发读写时如果等待队列中既有读请求又有写请求，默认写请求的优先级高，即使读请求先到，所以MyISAM不适合于有大量查询和修改并存的情况，那样查询进程会长时间阻塞。因为MyISAM是锁表，所以某项读操作比较耗时会使其他写进程饿死。
InnoDB支持外键，MyISAM不支持。
InnoDB的主键范围更大，最大是MyISAM的2倍。
InnoDB不支持全文索引，而MyISAM支持。全文索引是指对char、varchar和text中的每个词（停用词除外）建立倒排序索引。MyISAM的全文索引其实没啥用，因为它不支持中文分词，必须由使用者分词后加入空格再写到数据表里，而且少于4个汉字的词会和停用词一样被忽略掉。
MyISAM支持GIS数据，InnoDB不支持。即MyISAM支持以下空间数据对象：Point,Line,Polygon,Surface等。
没有where的count(*)使用MyISAM要比InnoDB快得多。因为MyISAM内置了一个计数器，count(*)时它直接从计数器中读，而InnoDB必须扫描全表。所以在InnoDB上执行count(*)时一般要伴随where，且where中要包含主键以外的索引列。为什么这里特别强调“主键以外”？因为InnoDB中primary index是和raw data存放在一起的，而secondary index则是单独存放，然后有个指针指向primary key。所以只是count(*)的话使用secondary index扫描更快，而primary key则主要在扫描索引同时要返回raw data时的作用较大。
对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。

.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。
LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。
另外，InnoDB表的行锁也不是绝对的，假如在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表，例如update table set num=1 where name like “%aaa%”
两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁。而MyISAM不支持.所以MyISAM往往就容易被人认为只适合在小项目中使用。

　　作为使用MySQL的用户角度出发，Innodb和MyISAM都是比较喜欢的，如果数据库平台要达到需求：99.9%的稳定性，方便的扩展性和高可用性来说的话，MyISAM绝对是首选。

　　原因如下：

　　1、平台上承载的大部分项目是读多写少的项目，而MyISAM的读性能是比Innodb强不少的。

　　2、MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。

　　3、经常隔1，2个月就会发生应用开发人员不小心update一个表where写的范围不对，导致这个表没法正常用了，这个时候MyISAM的优越性就体现出来了，随便从当天拷贝的压缩包取出对应表的文件，随便放到一个数据库目录下，然后dump成sql再导回到主库，并把对应的binlog补上。如果是Innodb，恐怕不可能有这么快速度，别和我说让Innodb定期用导出xxx.sql机制备份，因为最小的一个数据库实例的数据量基本都是几十G大小。

　　4、从接触的应用逻辑来说，select count(*) 和order by 是最频繁的，大概能占了整个sql总语句的60%以上的操作，而这种操作Innodb其实也是会锁表的，很多人以为Innodb是行级锁，那个只是where对它主键是有效，非主键的都会锁全表的。

　　5、还有就是经常有很多应用部门需要我给他们定期某些表的数据，MyISAM的话很方便，只要发给他们对应那表的frm.MYD,MYI的文件，让他们自己在对应版本的数据库启动就行，而Innodb就需要导出xxx.sql了，因为光给别人文件，受字典数据文件的影响，对方是无法使用的。

　　6、如果和MyISAM比insert写操作的话，Innodb还达不到MyISAM的写性能，如果是针对基于索引的update操作，虽然MyISAM可能会逊色Innodb,但是那么高并发的写，从库能否追的上也是一个问题，还不如通过多实例分库分表架构来解决。

　　7、如果是用MyISAM的话，merge引擎可以大大加快应用部门的开发速度，他们只要对这个merge表做一些select count(*)操作，非常适合大项目总量约几亿的rows某一类型(如日志，调查统计)的业务表。

　　当然Innodb也不是绝对不用，用事务的项目就用Innodb的。另外，可能有人会说你MyISAM无法抗太多写操作，但是可以通过架构来弥补。
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title> php防止表单重复提交 </title>
   <link href="http://127.0.0.1/php/2014/08/02/php/"/>
   <updated>2014-08-02T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/08/02/php</id>
   <content type="html">&lt;p&gt;防止表单重复提交的方法有很多种，那么今天就给大家介绍一种PHP如何有效的防止表单重复提交。&lt;/p&gt;

&lt;p&gt;代码非常简单：&lt;/p&gt;

&lt;p&gt;我相信大家很聪明给大家分享一个小的demo，大家可以借鉴一下：&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
/*  
* 2016年9月29日08:09:13  郝云云书  
*/  
session_start();  
header(&quot;Content-Type: text/html;charset=utf-8&quot;);  
function set_token() {  
    $_SESSION[&#39;token&#39;] = md5(microtime(true));  
}  
function valid_token() {  
    $return = $_REQUEST[&#39;token&#39;] === $_SESSION[&#39;token&#39;] ? true : false;  
    set_token();  
    return $return;  
}  
//如果token为空则生成一个token  
if(!isset($_SESSION[&#39;token&#39;]) || $_SESSION[&#39;token&#39;]==&#39;&#39;) {  
    set_token();  
}  
if(isset($_POST[&#39;web&#39;])){  
    if(!valid_token()){  
        echo &quot;token error，请不要重复提交！&quot;;  
    }else{  
        echo &#39;成功提交，Value:&#39;.$_POST[&#39;web&#39;];  
    }  
}else{  
?&amp;gt;  
&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;  
&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&amp;gt;  
&amp;lt;title&amp;gt;PHP防止重复提交表单&amp;lt;/title&amp;gt;  
&amp;lt;meta name=&quot;keywords&quot; content=&quot;PHP&quot; /&amp;gt;  
&amp;lt;meta name=&quot;description&quot; content=&quot;PHP防止重复提交表单&quot; /&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;div id=&quot;main&quot;&amp;gt;  
    &amp;lt;div class=&quot;demo&quot;&amp;gt;  
        &amp;lt;form method=&quot;post&quot; action=&quot;&quot;&amp;gt;    
            &amp;lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;&amp;lt;?php echo $_SESSION[&#39;token&#39;]?&amp;gt;&quot;&amp;gt;    
            &amp;lt;input type=&quot;text&quot; class=&quot;input&quot; name=&quot;web&quot; value=&quot;郝云云&quot;&amp;gt;    
            &amp;lt;input type=&quot;submit&quot; class=&quot;btn&quot; value=&quot;提交&quot; /&amp;gt;    
        &amp;lt;/form&amp;gt;    
    &amp;lt;/div&amp;gt;  
&amp;lt;/div&amp;gt;  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&amp;lt;?php }?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>GIT常用命令备忘</title>
   <link href="http://127.0.0.1/git/2014/07/30/git-order/"/>
   <updated>2014-07-30T20:56:01+08:00</updated>
   <id>http://127.0.0.1/git/2014/07/30/git_order</id>
   <content type="html">
&lt;p&gt;Git配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name &quot;irfen&quot;   
git config --global user.email &quot;blog@irfen.me&quot;
git config --global color.ui true
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global core.editor &quot;mate -w&quot;    # 设置Editor使用textmate
git config -l  # 列举所有配置
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git常用命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;githelp&amp;lt;command&amp;gt;  # 显示command的help
git show            # 显示某次提交的内容
gitshow$id
 
gitco  --&amp;lt;file&amp;gt;  # 抛弃工作区修改
git co  .          # 抛弃工作区修改
 
git add&amp;lt;file&amp;gt;      # 将工作文件修改提交到本地暂存区
gitadd.          # 将所有修改过的工作文件提交暂存区
 
gitrm &amp;lt;file&amp;gt;      # 从版本库中删除文件
git rm&amp;lt;file&amp;gt;--cached  # 从版本库中删除文件，但不删除文件
 
git reset&amp;lt;file&amp;gt;    # 从暂存区恢复到工作文件
gitreset-- .      # 从暂存区恢复到工作文件
git reset--hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
 
git ci&amp;lt;file&amp;gt;
gitci .
git ci-a          # 将git add, git rm和git ci等操作都合并在一起做
gitci -am&quot;some comments&quot;
git ci--amend      # 修改最后一次提交记录
 
git revert&amp;lt;$id&amp;gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
gitrevert HEAD    # 恢复最后一次提交的状态
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看文件diff&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff &amp;lt;file&amp;gt;     # 比较当前文件和暂存区文件差异
git diff
git diff &amp;lt;$id1&amp;gt; &amp;lt;$id2&amp;gt;   # 比较两次提交之间的差异
git diff &amp;lt;branch1&amp;gt;..&amp;lt;branch2&amp;gt; # 在两个分支之间比较 
git diff --staged   # 比较暂存区和版本库差异
git diff --cached   # 比较暂存区和版本库差异
git diff --stat     # 仅仅比较统计信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看提交记录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitlog
git log&amp;lt;file&amp;gt;      # 查看该文件每次提交记录
gitlog-p&amp;lt;file&amp;gt;  # 查看每次详细修改内容的diff
git log-p-2      # 查看最近两次详细修改内容的diff
gitlog--stat      # 查看提交统计信息
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git 本地分支管理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git br -r           # 查看远程分支
git br &amp;lt;new_branch&amp;gt; # 创建新的分支
git br -v           # 查看各个分支最后提交信息
git br --merged     # 查看已经被合并到当前分支的分支
git br --no-merged  # 查看尚未被合并到当前分支的分支
 
git co &amp;lt;branch&amp;gt;     # 切换到某个分支
git co -b &amp;lt;new_branch&amp;gt; # 创建新的分支，并且切换过去
git co -b &amp;lt;new_branch&amp;gt; &amp;lt;branch&amp;gt;  # 基于branch创建新的new_branch
 
git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &amp;lt;new_branch&amp;gt;  # 把某次历史提交记录checkout出来，创建成一个分支
 
git br -d &amp;lt;branch&amp;gt;  # 删除某个分支
git br -D &amp;lt;branch&amp;gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分支合并和rebase&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitmerge&amp;lt;branch&amp;gt;              # 将branch分支合并到当前分支
git merge origin/master--no-ff  # 不要Fast-Foward合并，这样可以生成merge提交
 
git rebasemaster&amp;lt;branch&amp;gt;      # 将master rebase到branch，相当于：
gitco &amp;lt;branch&amp;gt;&amp;amp;&amp;amp; git rebasemaster&amp;amp;&amp;amp; git co master &amp;amp;&amp;amp; git merge&amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git补丁管理(方便在多台机器上开发同步时用)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff &amp;gt; ../sync.patch         # 生成补丁
git apply ../sync.patch          # 打补丁
git apply --check ../sync.patch  # 测试补丁能否成功
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git暂存管理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitstash                        # 暂存
git stash list                  # 列所有stash
gitstash apply                  # 恢复暂存的内容
git stash drop                  # 删除暂存区
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git远程分支管理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull                         # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin                 # 抓取远程仓库更新
git merge origin/master          # 将远程主分支合并到本地当前分支
git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
git co -b &amp;lt;local_branch&amp;gt; origin/&amp;lt;remote_branch&amp;gt;  # 基于远程分支创建本地分支，功能同上
 
git push                         # push所有分支
git push origin master           # 将本地主分支推到远程主分支
git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &amp;lt;local_branch&amp;gt;   # 创建远程分支， origin是远程仓库名
git push origin &amp;lt;local_branch&amp;gt;:&amp;lt;remote_branch&amp;gt;  # 创建远程分支
git push origin :&amp;lt;remote_branch&amp;gt;  #先删除本地分支(git br -d &amp;lt;branch&amp;gt;)，然后再push删除远程
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git远程仓库管理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitremote-v                    # 查看远程服务器地址和仓库名称
git remoteshow origin          # 查看远程服务器仓库状态
gitremote addorigin git@github:irfen/irfen_site.git        # 添加远程仓库地址
git remoteset-urlorigin git@github.com:irfen/irfen_site.git# 设置远程仓库地址(用于修改远程仓库地址)
gitremote rm&amp;lt;repository&amp;gt;      # 删除远程仓库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --bare irfen_site irfen_site.git  # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上
 
mkdir irfen_site.git &amp;amp;&amp;amp; cd irfen_site.git &amp;amp;&amp;amp; git --bare init # 在服务器创建纯仓库
git remote add origin git@github.com:irfen/irfen_site.git    # 设置远程仓库地址
git push -u origin master                                      # 客户端首次提交
git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track
 
git remote set-head origin master   # 设置远程仓库的HEAD指向master分支
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以命令设置跟踪远程库和本地库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>php实现验证码 !</title>
   <link href="http://127.0.0.1/naringu/2014/07/18/yanzheng/"/>
   <updated>2014-07-18T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/07/18/yanzheng</id>
   <content type="html">&lt;p&gt;在控制器方法下 加入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;       &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;  
        &lt;span class=&quot;vg&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;vg&quot;&gt;$w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;vg&quot;&gt;$code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
            &lt;span class=&quot;vg&quot;&gt;$code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;位验证码也可以用&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;直接生成&lt;/span&gt;   
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;将生成的验证码写入&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，备验证时用&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;helloweba_num&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;创建图片，定义颜色值&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-type: image/PNG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagecreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagecolorallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagecolorallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$bgcolor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagecolorallocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;填充背景&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imagefill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
      
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;画边框&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imagerectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
      
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;随机绘制两条虚线，起干扰作用&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   
            &lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$gray&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imagesetstyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$y1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$y2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$y3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$y4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imageline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$y1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$y3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IMG_COLOR_STYLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imageline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$y2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$y4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IMG_COLOR_STYLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
      
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;在画布上随机生成大量黑点，起干扰作用&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
            &lt;span class=&quot;n&quot;&gt;imagesetpixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;将数字随机显示在画布上&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;字符的水平间距和位置都按一定波动范围随机生成&lt;/span&gt;   
        &lt;span class=&quot;vg&quot;&gt;$strx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
            &lt;span class=&quot;vg&quot;&gt;$strpos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
            &lt;span class=&quot;n&quot;&gt;imagestring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$strx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$strpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
            &lt;span class=&quot;vg&quot;&gt;$strx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imagepng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;输出图片&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;imagedestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;释放图片所占内存&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;取session  比较判断是否一样&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionlogin_do&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（）&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;vg&quot;&gt;$yzm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Yii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;yzm&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
            &lt;span class=&quot;vg&quot;&gt;$yzm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$yzm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
            &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;错误信息&lt;/span&gt;  
            &lt;span class=&quot;vg&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;取出&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;中的验证码进行比较&lt;/span&gt;  
            &lt;span class=&quot;vg&quot;&gt;$session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Yii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
               &lt;span class=&quot;vg&quot;&gt;$session_yzm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;helloweba_num&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$session_yzm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$yzm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
               &lt;span class=&quot;vg&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
           &lt;span class=&quot;vg&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;验证码错误，请重新输入！&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
               &lt;span class=&quot;err&quot;&gt;跳转登陆完页面&lt;/span&gt;  
      
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
     &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在登录html页面加入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yzm&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yzm&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tabindex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;请输入验证码&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.php?r=index/code&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;getcode_num&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;看不清，点击换一张&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;absmiddle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
  
&lt;span class=&quot;n&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;数字验证&lt;/span&gt;  
 &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#getcode_num&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;   
        &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;index.php?r=index/code&amp;amp;=&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;   
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</content>
 </entry>
 
 <entry>
   <title>jquery实现遮罩层  !</title>
   <link href="http://127.0.0.1/naringu/2014/07/16/jquery/"/>
   <updated>2014-07-16T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/07/16/jquery</id>
   <content type="html">
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;&lt;/span&gt;  
        &lt;span class=&quot;s2&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/title&amp;gt;  
        &amp;lt;style&amp;gt;  
            body {  
                font-family:Arial, Helvetica, sans-serif;  
                font-size:12px;  
                margin:0;  
            }  
            #main {  
                height:1800px;  
                padding-top:90px;  
                text-align:center;  
            }  
            #fullbg {  
                background-color:gray;  
                left:0;  
                opacity:0.5;  
                position:absolute;  
                top:0;  
                z-index:3;  
                filter:alpha(opacity=50);  
                -moz-opacity:0.5;  
                -khtml-opacity:0.5;  
            }  
            #dialog {  
                background-color:#fff;  
                border:5px solid rgba(0,0,0, 0.4);  
                height:400px;  
                left:50%;  
                margin:-200px 0 0 -200px;  
                padding:1px;  
                position:fixed !important; /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;浮动对话框&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/  
                position:absolute;  
                top:50%;  
                width:400px;  
                z-index:5;  
                border-radius:5px;  
                display:none;  
            }  
            #dialog p {  
                margin:0 0 12px;  
                height:24px;  
                line-height:24px;  
                background:#CCCCCC;  
            }  
            #dialog p.close {  
                text-align:right;  
                padding-right:10px;  
            }  
            #dialog p.close a {  
                color:#fff;  
                text-decoration:none;  
            }  
        &amp;lt;/s&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/head&amp;gt;  
      
    &amp;lt;body&amp;gt;  
    &amp;lt;div id=&quot;main&quot;&amp;gt;&amp;lt;a href=&quot;javascript:showBg();&quot;&amp;gt;点击这里查看效果&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fullbg&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;  
        &amp;lt;div id=&quot;dialog&quot;&amp;gt;  
            &amp;lt;p class=&quot;close&quot;&amp;gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;closeBg();&quot;&amp;gt;关闭&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&amp;gt;  
            &amp;lt;div&amp;gt;正在加载，请稍后....&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;  
    &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/body&amp;gt;  
    &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jquery.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;  
    &amp;lt;script type=&quot;text/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;  
        //显示灰色 jQuery 遮罩层  
        function showBg() {  
            var bh = $(&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;).height();  
            var bw = $(&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;).width();  
            $(&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#fullbg&quot;).css({  &lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
                &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
                &lt;span class=&quot;nb&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&quot;block&quot;&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
            &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#dialog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;关闭灰色&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;遮罩&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closeBg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#fullbg,#dialog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;效果图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/../images/20161009170236987.png&quot; alt=&quot;cookie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么一个遮罩层就实现啦！！！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>curl模拟post请求提交 !</title>
   <link href="http://127.0.0.1/naringu/2014/07/15/curl/"/>
   <updated>2014-07-15T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/07/15/curl</id>
   <content type="html">
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;content-type:text/html;charset=utf-8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curlPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;    
    &lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;初始化&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;请求地址&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;请求方式&lt;/span&gt;    
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;参数如下&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_SSL_VERIFYPEER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_SSL_VERIFYHOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_USERAGENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;模拟浏览器&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_FOLLOWLOCATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_AUTOREFERER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_HTTPHEADER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Accept-Encoding: gzip, deflate&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;解压内容&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_ENCODING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;gzip,deflate&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
        
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方式的时候添加数据&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;vg&quot;&gt;$tmpInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;执行&lt;/span&gt;    
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl_errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果出错&lt;/span&gt;    
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;curl_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;关闭&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$tmpInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1234&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.sohu.com/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    
&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curlPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mb_convert_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;GBK&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以下是模拟登陆的代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$cookie_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tempnam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./temp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;cookie&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
        &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weixinPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$setcooke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$cookie_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;      
            &lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;初始化&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;请求地址&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;请求方式&lt;/span&gt;      
            &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;参数如下&lt;/span&gt;          
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_SSL_VERIFYPEER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_SSL_VERIFYHOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_USERAGENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_FOLLOWLOCATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_AUTOREFERER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
                  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方式的时候添加数据&lt;/span&gt;         
                &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$setcooke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;      
                &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_COOKIEJAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$cookie_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      
                &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_COOKIEFILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$cookie_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;vg&quot;&gt;$tmpInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;执行&lt;/span&gt;      
          
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl_errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果出错&lt;/span&gt;      
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
            &lt;span class=&quot;n&quot;&gt;curl_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;关闭&lt;/span&gt;      
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$tmpInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;username&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;***&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;***&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.xinxinj.com/login.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weixinPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$cookie_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
                  
        &lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://www.xinxinj.com/admin.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
        &lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weixinPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$cookie_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
        &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
                  
    &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title> 大于23的男生女生都该看.看完你会变一个人   </title>
   <link href="http://127.0.0.1/php/2014/07/12/php/"/>
   <updated>2014-07-12T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/12/php</id>
   <content type="html">&lt;p&gt;女生篇&lt;/p&gt;

&lt;p&gt;在路上主动和你套近乎的陌生人，就不要傻不拉叽的给人电话号码了，你会被短信电话骚扰致死的。 &lt;br /&gt;
    在场上不要标榜自己多能喝，很男人的与人划拳喝酒了，真正在乎你的人是不会看着你喝到醉醺醺的。 &lt;br /&gt;
    告别灰姑娘和白马王子的白日梦吧，你的脚没那么小，穿不进那水晶鞋。 &lt;br /&gt;
    有给男友买进口剃须刀的钱，不如给老爸买双袜子，他穿着你老妈补过几次的袜子，你注意了吗。 &lt;br /&gt;
    有份稳定的工作，多赚点钱，女人一定要经济独立，才有独立的人格，防止以后成了娜拉，鲁迅爷爷说过娜拉出走后要么回来，要么沦为娼。 &lt;br /&gt;
    中年男人，特指大款，请你吃饭唱歌泡吧，拒绝吧，你算计不过他们的。 &lt;br /&gt;
    曾经背叛过你的男人想回头，对其说不。 &lt;br /&gt;
    你曾经背叛的男人请你回头，对其说不。 &lt;br /&gt;
    学点衣装搭配，不要再红陪紫好死不死的穿着出门了。 &lt;br /&gt;
    对于年少时幼稚男对你的山盟海誓，一笑而过吧，他说这些话肯定没经过大脑。 &lt;br /&gt;
    大事坚持原则，小事学会变通。 &lt;br /&gt;
    没必要和男友争个面红耳赤，你对了，他会认为你争强好胜得理不饶人，你错了，他会认为你无理取闹没完没了。 &lt;br /&gt;
    有钱买条高档项链，总比戴着块假玉让人看着有品味。 &lt;br /&gt;
    别再动不动就学野蛮女友暴打你男人了，打坏了没有替身给你抗米面袋。 &lt;br /&gt;
    不要爱上有家室的男人，等他老婆孩子老父母全家总动员时，你会死的很惨。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;每年做个身体检查，尤其是肝、肾、乳腺。   
偶尔和妈妈一起下厨，永远比和姐妹淘无事生非的在一起胡吃海喝来得开心。   
对于你真正要与其结婚的男友，要忠诚。   
不要再认为你在玩别人的感情，对手可能比你道行要高。   
想嫁给他，要做好安全措施；不想嫁给他，就更要做好安全措施。   
不要再当月光族，你该学着攒些嫁妆钱了。   
不要老买速溶咖啡在家喝，偶尔去趟星巴克，他会认为你懂得生活。   
永远记住，和男生一起没白没黑的网游，只属于大学时代。   
除非真有必要，没必要时时更换最新款手机，否则别人会认为你是卖手机的。   
了解父母的身体状况。   
此时的你至少该有张驾照，无论你是否有车。   
至少有一个和你暧昧的异性朋友(没有性关系的那种)，既可以是你的精神百宝箱也可以当精神垃圾桶。   
不要和女友的男友走得太近，背后会挨姐们儿的骂。   
不要指望你的男友挣钱洗衣做饭家务样样精通，他没有超人的内裤可以穿在外面。   
   


不要反复强调结婚以后你的男友一定要孝顺你的父母，甚至扬言要把父母接来一起住，让老公和岳父岳母相处，人与人是相互的，要是他把自己的父母也接来，你们家将会热闹得超乎想象。   
不要才开始相处就提结婚，也不要连续两次拒绝你男友的求婚。   
不要再想你这辈子必须找个梁朝伟或是郭台铭，因为你不是刘嘉玲。   
不要找比自己小三岁以上的男孩，因为你也不是王菲。   
买份保险，如果单位办了社保，就不必了。   
给妈妈买些实用的东西，她会觉得比花要好几百倍。   
有自己去SPA的时候不如陪妈妈去洗个澡，给她搓搓背。   
万事随缘，但不要放弃努力。   
不要给自己太大压力，不要学做咄咄逼人的女强人，你会越来越孤独。   
有剩余资金，可以考虑买房了，结婚的房子不一定完全由男友负担。   
无需把男人看得太复杂，人与人之间往往是彼此复杂化，当然，也不要当他们是白痴。   
不要时时缠着男友，留给他点空间，感情会更深。   
没事去看看男友的父母，比单纯巴结他管用的多。   
男友多再不是你可以骄傲的本钱，只会被认为不靠谱。   
对男友好不是件做作事儿，尤其人多的时候，对男友呼来喝去，他会很没面儿，也只会让人觉得你很没品。   
此时的你再是闲人一个，没人会再夸你是乖乖女。   
不要以为自己吸烟很有魅力，对皮肤不好，而且显得很风尘。   
假如你还认字，那么经常看看书，提升一下自我修养。   
别瞧不起你正经上班但挣得不多的姐们儿，人家吃碗面条，都是自个儿的血汗钱。   
在朋友面前不要炫耀和自以为事(这样是很令人反感的)。   
关心一点国家大事吧，别说俄国总统还是普京，政治不只是男人的事。   
常关心一下你的男友，但关心不等于唠叨加监视。   
和男友出去吃饭，不要因为自己是女孩，就不愿意埋单，觉得他请你是应分的，凭什么呀，你又一点也没少吃。   
学学化妆吧，素颜美女是要拼年龄的，你很快就没这优势了。   
多半男人认为，女人晚上也要和白天一样有魅力***。   
如果你没有林妹妹那般才情容貌和身世，就不要动不动的流泪了，即使你做的出葬花吟，估计你也不想步林妹妹吐血后尘，关键是宝哥哥最后还娶了别人。   
   
至少要保留一种健康的爱好，如：游泳，慢跑，乒乓等，记住逛街不算。   
不要羡慕谁的好姐们儿比你多，她们的闹心事和这个数目也是成正比的。   
永远不要认为别人的老公比你的好，因为他们爱的不是你。   
保养一下头发吧，顶着一头烂草，彩妆也彩不起来。   
多夸夸你的男友，你的一句话或许就是他的动力，会为你带来经济效益的。   
想继续发展的男友最好带给父母看一看，老人的眼睛有时候确实比你雪亮。   
不要再学男人说脏话了，你不是小太妹，会成为老太姐的。   
以精打细算为荣，以乱吃零食为耻。
衣服不用一天一换，花枝招展的容易让人眼晕。   
和男友的男友要保持一定距离，太远他会说你对他朋友不热情，太近事儿可就大了。       
没有任何一件事，任何一个男人，值得你彻夜不眠或街头买醉，或者买安眠药。   
女人，光鲜儿就那几年，以后拼的是道行而不只是脸蛋。
永远高雅的微笑。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;男生篇&lt;/p&gt;

&lt;p&gt;酒吧认识的女人，多半就没有必要再留电话了。
喝酒喝好，不代表喝完吐吐完喝，在量上占个老大。
告别网恋吧，相比之下家人介绍的对象还是可以看看，必竟知根知底比较把握，少走弯路。
周末有带情人泡午夜场的钱，不如给母亲买点水果买点菜，趁现在子欲养而亲还在。
多赚点钱，但不要多到谁看上你，你都会觉得其只是看上你的钱的地步。
中年女人，实力比你雄厚，还是要选择说不。因为你付出的一定比得到的会多。 
你曾经背叛的女人请你回头，对其说不。
穿着假名牌，不如一身便装，但求干净整洁。
对于年少时向一个女人做过的错误的诺言，你要有勇气违背它。
大事坚持原则，小事学会变通。
没必要和女友争个面红耳赤，她错了，你让着，她会感激你，其实她知道是她不讲理。
有钱买块好表，比在自己有脖子上加条一指来粗的金链子让人看着有品味。
别再动不动就想用武力解决问题，你不是泰森，也不是陈浩南。
不要爱上有家的女人，有一天你会觉得自己很白痴。
每年做个身体检查，尤其是肝，肺，胃以及血压。
偶尔和父亲促膝喝点小酒，永远比和一帮酒肉朋友在一起买醉来得开心。
对于你真正要与其结婚的女友，要忠诚。
不要再认为你在玩别人的感情，对手可能比你道行要高。
爱她，要做好安全措施；不爱她，就更要做好安全措施。
不要再当月光族，你该学着攒些钱了。
十七八岁没钱没卡叫潇酒，二十五以上没钱没卡叫没安全感。
永远记住，游戏与麻将叫消遣，不要沉迷。
除非真有必要，一般人通常没必要去买8888那样的四联号。否则见你其人，会以为你是卖卡的。
了解父母的身体状况。
此时的你至少该有张驾照，无论你是否有车。
N个酒肉朋友，也比不上一个与你肝胆相照的真哥们。
轻易不要借钱，也轻易不要借给别人钱，除非你不指着他还。
不要才开始相处就要求你的女友洗衣做饭样样精通，结了婚她自然就会为你做这些。
不要强调结婚以后你的女友一定要孝顺你的父母，人与人是相互的，只要你做到了，她也会的。
不要才开始相处就提结婚，也不要处了一年还不提结婚。
不要再想你这辈子必须找个张柏芝或李嘉欣，因为你不是周润发。
不要找比自己小五岁以上的女孩，如果你不是很有钱。
买份保险，如果单位办了社保，就不必了。
给母亲花一块钱母亲的笑容也是发自内心的灿烂。
有自己去泡桑那的时候不如陪父亲去洗个澡，给他搓搓背。
万事随缘，但不要放弃努力。
不要给自己太大压力，不要学做李嘉成，李嘉成当初也不知他会是今日的李嘉成。
有剩余资金，可以考虑买房了。哪怕只够付个首期。
无需把女人看得太复杂，人与人之间往往是彼此复杂化，当然，也不要当她们是白痴。
不要非等到情人节，才肯花个三头五百去买花，平时的一块巧克力，她也会笑逐颜开。
有和女友去开房的钱，不如存下来，假期时一起出去旅次游，感情会更深。
帮女友家换个灯泡，有时比给女友买套SK2还来得实惠。
女友多再不是你可以骄傲的本钱，只会被认为老大不小了还没个正事。
对女友好不是件磕趁事儿，尤其人多的时候，对女友呼来喝去，只会让人觉得你很没品。
此时的你再是闲人一个，没人会再夸你是浪子。
不要今天中华明天生命源，不如固定在天天大云的标准上。
假如你是中专以下学历，那么无论自考还是函授，还是提高一下，总有一天会有收益。
别瞧不起你正经上班的哥们，他们要找对象，比你有条件。
没做到的事不要轻易承诺，承诺过了，假如可以，还是努力做到。男人信誉很重要。
专一一点吧，没什么不好。
常关心一下你的女友，但关心不等于磨几。
不要相信女人喜欢AA制，该买单的时候还是要买的，男人爽快还是很有吸引力的。
不要以为男人就可以不注重形象，女人也不是瞎子。
多半女人认为，男人认真的时候最有魅力，无论是认真工作，还是认真&lt;em&gt;**&lt;/em&gt;。
男人的眼泪可以流，用得适当，效果很好。常流不止，结果就让人作呕了。
新闻实事必看，哪怕有些事情不是你能说了算的，但你得了解。
至少要保留一种健康的爱好，如：游泳，足球，健身，蓝球等。
不要羡慕谁的铁子比你多，他们的闹心事和这个数目也是成正比的。
永远不要认为别人的媳妇比你的好，因为她必竟不是你媳妇。
鞋还是擦得光亮些吧，哪怕它不是名牌，也比一脚泥的AIDD还得顺眼。
多夸夸你的女友，哪怕是伪心的，她的心情好了，你也轻松不少。
想继续发展的女友最好带给母亲看一看，老人的眼睛有时候确实比你雪亮。
有聊QQ的时间，不如多看看新闻。
衣服不用一天一换，但也不要一周也不换一次。
和女友的女友要保持一定距离，太远她会说你对她朋友不热情，太近事儿可就大了。
永远不要夸你女友的女友，那会是她最忌讳的事情，最好是不要评价。
没有任何一件事，任何一个女人，值得你彻夜不眠或借酒浇愁。
人，就这一辈子，开心就好。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何配置https站点 !</title>
   <link href="http://127.0.0.1/naringu/2014/07/12/https/"/>
   <updated>2014-07-12T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/07/12/https</id>
   <content type="html">&lt;p&gt;第一步&lt;/p&gt;

&lt;p&gt;配置一个https站点需要有一个ssl的证书，我们可以到以下网址去申请一个免费的ssl证书：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wosign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Free&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#ssl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;第二步&lt;/p&gt;

&lt;p&gt;有了ssl的证书后，我们可以将需要的服务器类型的压缩包解压后上传到服务器中。一共有两个文件，一个是.crt文件，还有一个是.key文件。&lt;/p&gt;

&lt;p&gt;第三步&lt;/p&gt;

&lt;p&gt;在原有的nginx的server配置中添加以下内容：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#你的域名    &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;ssl_certificate&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#crt文件位置    &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssl_certificate_key&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#key文件位置    &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssl_session_timeout&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;ssl_protocols&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TLSv1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TLSv1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TLSv1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;ssl_ciphers&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AESGCM&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EXPORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RC4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MEDIUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eNULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;ssl_prefer_server_ciphers&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后重启nginx，关闭浏览器并且清空缓存，就能够用https访问网站啦！&lt;/p&gt;

&lt;p&gt;第四步&lt;/p&gt;

&lt;p&gt;你可能会发现现在用http进不去网站了！怎么办呢？很简单，只要添加以下配置即可！&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipv6only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#域名    &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#xxx为你的域名    &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样，用户即使不输入https，输入http也能访问了，所有连接都会被重定向到https页面！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>  多级城市联动   </title>
   <link href="http://127.0.0.1/php/2014/07/11/php/"/>
   <updated>2014-07-11T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/11/php</id>
   <content type="html">&lt;p&gt;//控制器方法
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&quot;color:#FF0000;&quot;&amp;gt;public function index()  
{  
       $arr=array(  
           &#39;pid&#39;=&amp;gt;0  
       );  
       $list[&#39;i&#39;]=$this-&amp;gt;db-&amp;gt;get_where(&quot;address&quot;,$arr)-&amp;gt;result_array();  
       $this-&amp;gt;load-&amp;gt;view(&#39;welcome_message&#39;,$list);  
}  
   public function addressNext(){  
       $arr=array(  
           &#39;pid&#39;=&amp;gt; $_GET[&#39;pid&#39;]  
       );  
       $list[&#39;i&#39;]=$this-&amp;gt;db-&amp;gt;get_where(&quot;address&quot;,$arr)-&amp;gt;result_array();  
       $this-&amp;gt;load-&amp;gt;view(&#39;addressNext&#39;,$list);  
   }&amp;lt;/span&amp;gt;&amp;lt;span style=&quot;color:#e1efff;&quot;&amp;gt;  
  
&amp;lt;!-- addressNext.php --&amp;lt;/span&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;option value=&quot;-1&quot;&gt;请选择&lt;/option&gt;&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&quot;color:#FF0000;&quot;&amp;gt;&amp;lt;?php  
foreach($i as $v){  
    ?&amp;gt;  
    &amp;lt;option value=&quot;&amp;lt;?php echo $v[&#39;id&#39;]  ?&amp;gt;&quot;&amp;gt;&amp;lt;?php  echo $v[&#39;username&#39;] ?&amp;gt;&amp;lt;/option&amp;gt;  
&amp;lt;?php  
}  
?&amp;gt;&amp;lt;/span&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;//视图&lt;/p&gt;

&lt;!--welcome_message.php--&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&quot;color:#FF0000;&quot;&amp;gt;&amp;lt;p&amp;gt;四级联动&amp;lt;/p&amp;gt;  
&amp;lt;script src=&quot;&amp;lt;?php echo base_url(&quot;public/jq.js&quot;)  ?&amp;gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;  
&amp;lt;select name=&quot;address&quot; id=&quot;address&quot; class=&quot;address&quot;&amp;gt;  
    &amp;lt;option value=&quot;-1&quot;&amp;gt;请选择&amp;lt;/option&amp;gt;  
    &amp;lt;?php  
    foreach($i as $v){  
        ?&amp;gt;  
        &amp;lt;option value=&quot;&amp;lt;?php echo $v[&#39;id&#39;]  ?&amp;gt;&quot;&amp;gt;&amp;lt;?php  echo $v[&#39;username&#39;] ?&amp;gt;&amp;lt;/option&amp;gt;  
    &amp;lt;?php  
    }  
    ?&amp;gt;  
&amp;lt;/select&amp;gt;  
&amp;lt;select name=&quot;&quot; id=&quot;address&quot; class=&quot;address&quot;&amp;gt;&amp;lt;/select&amp;gt;  
&amp;lt;select name=&quot;&quot; id=&quot;address&quot; class=&quot;address&quot;&amp;gt;&amp;lt;/select&amp;gt;  
&amp;lt;select name=&quot;&quot; id=&quot;address&quot; class=&quot;address&quot;&amp;gt;&amp;lt;/select&amp;gt;  
  
&amp;lt;!--引用jquery事件--&amp;gt;  
  
&amp;lt;script&amp;gt;  
    $(document).on(&quot;change&quot;,&#39;.address&#39;,function(){  
        var val=$(this).val();  
        //alert(val);die;  
        ob=$(this).next();  
        $.get(&quot;&amp;lt;?php echo site_url(&quot;welcome/addressNext&quot;) ?&amp;gt;&quot;,{pid:val},function(data){  
            ob.html(data);  
        })  
    })  
&amp;lt;/script&amp;gt;&amp;lt;/span&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> 接口的调用与使用   </title>
   <link href="http://127.0.0.1/php/2014/07/10/php/"/>
   <updated>2014-07-10T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/10/php</id>
   <content type="html">&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function index()  
{  
    $sign=&quot;b872c3e6930b7fb3576c776deede6a83&quot;;  
    $appkey=&quot;18787&quot;;  
    $url=&quot;http://api.k780.com:88/?app=weather.future&amp;amp;weaid=1&amp;amp;&amp;amp;appkey=&quot;.$appkey.&quot;&amp;amp;sign=&quot;.$sign.&quot;&amp;amp;format=json&quot;;//echo $url;die;  
    $html=file_get_contents($url);  
    echo json_encode($html);  
  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;json_encode() 内置函数(PHP &amp;gt; 5.2)可以使用得 php 中数据可以与其它语言很好的传递并且使用它。&lt;/p&gt;

&lt;p&gt;这个函数的功能是将数值转换成json数据存储格式。&lt;/p&gt;

&lt;p&gt;json_decode — 对JSON 格式的字符串进行解码。&lt;/p&gt;

&lt;p&gt;//身份证号的查询
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function ccc(){  
    header(&quot;content-type:application/json,charset=utf-8&quot;);  
    $url=&quot;http://api.k780.com:88/?app=idcard.get&amp;amp;idcard=身份证号&amp;amp;appkey=18787&amp;amp;sign=b872c3e6930b7fb3576c776deede6a83&amp;amp;format=xml&quot;;  
    $aa=simplexml_load_file($url);  
    $vv=json_encode($aa);  
    echo $vv;  
}  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> json样式转化   </title>
   <link href="http://127.0.0.1/php/2014/07/09/php/"/>
   <updated>2014-07-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/09/php</id>
   <content type="html">&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function bbb(){  
     header(&quot;content-type:application/json,charset=utf-8&quot;);//*  
     $url=&quot;http://zphteach.com/zph/8wei/json/json.php&quot;;  
     $file=file_get_contents($url);  
     $b=json_decode($file,true);  
     //print_r($b);die;  
     $b[0][&#39;name&#39;]=&quot;zhangsan&#39;s&quot;;  
  
     $b[1][&#39;name&#39;]=&quot;lisi&amp;lt;zhangsan&quot;;  
  
  
     header(&quot;content-type:application/xml&quot;);//*  
     //print_r($b);die;  
     echo &#39;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&#39;;  
     echo &quot;&amp;lt;note&amp;gt;&quot;;  
     foreach($b as $key =&amp;gt; $val){  
         echo &quot;&amp;lt;rows&amp;gt;&quot;;  
             foreach($val as $k =&amp;gt; $v){  
                 echo &quot;&amp;lt;a&amp;gt;&quot;;  
                 echo $v;  
                 echo &quot;&amp;lt;/a&amp;gt;&quot;;  
             }  
         echo &quot;&amp;lt;/rows&amp;gt;&quot;;  
     }  
     echo &#39;&amp;lt;/note&amp;gt;&#39;;  
 }  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> PHP缓存技术OB系统函数--静态缓存与局部缓存   </title>
   <link href="http://127.0.0.1/php/2014/07/08/php/"/>
   <updated>2014-07-08T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/08/php</id>
   <content type="html">&lt;p&gt;主要函数：&lt;/p&gt;

&lt;p&gt;ob_start()函数:打开输出缓冲区.
函数格式
void ob_start(void)
说明：当缓冲区激活时，所有来自PHP程序的非文件头信息均不会发送，而是保存在内部缓冲区。为了输出缓冲区的内容，可以使用ob_end_flush()或flush()输出缓冲区的内容。&lt;/p&gt;

&lt;p&gt;Flush：刷新缓冲区的内容，输出。
函数格式：flush()
说明：这个函数经常使用,效率很高。&lt;/p&gt;

&lt;p&gt;ob_get_contents ：返回内部缓冲区的内容。
函数格式：string ob_get_contents(void)
说明：这个函数会返回当前缓冲区中的内容，如果输出缓冲区没有激活,则返回 FALSE.&lt;/p&gt;

&lt;p&gt;ob_get_length：返回内部缓冲区的长度。
函数格式：int ob_get_length(void)
说明：这个函数会返回当前缓冲区中的长度；和ob_get_contents一样，如果输出缓冲区没有激活,则返回 FALSE.&lt;/p&gt;

&lt;p&gt;ob_end_clean：删除内部缓冲区的内容，并且关闭内部缓冲区
函数格式：void ob_end_clean(void)
说明：这个函数不会输出内部缓冲区的内容而是把它删除&lt;/p&gt;

&lt;p&gt;ob_end_flush: 发送内部缓冲区的内容到浏览器，并且关闭输出缓冲区
函数格式：void ob_end_flush(void)
说明：这个函数发送输出缓冲区的内容（如果有的话）&lt;/p&gt;

&lt;p&gt;ob_implicit_flush：打开或关闭绝对刷新
函数格式：void ob_implicit_flush ([int flag])&lt;/p&gt;

&lt;p&gt;说明：默认为关闭缓冲区，打开绝对输出后，每个脚本输出都直接发送到浏览器，不再需要调用 flush()&lt;/p&gt;

&lt;p&gt;静态缓存的案例：&lt;/p&gt;

&lt;p&gt;[python] view plain copy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function look(){  
    if(!is_file(&#39;k780.html&#39;)){  
        ob_start();  
        $this-&amp;gt;load-&amp;gt;view(&quot;k870&quot;);  
        $content=ob_get_contents();  
        $fb=fopen(&#39;k780.html&#39;,&quot;w&quot;);  
        fwrite($fb,$content);  
        fclose($fb);  
    }else{  
        echo &quot;I am is copy&quot;;  
        echo file_get_contents(&#39;k780.html&#39;);  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;局部缓存（即在你所要想做的项目基础上进行添加，添加完成之后进行添加静态缓存.
[python] view plain copy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;div class=&quot;top_uinfo&quot; id=&quot;aaaa&quot;&amp;gt;&amp;lt;/div&amp;gt;  
        &amp;lt;script&amp;gt;  
            $(function(){  
                $.get(&#39;pos&#39;,function(e){  
                    $(&#39;#aaaa&#39;).html(e);  
                })  
            })  
        &amp;lt;/script&amp;gt;  
  
  
public function pos(){  
    if(!empty($_COOKIE[&#39;name&#39;])){  
        echo $_COOKIE[&#39;name&#39;];  
        echo &#39;&amp;lt;a href=&quot;logout&quot;&amp;gt;退出&amp;lt;/a&amp;gt;&#39;;  
    }else{  
        echo &#39;&amp;lt;a href=&quot;login&quot;&amp;gt;登陆&amp;lt;/a&amp;gt;&#39;;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> 即点即改   </title>
   <link href="http://127.0.0.1/php/2014/07/07/php/"/>
   <updated>2014-07-07T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/07/php</id>
   <content type="html">&lt;p&gt;[python] view plain copy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;td width=&quot;10%&quot;&amp;gt;&amp;lt;span class=&quot;num&quot; id=&quot;&amp;lt;?php echo $v[&#39;cat_id&#39;] ?&amp;gt;&quot;&amp;gt;&amp;lt;?php echo $v[&#39;measure_unit&#39;]?&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python] view plain copy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
  
               $(document).on(&#39;click&#39;,&#39;.num&#39;,function(){  
        var id=$(this).attr(&#39;id&#39;);  
        var _this=$(this);  
        var new_val=$(this).html();  
        _this.parent().html(&quot;&amp;lt;input type=&#39;text&#39;class=&#39;asdf&#39; value=&quot;+new_val+&quot; id=&quot;+id+&quot;&amp;gt;&quot;);  
        var inp=$(&#39;.asdf&#39;);  
        inp.focus();  
        inp.blur(function(){  
            var old_id=$(this).attr(&#39;id&#39;);  
            var old_val=$(this).val();  
            //inp.parent().html(&quot;&amp;lt;span class=\&quot;num\&quot; id=&quot;+old_id+&quot;&amp;gt;&quot;+old_val+&quot;&amp;lt;/span&amp;gt;&quot;);  
            $.get(&quot;&amp;lt;?php echo base_url(&quot;index.php/good/gai&quot;) ?&amp;gt;&quot;,{measure_unit:old_val,id:old_id},function(e){  
                if(e==1){  
                    inp.parent().html(&quot;&amp;lt;span class=\&quot;num\&quot; id=&quot;+old_id+&quot;&amp;gt;&quot;+old_val+&quot;&amp;lt;/span&amp;gt;&quot;);  
                }else{  
                    inp.parent().html(&quot;&amp;lt;span class=\&quot;num\&quot; id=&quot;+old_id+&quot;&amp;gt;&quot;+new_val+&quot;&amp;lt;/span&amp;gt;&quot;);  
                }  
            })  
        })  
    })  
  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;控制器中的方法
[python] view plain copy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function gai()  
{  
    $data[&#39;measure_unit&#39;] = $_GET[&#39;measure_unit&#39;];  
    $data[&#39;cat_id&#39;] = $_GET[&#39;id&#39;];  
    $arr = $this-&amp;gt;db-&amp;gt;update(&quot;category&quot;, $data, array(&#39;cat_id&#39; =&amp;gt; $data[&#39;cat_id&#39;]));  
    //var_dump($arr);die;  
    if ($arr) {  
        echo 1;  
    } else {  
        echo 0;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> 无限极分类  </title>
   <link href="http://127.0.0.1/php/2014/07/06/php/"/>
   <updated>2014-07-06T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/06/php</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;1.调用方法 [python] 

function __construct(){  
        parent::__construct();  
  
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.查出表名表中必须有名称，原来ID，父级ID&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function aaaa(){  
    $arr=$this-&amp;gt;db-&amp;gt;get(&quot;表名&quot;)-&amp;gt;result_array();  
    $list[&#39;list&#39;]=$this-&amp;gt;sel_dg($arr,$pid=0,$level=0);  
    $this-&amp;gt;load-&amp;gt;view(&quot;good/aaa&quot;,$list);  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.把查出来的数据进行循环&lt;br /&gt;
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function sel_dg($arr,$parent_id=0,$level=0){  
        static $data = array();  
        foreach($arr as $k=&amp;gt;$v) {  
            if($v[&#39;parent_id&#39;]==$parent_id){  
                $v[&#39;level&#39;]=$level;  
                $data[]=$v;  
                $this-&amp;gt;sel_dg($arr,$v[&#39;cat_id&#39;],$level+1);  
            }  
        }  
        return $data;  
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.调到PHP页面进行输出
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php echo str_repeat(&#39;      &#39;,$v[&#39;level&#39;]);?&amp;gt;  
  
&amp;lt;?php echo $v[&#39;cat_name&#39;]?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> 在CI框架中如何实现伪静态  </title>
   <link href="http://127.0.0.1/php/2014/07/05/php/"/>
   <updated>2014-07-05T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/05/php</id>
   <content type="html">&lt;p&gt;第一步：在根目录下（index.PHP）同一级目录下建立一个.htaccess这个文件文件内容（即红色标识所显示的内容）&lt;/p&gt;

&lt;p&gt;URI 类 和 URL 辅助函数 包含了一些函数可以让你更容易的处理 URI 数据，另外，你的 URL 可以通过 URI 路由 进行重定向从而得到更大的灵活性。
移除 URL 中的 index.php&lt;/p&gt;

&lt;p&gt;默认情况，你的 URL 中会包含 index.php 文件:&lt;/p&gt;

&lt;p&gt;example.com/index.php/news/article/my_article&lt;/p&gt;

&lt;p&gt;如果你的 Apache 服务器启用了 mod_rewrite ，你可以简单的通过一个 .htaccess 文件再加上一些简单的规则就可以移除 index.php 了。下面是这个文件的一个例子， 其中使用了 “否定条件” 来排除某些不需要重定向的项目：&lt;/p&gt;

&lt;p&gt;RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L]&lt;/p&gt;

&lt;p&gt;第二步：&lt;/p&gt;

&lt;p&gt;在config/config.php/中修改URL后缀（即绿色所代表的内容）&lt;/p&gt;

&lt;p&gt;添加 URL 后缀（$config[‘url_suffix’] = ‘.html’;）&lt;/p&gt;

&lt;p&gt;在你的 config/config.php 文件中你可以指定一个后缀，CodeIgniter 生成 URL 时会自动添加上它。例如，一个像这样的 URL:&lt;/p&gt;

&lt;p&gt;example.com/index.php/products/view/shoes&lt;/p&gt;

&lt;p&gt;你可以添加一个后缀，如：.html ，这样页面看起来就是这个样子:&lt;/p&gt;

&lt;p&gt;example.com/index.php/products/view/shoes.html&lt;/p&gt;

&lt;p&gt;第三步：&lt;/p&gt;

&lt;p&gt;在config/routes.php中修改配置且添加正则匹配&lt;/p&gt;

&lt;p&gt;$route[‘default_controller’] = ‘welcome’;
$route[‘404&lt;em&gt;override’] = ‘’;
$route[‘translate_uri_dashes’] = FALSE;
$route[‘welcome/lists&lt;/em&gt;(:num)_(:num)’] = ‘welcome/lists/$1/$2’;&lt;/p&gt;

&lt;p&gt;具体案例：&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function lists($page,$search){  
        echo $page;  
        echo &quot;&amp;lt;/br&amp;gt;&quot;;  
        echo $search;  
    }  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>xml 与 json介绍 </title>
   <link href="http://127.0.0.1/php/2014/07/04/php/"/>
   <updated>2014-07-04T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/04/php</id>
   <content type="html">&lt;p&gt;JSON和XML的比较
　　◆可读性
　　JSON和XML的可读性可谓不相上下，一边是简易的语法，一边是规范的标签形式，很难分出胜负。　　◆可扩展性
　　XML天生有很好的扩展性，JSON当然也有，没有什么是XML能扩展，而JSON却不能。不过JSON在JavaScript主场作战，可以存储Javascript复合对象，有着xml不可比拟的优势。　　◆编码难度
　　XML有丰富的编码工具，比如Dom4j、JDom等，JSON也有提供的工具。无工具的情况下，相信熟练的开发人员一样能很快的写出想要的xml文档和JSON字符串，不过，xml文档要多很多结构上的字符。　　◆解码难度
　　XML的解析方式有两种：　　一是通过文档模型解析，也就是通过父标签索引出一组标记。例如：xmlData.getElementsByTagName(“tagName”)，但是这样是要在预先知道文档结构的情况下使用，无法进行通用的封装。　　另外一种方法是遍历节点。这个可以通过递归来实现，不过解析出来的数据仍旧是形式各异，往往也不能满足预先的要求。
　　如果预先知道JSON结构的情况下，使用JSON进行数据传递简直是太美妙了，可以写出很实用美观可读性强的代码。如果你是纯粹的前台开发人员，一定会非常喜欢JSON。但是如果你是一个应用开发人员，就不是那么喜欢了，毕竟xml才是真正的结构化标记语言，用于进行数据传递。　　而如果不知道JSON的结构而去解析JSON的话，那简直是噩梦。费时费力不说，代码也会变得冗余拖沓，得到的结果也不尽人意。但是这样也不影响众多前台开发人员选择JSON。因为json.js中的toJSONString()就可以看到JSON的字符串结构。当然不是使用这个字符串，这样仍旧是噩梦。常用JSON的人看到这个字符串之后，就对JSON的结构很明了了，就更容易的操作JSON。　　以上是在Javascript中仅对于数据传递的xml与JSON的解析。在Javascript地盘内，JSON毕竟是主场作战，其优势当然要远远优越于xml。如果JSON中存储Javascript复合对象，而且不知道其结构的话，我相信很多程序员也一样是哭着解析JSON的。&lt;/p&gt;

&lt;p&gt;先简单介绍一下XML,xml 是基于文本的标记性行语言，类似于html，可以方便存储数据&lt;/p&gt;

&lt;p&gt;1.xml只能有一个根级元素，不能有多个根级元素，例如在格式2中再添加一个根级元素&lt;config1&gt;&lt;/config1&gt;,就会报错&lt;/p&gt;

&lt;p&gt;2.xml的元素可以循环嵌套，父级元素包含子级元素，子级元素有可以包含自己的子级元素，&lt;/p&gt;

&lt;p&gt;例如格式1：根级元素&lt;CATALOG&gt;&lt;/CATALOG&gt;包含了子级元素&lt;CD&gt;&lt;/CD&gt;,而&lt;CD&gt;&lt;/CD&gt;子级元素又可以包含多个自己的子级元素&lt;/p&gt;

&lt;p&gt;3.元素的两中形式：&lt;/p&gt;

&lt;p&gt;形式1&lt;节点名称&gt;[值]&lt;/节点名称&gt;如:&lt;title&gt;文章标题&lt;/title&gt;&lt;/p&gt;

&lt;p&gt;形式2&amp;lt;节点名称  属性1=[值]       属性2=[值]         属性3=[值]     …   属性N=[值]/&amp;gt;&lt;/p&gt;

&lt;p&gt;例如：  &lt;row col1=&quot;11&quot; col2=&quot;一（一）班&quot; col3=&quot;初一&quot; col4=&quot;三峡高级中学&quot; col5=&quot;20&quot; col6=&quot;30&quot; col7=&quot;50&quot;&gt;&lt;/row&gt;&lt;/p&gt;

&lt;p&gt;用XML表示中国部分省市数据如下：　　&lt;/p&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;p&gt;　　&lt;/p&gt;

&lt;country&gt;&lt;name&gt;中国&lt;/name&gt;　　

&lt;province&gt;&lt;name&gt;黑龙江&lt;/name&gt;&lt;cities&gt;&lt;city&gt;哈尔滨&lt;/city&gt;&lt;city&gt;大庆&lt;/city&gt;&lt;/cities&gt;&lt;/province&gt;

&lt;province&gt;&lt;name&gt;广东&lt;/name&gt;&lt;cities&gt;&lt;city&gt;广州&lt;/city&gt;&lt;city&gt;深圳&lt;/city&gt;&lt;city&gt;珠海&lt;/city&gt;&lt;/cities&gt;&lt;/province&gt;
&lt;province&gt;&lt;name&gt;台湾&lt;/name&gt;&lt;cities&gt;&lt;city&gt;台北&lt;/city&gt;&lt;city&gt;高雄&lt;/city&gt;&lt;/cities&gt;&lt;/province&gt;
&lt;province&gt;&lt;name&gt;新疆&lt;/name&gt;&lt;cities&gt;&lt;city&gt;乌鲁木齐&lt;/city&gt;&lt;/cities&gt;&lt;/province&gt;

用JSON表示如下：


　　{name:&quot;中国&quot;,&lt;/country&gt;
&lt;p&gt;　　province:[{name:”黑龙江”,cities:{city:[“哈尔滨”,”大庆”]}},&lt;/p&gt;

&lt;p&gt;　　               {name:”广东”,cities:{city:[“广州”,”深圳”,”珠海”]}},&lt;/p&gt;

&lt;p&gt;　　      {name:”台湾”,cities:{city:[“台北”,”高雄”]}},&lt;/p&gt;

&lt;p&gt;　　     {name:”新疆”,cities:{city:[“乌鲁木齐”]}}]}&lt;/p&gt;

&lt;p&gt;json&lt;/p&gt;

&lt;p&gt;JSON：JavaScript 对象表示法（JavaScript Object Notation）。&lt;/p&gt;

&lt;p&gt;JSON 是存储和交换文本信息的语法。类似 XML。&lt;/p&gt;

&lt;p&gt;JSON 比 XML 更小、更快，更易解析。&lt;/p&gt;

&lt;p&gt;什么是 JSON ？&lt;/p&gt;

&lt;p&gt;JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于ECMAScript的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）
JSON 是轻量级的文本数据交换格式
JSON 独立于语言 *
JSON 具有自我描述性，更易理解
json_encode — 对变量进行JSON编码;
json_decode()  将json转换成数组形式
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>10 个 Redis 建议/技巧</title>
   <link href="http://127.0.0.1/redis/2014/07/03/redis-suggest/"/>
   <updated>2014-07-03T20:56:01+08:00</updated>
   <id>http://127.0.0.1/redis/2014/07/03/redis_suggest</id>
   <content type="html">
&lt;p&gt;Redis 在当前的技术社区里是非常热门的。从来自 Antirez 一个小小的个人项目到成为内存数据存储行业的标准，Redis已经走过了很长的一段路。随之而来的一系列最佳实践，使得大多数人可以正确地使用 Redis。下面我们将探索正确使用 Redis 的10个技巧。&lt;/p&gt;

&lt;p&gt;1、停止使用 KEYS *&lt;/p&gt;

&lt;p&gt;Okay，以挑战这个命令开始这篇文章，或许并不是一个好的方式，但其确实可能是最重要的一点。很多时候当我们关注一个redis实例的统计数据，我们会快速地输入”KEYS *”命令，这样key的信息会很明显地展示出来。平心而论，从程序化的角度出发往往倾向于写出下面这样的伪代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for key in&#39;keys *&#39;:
 
doAllTheThings()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是当你有1300万个key时，执行速度将会变慢。因为KEYS命令的时间复杂度是O(n)，其中n是要返回的keys的个数，这样这个命令的复杂度就取决于数据库的大小了。并且在这个操作执行期间，其它任何命令在你的实例中都无法执行。&lt;/p&gt;

&lt;p&gt;作为一个替代命令，看一下 SCAN 吧，其允许你以一种更友好的方式来执行… SCAN 通过增量迭代的方式来扫描数据库。这一操作基于游标的迭代器来完成的，因此只要你觉得合适，你可以随时停止或继续。&lt;/p&gt;

&lt;p&gt;2、找出拖慢 Redis 的罪魁祸首&lt;/p&gt;

&lt;p&gt;由于 Redis 没有非常详细的日志，要想知道在 Redis 实例内部都做了些什么是非常困难的。幸运的是 Redis 提供了一个下面这样的命令统计工具：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt;INFOcommandstats
# Commandstats
cmdstat_get:calls=78,usec=608,usec_per_call=7.79
cmdstat_setex:calls=5,usec=71,usec_per_call=14.20
cmdstat_keys:calls=2,usec=42,usec_per_call=21.00
cmdstat_info:calls=10,usec=1931,usec_per_call=193.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过这个工具可以查看所有命令统计的快照，比如命令执行了多少次，执行命令所耗费的毫秒数(每个命令的总时间和平均时间)&lt;/p&gt;

&lt;p&gt;只需要简单地执行 CONFIG RESETSTAT 命令就可以重置，这样你就可以得到一个全新的统计结果。&lt;/p&gt;

&lt;p&gt;3、 将 Redis-Benchmark 结果作为参考，而不要一概而论&lt;/p&gt;

&lt;p&gt;Redis 之父 Salvatore 就说过：“通过执行GET/SET命令来测试Redis就像在雨天检测法拉利的雨刷清洁镜子的效果”。很多时候人们跑到我这里，他们想知道为什么自己的Redis-Benchmark统计的结果低于最优结果 。但我们必须要把各种不同的真实情况考虑进来，例如：&lt;/p&gt;

&lt;p&gt;可能受到哪些客户端运行环境的限制？
是同一个版本号吗？
测试环境中的表现与应用将要运行的环境是否一致？
Redis-Benchmark的测试结果提供了一个保证你的 Redis-Server 不会运行在非正常状态下的基准点，但是你永远不要把它作为一个真实的“压力测试”。压力测试需要反应出应用的运行方式，并且需要一个尽可能的和生产相似的环境。&lt;/p&gt;

&lt;p&gt;4、Hashes 是你的最佳选择&lt;/p&gt;

&lt;p&gt;以一种优雅的方式引入 hashes 吧。hashes 将会带给你一种前所未有的体验。之前我曾看到过许多类似于下面这样的key结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo:first_name
foo:last_name
foo:address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的例子中，foo 可能是一个用户的用户名，其中的每一项都是一个单独的 key。这就增加了 犯错的空间，和一些不必要的 key。使用 hash 代替吧，你会惊奇地发现竟然只需要一个 key ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1:6379&amp;gt;HSETfoofirst_name&quot;Joe&quot;(integer)1
127.0.0.1:6379&amp;gt;HSETfoolast_name&quot;Engel&quot;(integer)1
127.0.0.1:6379&amp;gt;HSETfooaddress&quot;1 Fanatical Pl&quot;(integer)1
127.0.0.1:6379&amp;gt;HGETALLfoo
1)&quot;first_name&quot;
2)&quot;Joe&quot;
3)&quot;last_name&quot;
4)&quot;Engel&quot;
5)&quot;address&quot;
6)&quot;1 Fanatical Pl&quot;
127.0.0.1:6379&amp;gt;HGETfoofirst_name
&quot;Joe&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、设置 key 值的存活时间&lt;/p&gt;

&lt;p&gt;无论什么时候，只要有可能就利用key超时的优势。一个很好的例子就是储存一些诸如临时认证key之类的东西。当你去查找一个授权key时——以OAUTH为例——通常会得到一个超时时间。这样在设置key的时候，设成同样的超时时间，Redis就会自动为你清除！而不再需要使用KEYS *来遍历所有的key了，怎么样很方便吧？&lt;/p&gt;

&lt;p&gt;6、 选择合适的回收策略&lt;/p&gt;

&lt;p&gt;既然谈到了清除key这个话题，那我们就来聊聊回收策略。当 Redis 的实例空间被填满了之后，将会尝试回收一部分key。根据你的使用方式，我强烈建议使用 volatile-lru 策略——前提是你对key已经设置了超时。但如果你运行的是一些类似于 cache 的东西，并且没有对 key 设置超时机制，可以考虑使用 allkeys-lru 回收机制。我的建议是先在这里查看一下可行的方案。&lt;/p&gt;

&lt;p&gt;7、如果你的数据很重要，请使用 Try/Except&lt;/p&gt;

&lt;p&gt;如果必须确保关键性的数据可以被放入到 Redis 的实例中，我强烈建议将其放入 try/except 块中。几乎所有的Redis客户端采用的都是“发送即忘”策略，因此经常需要考虑一个 key 是否真正被放到 Redis 数据库中了。至于将 try/expect 放到 Redis 命令中的复杂性并不是本文要讲的，你只需要知道这样做可以确保重要的数据放到该放的地方就可以了。&lt;/p&gt;

&lt;p&gt;8、不要耗尽一个实例&lt;/p&gt;

&lt;p&gt;无论什么时候，只要有可能就分散多redis实例的工作量。从3.0.0版本开始，Redis就支持集群了。Redis集群允许你基于key范围分离出部分包含主/从模式的key。完整的集群背后的“魔法”可以在这里找到。但如果你是在找教程，那这里是一个再适合不过的地方了。如果不能选择集群，考虑一下命名空间吧，然后将你的key分散到多个实例之中。关于怎样分配数据，在redis.io网站上有这篇精彩的评论。&lt;/p&gt;

&lt;p&gt;9、内核越多越好吗？！&lt;/p&gt;

&lt;p&gt;当然是错的。Redis 是一个单线程进程，即使启用了持久化最多也只会消耗两个内核。除非你计划在一台主机上运行多个实例——希望只会是在开发测试的环境下！——否则的话对于一个 Redis 实例是不需要2个以上内核的。&lt;/p&gt;

&lt;p&gt;10、高可用&lt;/p&gt;

&lt;p&gt;到目前为止 Redis Sentinel 已经经过了很全面的测试，很多用户已经将其应用到了生产环境中（包括 ObjectRocket ）。如果你的应用重度依赖于 Redis ，那就需要想出一个高可用方案来保证其不会掉线。当然，如果不想自己管理这些东西，ObjectRocket 提供了一个高可用平台，并提供7×24小时的技术支持，有意向的话可以考虑一下。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>xml接口类型的数据（把其中的数据显示出来）  </title>
   <link href="http://127.0.0.1/php/2014/07/03/php/"/>
   <updated>2014-07-03T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/03/php</id>
   <content type="html">&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
    &amp;lt;title&amp;gt;JSONP——XML&amp;lt;/title&amp;gt;  
    &amp;lt;script src=&quot;jq.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;div id=&quot;divCustomers&quot;&amp;gt;&amp;lt;/div&amp;gt;  
  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&amp;lt;script&amp;gt;  
    //var url=&quot;http://api.k780.com:88/?app=idcard.get&amp;amp;idcard=110101199001011114&amp;amp;appkey=10003&amp;amp;sign=b872c3e6930b7fb3576c776deede6a83&amp;amp;format=json&amp;amp;jsoncallback=?&quot;;  
    $.getJSON(&quot;http://api.k780.com:88/?app=idcard.get&amp;amp;idcard=1410021995091***5&amp;amp;appkey=18787&amp;amp;sign=b872c3e6930b7fb3576c776deede6a83&amp;amp;format=json&amp;amp;jsoncallback=?&quot;,function(data){  
        //alert(data.result.born);  
        time=&quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&quot;+data.result.born+&quot;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;+data.result.idcard+&quot;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;+data.result.sex+&quot;&amp;lt;/li&amp;gt;&quot;+data.result.areano+&quot;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&quot;+data.result.style_citynm+&quot;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&quot;;  
        $(&quot;#divCustomers&quot;).html(time);  
    });  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>redis的安装和使用</title>
   <link href="http://127.0.0.1/redis/2014/07/02/use-redis/"/>
   <updated>2014-07-02T20:56:01+08:00</updated>
   <id>http://127.0.0.1/redis/2014/07/02/use_redis</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#font-colorredwindowsfont&quot; id=&quot;markdown-toc-font-colorredwindowsfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;windows下的安装和使用&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#font-colorredlinuxfont&quot; id=&quot;markdown-toc-font-colorredlinuxfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;linux下的安装和使用&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#font-colorredfont&quot; id=&quot;markdown-toc-font-colorredfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;简单使用&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;font-colorredwindowsfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;windows下的安装和使用&lt;/font&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;下载redis程序软件：redisbin32、redisbin64&lt;/li&gt;
  &lt;li&gt;不需要安装直接使用&lt;/li&gt;
  &lt;li&gt;用doc进入解压过的redis目录，连接reids
redis-server.exe redis.conf?? //进入redis目录 开启redis服务命令重新开启一个cmd命令窗口开始链接redis服务
redis-cli.exe -h 192.168.12.21? //要连接的redis服务器&lt;/li&gt;
  &lt;li&gt;连接redis进行操作&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;font-colorredlinuxfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;linux下的安装和使用&lt;/font&gt;&lt;/h4&gt;

&lt;p&gt;如果安装过程前没有安装GCC请先安装  命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yum install gcc-c++
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;将redis的安装软件下载到linux下/user/local/src（redis命令手册http://readthedocs.org/en/latest/）&lt;/li&gt;
  &lt;li&gt;tar -zxvf redis压缩包&lt;/li&gt;
  &lt;li&gt;进入到解压好的文件夹后，直接make&lt;/li&gt;
  &lt;li&gt;进入到src目录，将src下6个为绿色的文件和他的上一级目录中的redis.conf拷贝(cp)到你的工作目录（user/local/myredis）&lt;/li&gt;
  &lt;li&gt;进入工作目录（/user/local/myredis）下&lt;/li&gt;
  &lt;li&gt;执行redis.server redis.conf默认是前段启动（会占用你的控制台），修改redis.conf为后台进行（把redis.conf中的daemonize 改为yes）&lt;/li&gt;
  &lt;li&gt;netstat -anp | grep 6379（过滤）&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;font-colorredfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;简单使用&lt;/font&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/../images/use_redis.png&quot; alt=&quot;use_redis&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> 图片防盗链  </title>
   <link href="http://127.0.0.1/php/2014/07/02/php/"/>
   <updated>2014-07-02T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/07/02/php</id>
   <content type="html">&lt;p&gt;1.在Apache配置中及域名底下加上彪红色的内容&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost _default_:80&amp;gt;  
DocumentRoot &quot;F:\phpstudy\WWW&quot;  
  &amp;lt;Directory &quot;F:\phpstudy\WWW&quot;&amp;gt;  
    Options +Indexes +FollowSymLinks +ExecCGI  
    AllowOverride All  
    Order allow,deny  
    Allow from all  
    Require all granted  
  &amp;lt;/Directory&amp;gt;  
  RewriteEngine on  
  RewriteCond %{HTTP_REFERER} !^$  
  RewriteCond %{HTTP_REFERER} !^http://localhost/ [NC]  
   RewriteRule \.(gif|jpg|png)$ https://www.baidu.com/img/bd_logo1.png [L]  
&amp;lt;/VirtualHost&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.重启Apache&lt;/p&gt;

&lt;p&gt;3.在localhost底下建立一个文件夹day1/&lt;/p&gt;

&lt;p&gt;day1中包含uploads(包含图片)  和 test.html&lt;/p&gt;

&lt;p&gt;test.html中的内容&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost/study_three/uploads/one.jpg&quot; width=&quot;150px&quot; height=&quot;150px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用localhost访问照片&lt;/p&gt;

&lt;p&gt;用127.0.0.1访问照片&lt;/p&gt;

&lt;p&gt;4.完成配置&lt;/p&gt;

&lt;p&gt;这样你就只有在你localhost底下才可以看到自己的图片，用别的域名或者127.0.0.1都不可以看到你所看到的图片&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Redis简介</title>
   <link href="http://127.0.0.1/redis/2014/06/30/redis/"/>
   <updated>2014-06-30T20:56:01+08:00</updated>
   <id>http://127.0.0.1/redis/2014/06/30/redis</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#font-colorredredisfont&quot; id=&quot;markdown-toc-font-colorredredisfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;redis的介绍&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#font-colorredredismemcachefont&quot; id=&quot;markdown-toc-font-colorredredismemcachefont&quot;&gt;&lt;font color=&quot;red&quot;&gt;redis与memcache的区别&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;font-colorredredisfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;redis的介绍&lt;/font&gt;&lt;/h4&gt;

&lt;p&gt;Redis是一个开源的使用ANSIC语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。&lt;/p&gt;

&lt;font color=&quot;red&quot;&gt;Redis&lt;/font&gt;
&lt;p&gt;是一个高性能的key-value数据库，它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。&lt;/p&gt;

&lt;font color=&quot;red&quot;&gt;Redis&lt;/font&gt;
&lt;p&gt;支持主从同步，主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步&lt;/p&gt;

&lt;h4 id=&quot;font-colorredredismemcachefont&quot;&gt;&lt;font color=&quot;red&quot;&gt;redis与memcache的区别&lt;/font&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。&lt;/li&gt;
  &lt;li&gt;Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。&lt;/li&gt;
  &lt;li&gt;虚拟内存–Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘&lt;/li&gt;
  &lt;li&gt;分布式–设定memcache集群，利用magent做一主多从;redis可以做一主多从。都可以一主一从&lt;/li&gt;
  &lt;li&gt;存储数据安全–memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）&lt;/li&gt;
  &lt;li&gt;灾难恢复–memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复&lt;/li&gt;
  &lt;li&gt;Redis支持数据的备份，即master-slave模式的数据备份。&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>php中的header汇总 </title>
   <link href="http://127.0.0.1/php/2014/06/16/header/"/>
   <updated>2014-06-16T00:00:00+08:00</updated>
   <id>http://127.0.0.1/php/2014/06/16/header</id>
   <content type="html">&lt;p&gt;Content-Type: xxxx/yyyy
Location: xxxx:yyyy/zzzz
Status: nnn xxxxxx
在新的多型标头规格 (Multipart MIME) 方可以出现二次以上。&lt;/p&gt;

&lt;p&gt;使用范例
范例一: 本例使浏览器重定向到 PHP 的官方网站。
&lt;code&gt;php
&amp;lt;?PHP
Header(&quot;Location: http://www.php.net&quot;;);
exit;
?&amp;gt;
&lt;/code&gt;
范例二: 要使用者每次都能得到最新的资料，而不是 Proxy 或 cache 中的资料，可以使用下列的标头
&lt;code&gt;php
&amp;lt;?php
header(&quot;Expires: Mon, 26 Jul 1997 05:00:00 GMT&quot;);
header(&quot;Last-Modified: &quot; . gmdate(&quot;D, d M Y H:i:s&quot;) . &quot;GMT&quot;);
header(&quot;Cache-Control: no-cache, must-revalidate&quot;);
header(&quot;Pragma: no-cache&quot;);
?&amp;gt;
&lt;/code&gt;
范例三: 让使用者的浏览器出现找不到档案的信息。
&lt;?php
header(&quot;Status: 404 Not Found&quot;);
?&gt;
范例四:让使用者下载档案。
&lt;code&gt;php
&amp;lt;?php
header(&quot;Content-type: application/x-gzip&quot;);
header(&quot;Content-Disposition: attachment; filename=文件名&quot;);
header(&quot;Content-Descrīption: PHP3 Generated Data&quot;);
?&amp;gt;
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>apache的几个设置（目录，权限等） </title>
   <link href="http://127.0.0.1/apache/2014/06/15/apache/"/>
   <updated>2014-06-15T00:00:00+08:00</updated>
   <id>http://127.0.0.1/apache/2014/06/15/apache</id>
   <content type="html">&lt;p&gt;Apache 实现禁止图片盗链&lt;/p&gt;

&lt;p&gt;1、假设充许连结图片的主机域名为：www.demo.com.cn&lt;/p&gt;

&lt;p&gt;2、修改httpd.conf&lt;/p&gt;

&lt;p&gt;Code:
SetEnvIfNoCase Referer “^http://www.demo.com.cn/” local_ref=1
&amp;lt;FilesMatch “.(gif|jpg)”&amp;gt;
Order Allow,Deny
Allow from env=local_ref
&amp;lt;/FilesMatch&amp;gt;&lt;/p&gt;

&lt;p&gt;这个简单的应用不光可以解决图片盗链的问题，稍加修改还可以防止任意文件盗链下载的问题。&lt;/p&gt;

&lt;p&gt;使用以上的方法当从非指定的主机连结图片时，图片将无法显示，如果希望显示一张“禁止盗链”的图片，我们可以用mod_rewrite 来实现。&lt;/p&gt;

&lt;p&gt;首先在安装 apache 时要加上 –enable-rewrite 参数加载 mod_rewrite 模组。&lt;/p&gt;

&lt;p&gt;假设“禁止盗链”的图片为abc.gif，我们在 httpd.conf 中可以这样配置：&lt;/p&gt;

&lt;p&gt;Code:
RewriteEngine on
RewriteCond %{HTTP_REFERER} !^$
RewriteCond %{HTTP_REFERER} !^http://(www/.)?demo.com.cn /.*$ [NC]
RewriteRule /.(gif|jpg)$ http://www.demo.com.cn/abc.gif [R,L]&lt;/p&gt;

&lt;p&gt;＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋＋&lt;/p&gt;

&lt;p&gt;DocumentRoot “/usr/local/apache/htdocs”
#设置存放站点html文件的目录。&lt;/p&gt;

&lt;Directory /&gt;

&lt;p&gt;Options FollowSymLinks
AllowOverride None
&amp;lt;/Directory&amp;gt;
#设置/目录的指令。具体地说明：
Option：定义在目录内所能执行的操作。
None：表示只能浏览，
FollowSymLinks：允许页面连接到别处，
ExecCGI：允许执行CGI，
MultiViews：允许看动画或是听音乐之类的操作，
Indexes：允许服务器返回目录的格式化列表，
Includes：允许使用SSI。这些设置可以复选。
All：则可以做任何事，但不包括MultiViews。
AllowOverride：加None参数表示任何人都可以浏览该目录下的文件。
另外的参数有：FileInfo、AuthConfig、Limit。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> 原来JSON这么简单,哇哈哈      </title>
   <link href="http://127.0.0.1/json/2014/06/14/json/"/>
   <updated>2014-06-14T00:00:00+08:00</updated>
   <id>http://127.0.0.1/json/2014/06/14/json</id>
   <content type="html">&lt;p&gt;运用JAVAscrīpt的对象,如下所示:
```php&lt;/p&gt;
&lt;scrīpt&gt;

var json = {&#39;title&#39;:&#39;jsontitle&#39;,&#39;content&#39;:&#39;jsoncontent&#39;,&#39;notice&#39;:&#39;jsonnotice&#39;};

&lt;/scrīpt&gt;
&lt;p&gt;&lt;code&gt;
那么可以用以下方式调用
&lt;/code&gt;php&lt;/p&gt;
&lt;scrīpt&gt;

alert(json.title);

alert(json.content);

alert(json.notice);

&lt;/scrīpt&gt;
&lt;p&gt;&lt;code&gt;
如果把这些属性以字符串的形式放在一个网页里,用eval()函数将其转换为对象,那么就是JSON的应用了,如下所示
&lt;/code&gt;php
JSON页&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;‘title’:’jsontitle’,&lt;/p&gt;

&lt;p&gt;‘content’:’jsoncontent’,&lt;/p&gt;

&lt;p&gt;‘notice’:’jsonnotice’&lt;/p&gt;

&lt;p&gt;}
&lt;code&gt;
调用页,使用AJAX获取到JSON页面内容,返回的字符串假定为变量json
&lt;/code&gt;php&lt;/p&gt;
&lt;scrīpt&gt;

var ōbj = new Object;

obj = eval(&#39;(&#39;+json+&#39;)&#39;);

&lt;/scrīpt&gt;
&lt;p&gt;```
这样就可以用获取到的数据来进行操作了,EASY吧.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>微信支付流程!</title>
   <link href="http://127.0.0.1/naringu/2014/06/12/wei/"/>
   <updated>2014-06-12T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/06/12/wei</id>
   <content type="html">&lt;p&gt;支付模式&lt;/p&gt;

&lt;p&gt;刷卡支付：刷卡支付是用户展示微信钱包内的“刷卡条码/二维码”给商户系统扫描后直接完成支付的模式。主要应用线下面对面收银的场景。&lt;/p&gt;

&lt;p&gt;扫码支付：扫码支付是商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式。该模式适用于PC网站支付、实体店单品或订单支付、媒体广告支付等场景。&lt;/p&gt;

&lt;p&gt;公众号支付是用户在微信中打开商户的H5页面，商户在H5页面通过调用微信支付提供的JSAPI接口调起微信支付模块完成支付。应用场景有：
1) 用户在微信公众账号内进入商家公众号，打开某个主页面，完成支付
2) 用户的好友在朋友圈、聊天窗口等分享商家页面连接，用户点击链接打开商家页面，完成支付
3) 将商户页面转换成二维码，用户扫描二维码后在微信浏览器中打开页面后完成支付&lt;/p&gt;

&lt;p&gt;APP支付：APP支付又称移动端支付，是商户通过在移动端应用APP中集成开放SDK调起微信支付模块完成支付的模式。&lt;/p&gt;

&lt;p&gt;1.获取订单信息&lt;/p&gt;

&lt;p&gt;2.根据订单信息和支付相关的账号生成sign，并且生成支付参数&lt;/p&gt;

&lt;p&gt;3.将支付参数信息POST到微信服务器，获取返回信息&lt;/p&gt;

&lt;p&gt;4.根据返回信息生成相应的支付代码（微信内部）或是支付二维码（非微信内），完成支付。&lt;/p&gt;

&lt;p&gt;下面分步骤的讲一下：&lt;/p&gt;

&lt;p&gt;1.微信支付中相关的必须的订单参数有三个，分别是：body(商品名或订单描述),out_trade_no（一般为订单号）和total_fee（订单金额，单位“分”，要注意单位问题），在不同的应用中，首先要做的就是获取订单中的相关信息，为支付参数生成做准备。&lt;/p&gt;

&lt;p&gt;2.其他必须的支付参数有 appid（微信appid），mch_id（申请成功后告知）,device_info(web端和微信端该参数都是统一的，为大写的”WEB“)，trade_type（根据使用场景不同，该值也是不同的，微信外部为”NATIVE“，微信内部为”JSAPI“）,nonce_str(32位随机字符串),spbill_create_ip（发起支付的终端IP，即服务器IP），notify_url（支付回调地址，微信服务器通知网站支付完成与否，修改订单状态），sign（签名），还有一个需要说明的地方，如果trade_type为JSAPI的话，openid为必填的参数。&lt;/p&gt;

&lt;p&gt;签名算法是比较容易出错的地方，在于签名步骤繁琐，其实很关键的是，sign不参与签名&lt;/p&gt;

&lt;p&gt;A：将1、2中提到的除sign外的参数赋值，放到一个数组array里面，按照字典顺序排序，其实就是键值按照A—Z的顺序进行排序。&lt;/p&gt;

&lt;p&gt;B：将数组转换成字符串string，格式为 k1=v1&amp;amp;k2=v2&amp;amp;…kN=vN&lt;/p&gt;

&lt;p&gt;C：在此string后加上KEY值（在微信支付商户后台用户自己设定的）现在string = k1=v1&amp;amp;k2=v2&amp;amp;…kN=vN&amp;amp;key=KEY。&lt;/p&gt;

&lt;p&gt;D：string = md5(string)&lt;/p&gt;

&lt;p&gt;E: sign = strtoupper(string)&lt;/p&gt;

&lt;p&gt;至此，sign生成完毕。&lt;/p&gt;

&lt;p&gt;将sign添加到array数组里面生成新的数组。将该数组转换为XML。至此，微信支付的参数准备工作完成。&lt;/p&gt;

&lt;p&gt;3.将2中生成的XML，使用POST的方式发送请求到微信（https://api.mch.weixin.qq.com/pay/unifiedorder），获取返回的XML信息，将该信息转换成数组格式方便操作。返回的XML信息如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/return_code&amp;gt;
   &amp;lt;return_msg&amp;gt;&amp;lt;![CDATA[OK]]&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wx2421b1c4370ec43b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/appid&amp;gt;
   &amp;lt;mch_id&amp;gt;&amp;lt;![CDATA[10000100]]&amp;gt;&amp;lt;/m&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonce_str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IITRi8Iabbblz1Jc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/nonce_str&amp;gt;
   &amp;lt;sign&amp;gt;&amp;lt;![CDATA[7921E432F65EB8ED0CE9755F0E86D72F]]&amp;gt;&amp;lt;/si&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/result_code&amp;gt;
   &amp;lt;prepay_id&amp;gt;&amp;lt;![CDATA[wx201411101639507cbf6ffd8b0779950874]]&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepay_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trade_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/trade_type&amp;gt;
&amp;lt;/xm&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果是trade_type==native支付的话，还会多一个参数code_url，该URL为微信扫码支付的地址。&lt;/p&gt;

&lt;p&gt;4.下面就是支付的过程了。&lt;/p&gt;

&lt;p&gt;如果trade_type==native，那么使用一些方式将code_url转换成二维码，使用微信扫码就可以了，如果是微信内部点击支付的话，需要调用微信js-sdk中的相关东西，这一步中最关键是生成一个json格式的字符串。&lt;/p&gt;

&lt;p&gt;首先要生成转换json字符串的数组array_jsapi。&lt;/p&gt;

&lt;p&gt;A：该数组的参数包括：appId，timeStamp,nonceStr,package,signType(默认为”MD5“)，要注意大小写和上面的数组里面是不一样的。&lt;/p&gt;

&lt;p&gt;B：使用该数组生成paySign参数，签名方式同上。&lt;/p&gt;

&lt;p&gt;C：将paySign参数追加到array_jsapi数组中。&lt;/p&gt;

&lt;p&gt;D：将该数组使用json_encode格式化为字符串js_string。&lt;/p&gt;

&lt;p&gt;完成上面的工作，就可以在微信内部进行支付了。&lt;/p&gt;

&lt;p&gt;下面为相关支付的示例代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;text/javascript&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsApiCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;WeixinJSBridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;getBrandWCPayRequest&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$js_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;WeixinJSBridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;err_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;err_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;get_brand_wcpay_request:ok&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;支付成功&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;支付失败&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callpay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WeixinJSBridge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;undefined&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;WeixinJSBridgeReady&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsApiCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;WeixinJSBridgeReady&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsApiCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attachEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;onWeixinJSBridgeReady&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsApiCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;jsApiCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;代码中js_string即为我们生成的字符串。&lt;/p&gt;

&lt;p&gt;HTML代码中调用callpay()函数发起支付。&lt;/p&gt;

&lt;p&gt;这样微信支付的支付工作就完成了。&lt;/p&gt;

&lt;p&gt;下面是回调工作，该功能确保订单支付成功后，有正确的状态显示给用户。&lt;/p&gt;

&lt;p&gt;支付完成后，微信使用POST请求，将支付结果反馈给网站服务器，网站服务器获取POST信息，根据支付成功与否，来确定是否修改订单信息。&lt;/p&gt;

&lt;p&gt;A：将POST参数中的sign去除，并且记录下来该值。&lt;/p&gt;

&lt;p&gt;B：对剩余的参数进行签名&lt;/p&gt;

&lt;p&gt;C：将签名结果和POST中的sign进行比对，相同说明签名正确，根据支付结果修改订单状态。&lt;/p&gt;

&lt;p&gt;E：返回XML信息给微信，确保微信知道网站已经收到该通知，避免微信再次推送POST，示例如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/return_code&amp;gt;
  &amp;lt;return_msg&amp;gt;&amp;lt;![CDATA[OK]]&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/xml&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果失败，则返回&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CDATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/return_code&amp;gt;
  &amp;lt;return_msg&amp;gt;&amp;lt;![CDATA[失败原因]]&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/xml&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至此，微信支付的整个开发介绍完毕。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> centos7 安装memcached以及扩展   </title>
   <link href="http://127.0.0.1/linux/2014/06/10/centos/"/>
   <updated>2014-06-10T00:00:00+08:00</updated>
   <id>http://127.0.0.1/linux/2014/06/10/centos</id>
   <content type="html">&lt;p&gt;安装memcached
```php
yum install memcached&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
启动 memcached
&lt;/code&gt;php
/usr/bin/memcached -d -m 64M -u root -l 192.168.1.118 -p 11211 -c 256 -P /tmp/memcached.pid
&lt;code&gt;
查看进程
&lt;/code&gt;php
ps  -aux |grep memcached
&lt;code&gt;
使用memcached
&lt;/code&gt;php
yum install telnet
```
telnet  192.168.1.118 11211&lt;/p&gt;

&lt;p&gt;测试
```php
set runoob 0 900 9
memcached
STORED&lt;/p&gt;

&lt;p&gt;get runoob
VALUE runoob 0 9
memcached&lt;/p&gt;

&lt;p&gt;wget http://pecl.php.net/get/memcache-2.2.7.tgz             &lt;br /&gt;
tar -zxvf memcache-2.2.7.tgz
cd memcache-2.2.7
/usr/local/php/bin/phpize
./configure –with-php-config=/usr/local/php/bin/php-config
make &amp;amp;&amp;amp; make install
```
END&lt;/p&gt;

&lt;p&gt;恭喜你memcached安装成功了.&lt;/p&gt;

&lt;p&gt;memcached 扩展
PHP 连接 Memcached 服务
PHP memcache 扩展包下载地址：http://pecl.php.net/package/memcache，你可以下载最新稳定包&lt;/p&gt;

&lt;p&gt;```php
wget http://pecl.php.net/get/memcache-2.2.7.tgz             &lt;br /&gt;
tar -zxvf memcache-2.2.7.tgz
cd memcache-2.2.7
/usr/bin/phpize
./configure –with-php-config=/usr/bin/php-config
(如果失败重新来换作)
./configure –enable-memcache –with-php-config=/usr/bin/php-config –with-zlib-dir&lt;/p&gt;

&lt;p&gt;make &amp;amp;&amp;amp; make install&lt;/p&gt;

&lt;p&gt;(如果make失败,yum install -y zlib.x86_64 zlib-devel.x86_64)
```&lt;/p&gt;

&lt;p&gt;修改php文件
&lt;code&gt;php
vi /etc/php.ini
&lt;/code&gt;
添加
```php
extension = memcache.so&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
重启 apache
&lt;/code&gt;php
systemctl restart httpd.service #重启apache 
```&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title> 代码 json 的运用 </title>
   <link href="http://127.0.0.1/json/2014/06/07/json/"/>
   <updated>2014-06-07T00:00:00+08:00</updated>
   <id>http://127.0.0.1/json/2014/06/07/json</id>
   <content type="html">&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
    $(function(){  
        $(&#39;#button&#39;).click(function(){  
            var pid=$(&#39;#select&#39;).val();  
           // alert(pid);  
            var start=$(&#39;.start&#39;).val();  
            var over=$(&#39;.over&#39;).val();  
  
  
            $.getJSON(&quot;b.php&quot;,{pid:pid,start:start,over:over},function(msg){  
  
  
                var str=&#39;&#39;;  
                for(var i=0;i&amp;lt;msg[&#39;arr&#39;].length;i++)  
                {  
                    str=str+&quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&quot;+msg[&#39;arr&#39;][i].name+&quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;;  
                }  
                $(&#39;div&#39;).html(str);  
            })  
        })  
    })  
  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>TCP协议中的三次握手和四次挥手</title>
   <link href="http://127.0.0.1/http/2014/05/07/tcp/"/>
   <updated>2014-05-07T20:56:01+08:00</updated>
   <id>http://127.0.0.1/http/2014/05/07/tcp</id>
   <content type="html">
&lt;p&gt;TCP协议的三次握手：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/../images/tcp_one.png&quot; alt=&quot;tcp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TCP协议的四次挥手：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/../images/tcp_two.png&quot; alt=&quot;tcp&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> WebRTC学习资料大全    </title>
   <link href="http://127.0.0.1/web/2014/04/12/rtc/"/>
   <updated>2014-04-12T00:00:00+08:00</updated>
   <id>http://127.0.0.1/web/2014/04/12/rtc</id>
   <content type="html">&lt;p&gt;在学习WebRTC，找了些资料，记录一下，供以后查询。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;有些需要翻墙才能看
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebRTC 介绍&lt;/p&gt;

&lt;p&gt;官网在这里：https://webrtc.org/。然后这里有一个官方的Getting Started：https://webrtc.org/start/。&lt;/p&gt;

&lt;p&gt;Google关于WebRTC的幻灯片：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://io13webrtc.appspot.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后是WebRTC的SPEC：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.w3.org/TR/webrtc/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebRTC项目源码地址：https://chromium.googlesource.com/external/webrtc。&lt;/p&gt;

&lt;p&gt;Native开发文档：https://webrtc.org/native-code/development/。
教程&lt;/p&gt;

&lt;p&gt;入门的，首选codelabs的Real time communication with WebRTC：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://codelabs.developers.google.com/codelabs/webrtc-web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后是html5rocks上的基础教程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.html5rocks.com/en/tutorials/webrtc/basics/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开发文档、入门教程，参考这里：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://developer.mozilla.org/en-US/docs/Web/Guide/API/WebRTC/Peer-to-peer_communications_with_WebRTC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，http://piratefsh.github.io/projects/2015/08/27/webrtc-stun-turn-servers.html，是一个人部署stun和turn server的记录。&lt;/p&gt;

&lt;p&gt;进阶一点的，看这个，比较完整的介绍和实践：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://blog.mgechev.com/2014/12/26/multi-user-video-conference-webrtc-angularjs-yeoman/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有这个，介绍如何用WebRTC一步一步实现视频会议：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.cleveroad.com/blog/webrtc-step-by-step-implementation-of-video-conference
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还找到一个中文版的教程，通过WebRTC实现实时视频通信：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;通过WebRTC实现实时视频通信（一）
通过WebRTC实现实时视频通信（二）
通过WebRTC实现实时视频通信（三）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;STUN/TURN/Signaling解决方案&lt;/p&gt;

&lt;p&gt;WebRTC需要Signaling、STUN、TURN等Server，Google有自己的，还有很多开源的，也有收费的。&lt;/p&gt;

&lt;p&gt;免费的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Signaling Server需要自己实现，如果你用Nodejs和Socket.io的话，比较容易做。https://codelabs.developers.google.com/codelabs/webrtc-web这里就有一个示例。
Google的STUN服务器：stun:stun.l.google.com:19302
restund：http://www.creytiv.com/restund.html。
rfc5766-turn-server: https://code.google.com/p/rfc5766-turn-server。挪到这里了：https://github.com/coturn/rfc5766-turn-server/，支持STUN和TURN
http://www.pjsip.org/, PJSIP，支持STUN、TURN、ICE。
https://nice.freedesktop.org/wiki/，libnice，支持ICE和STUN。
http://www.stunprotocol.org/，STUNTMAN，对应的代码，https://github.com/jselbie/stunserver
https://sourceforge.net/projects/stun/，STUN client and server
https://github.com/coturn/coturn，C++实现的STUN和TURN服务器，这里有一个安装指南：https://www.webrtc-experiment.com/docs/TURN-server-installation-guide.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里有一个WebRTC服务器搭建的文档：http://io.diveinedu.com/2015/02/05/%E7%AC%AC%E5%85%AD%E7%AB%A0-WebRTC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html。&lt;/p&gt;

&lt;p&gt;收费的解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.onsip.com/blog/webrtc-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开源示例&lt;/p&gt;

&lt;p&gt;还有一些开源的示例代码，这个比较全了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/webrtc/samples
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对应的demo在这里（Chrome打开可以看效果）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://webrtc.github.io/samples
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;回退一级，还有更多资源：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/webrtc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有一个，SimpleWebRTC：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/andyet/SimpleWebRTC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/mgechev/angular-webrtc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯，接下来这个更赞，支持多人视频会议，开源的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/jitsi，对应的演示地址https://meet.jit.si/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;世界上第一个基于HTML5的SIP客户端：https://www.doubango.org/sipml5/。他们的GitHub主页：https://github.com/DoubangoTelecom/doubango。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2016.11.10补充
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;又找到一个国内的小示例，WebRTC实现网页版多人视频聊天室：http://www.cnblogs.com/FuzhePan/p/3899551.html。看样子是多人聊天室，一对一视频的实现。&lt;/p&gt;

&lt;p&gt;还有一个WebRTC native demo：http://sourcey.com/webrtc-native-to-browser-video-streaming-example/，能够在C++的客户端和浏览器之间视频通信。
在线演示&lt;/p&gt;

&lt;p&gt;搜集了一些在线演示的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://apprtc.appspot.com
http://www.simpl.info/getusermedia
https://webrtc.github.io/samples
http://webcamtoy.com/app/
http://www.shinydemos.com/facekat/
http://idevelop.ro/ascii-camera/
https://meet.jit.si/，多人的视频会议
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;围绕WebRTC的框架和服务&lt;/p&gt;

&lt;p&gt;框架，视频通信的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/webrtc/adapter，封装了浏览器差异
https://github.com/henrikjoreteg/SimpleWebRTC，前面说过这个链接了
https://github.com/priologic/easyrtc
https://github.com/webRTC/webRTC.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Peer间传递数据的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://peerjs.com/
https://github.com/peer5/sharefest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.tokbox.com/
http://www.vline.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RTCMultiConnection，JS封装库和Signaling服务：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/muaz-khan/RTCMultiConnection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图书&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;《Real-Time Communication with WebRTC》，https://bloggeek.me/book-webrtc-salvatore-simon/
https://bloggeek.me/best-webrtc-book/，这里介绍了5本书。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;课程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://bloggeek.me/course/webrtc-architecture/
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title> centos7 安装redis和redis扩展    </title>
   <link href="http://127.0.0.1/linux/2014/04/11/centos/"/>
   <updated>2014-04-11T00:00:00+08:00</updated>
   <id>http://127.0.0.1/linux/2014/04/11/centos</id>
   <content type="html">&lt;p&gt;安装Redis
```php
http://www.redis.NET.cn/download&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://download.redis.io/releases/redis-3.0.6.tar.gz
$ tar xzf redis-3.0.6.tar.gz
$ cd redis-3.0.6
$ make #如果make失败,请安装gcc   yum install gcc  重新解压安装 ``` 使用：
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二进制文件是编译完成后在src目录下. 运行如下:
&lt;code&gt;php
    $ src/redis-server
&lt;/code&gt;
你能使用Redis的内置客户端进行进行redis代码的编写:
```php
    $ src/redis-cli
    redis&amp;gt; set foo bar
    OK
    redis&amp;gt; get foo
    “bar”&lt;/p&gt;

&lt;p&gt;```
PHP 使用 redis&lt;/p&gt;

&lt;p&gt;下载地址：https://github.com/phpredis/phpredis/releases （最高版本）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php
 $ wget https://github.com/phpredis/phpredis/archive/2.2.7.tar.gz
 $ tar zxvf 2.2.7.tar.gz
 $ cd phpredis-2.2.7                      # 进入 phpredis 目录
 $ /usr/bin/phpize              # php安装后的路径
 (如果不成功,请安装php-devel   yum install php-devel )
 $ ./configure --with-php-config=/usr/bin/php-config
 $ make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改php.ini文件
&lt;code&gt;php
vi /etc/php.ini
&lt;/code&gt;
添加
&lt;code&gt;php
extension=redis.so
&lt;/code&gt;
重启apache
```php
systemctl restart httpd.service #重启apache&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> centos7 安装ssh扩展控制linux  </title>
   <link href="http://127.0.0.1/linux/2014/04/09/ssh2/"/>
   <updated>2014-04-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/linux/2014/04/09/ssh2</id>
   <content type="html">&lt;p&gt;安装ssh2&lt;/p&gt;

&lt;p&gt;PHP的一个扩展ssh2. 下载ssh2扩展，从http://pecl.php.NET/package/ssh2&lt;/p&gt;

&lt;p&gt;如果是php5安装ssh2-0.13或0.12扩展,php7安装1.0&lt;/p&gt;

&lt;p&gt;wget http://pecl.php.Net/get/ssh2-0.13.tgz&lt;/p&gt;

&lt;p&gt;tar -zxvf ssh2-0.13.tgz
cd ssh2-0.13/&lt;/p&gt;

&lt;p&gt;/usr/bin/phpize&lt;/p&gt;

&lt;p&gt;./configure –with-php-config=/usr/bin/php-config LIBS=-ldl&lt;/p&gt;

&lt;p&gt;(如果失败,请安装 yum install libssh2-devel)&lt;/p&gt;

&lt;p&gt;make&lt;/p&gt;

&lt;p&gt;make install&lt;/p&gt;

&lt;p&gt;测试&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
  
$host=&#39;127.0.0.1&#39;;//被控制的linux的ip  
  
$user=&#39;root&#39;;//用户名  
  
$passwd=&#39;123456&#39;;//密码  
  
// 链接远程服务器  
  
$connection = ssh2_connect($host, 22);  
  
if (!$connection) die(&#39;connection to &#39;.$host.&#39;:22 failed&#39;);  
  
echo &#39;connection OK&amp;lt;br/&amp;gt;&#39;;  
  
// 获取验证方式并打印  
  
$auth_methods = ssh2_auth_none($connection, $user);  
  
print_r( $auth_methods.&#39;&amp;lt;br/&amp;gt;&#39;);  
  
if (in_array(&#39;password&#39;, $auth_methods ))  
{  
  
    // 通过password方式登录远程服务器  
  
    if (ssh2_auth_password($connection, $user, $passwd))  
  
    {  
  
        echo $user.&#39; login OK&amp;lt;br/&amp;gt;&#39;;  
  
        $stream = ssh2_exec($connection, &quot;pwd&quot;); // 执行php  
  
        stream_set_blocking($stream, true); // 获取执行pwd后的内容  
  
         if ($stream === FALSE) die(&quot;pwd failed&quot;);  
  
        echo &#39;pwd: &#39;.stream_get_contents($stream).&#39;&amp;lt;br/&amp;gt;&#39;;  
  
    }  
  
    else  
  
    {  
  
        die( $user.&#39; login Failed&amp;lt;br/&amp;gt;&#39;);  
  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>  keepalived 检测  </title>
   <link href="http://127.0.0.1/keepalived/2014/04/08/keepalived/"/>
   <updated>2014-04-08T00:00:00+08:00</updated>
   <id>http://127.0.0.1/keepalived/2014/04/08/keepalived  </id>
   <content type="html">&lt;p&gt;通常说的双机热备是指两台机器都在运行，但并不是两台机器都同时在提供服务。
当提供服务的一台出现故障的时候，另外一台会马上自动接管并且提供服务，而且切换的时间非常短。&lt;/p&gt;

&lt;p&gt;主服务器：192.168.1.118&lt;/p&gt;

&lt;p&gt;从服务器：192.168.1.192&lt;/p&gt;

&lt;p&gt;虚拟ip:192.168.1.223&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install keepalived  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改主服务器配置文件&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim  /etc/keepalived/keepalived.conf  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;! Configuration File for keepalived  
  
   
  
global_defs {  
  
   notification_email {  
  
     #acassen@firewall.loc没有服务器配置邮箱可将其注释掉  
  
     #failover@firewall.loc  
  
     #sysadmin@firewall.loc  
  
   }  
  
   #notification_email_from Alexandre.Cassen@firewall.loc  
  
   #smtp_server 192.168.200.1  
  
   #smtp_connect_timeout 30  
  
   router_id LVS_DEVEL  
  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vrrp_instance VI_1 {  
  
    state MASTER  
  
    interface eno16777736  
  
    virtual_router_id 51#和slave一样  
  
    priority 100#主机高于slave  
  
    advert_int 1#检测服务器状态间隔时间  
  
    authentication {  
  
        auth_type PASS  
  
        auth_pass 1111  
  
    }  
  
    virtual_ipaddress {  
  
        192.168.1.223#虚拟IP地址，可以为多个  
  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开启服务&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start keepalived  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改slave配置&lt;/p&gt;

&lt;p&gt;! Configuration File for keepalived&lt;/p&gt;

&lt;p&gt;global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 192.168.200.1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
}&lt;/p&gt;

&lt;p&gt;vrrp_instance VI_1 {
    state BACKUP
    interface eno16777736
    virtual_router_id 51
    priority 99
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }&lt;/p&gt;

&lt;p&gt;virtual_ipaddress {
        192.168.1.223
    }
}&lt;/p&gt;

&lt;p&gt;在两台机器上使用 “ip a”查看虚拟IP信息&lt;/p&gt;

&lt;p&gt;就可以比较出来了.祝各位成功.&lt;/p&gt;

&lt;p&gt;还有我们使用yum安装的. 还有一点就是&lt;/p&gt;

&lt;p&gt;rpm -ql keepalived&lt;/p&gt;

&lt;p&gt;vi /usr/share/doc/keepalived-1.2.13/samples/keepalived.conf.vrrp.localcheck&lt;/p&gt;

&lt;p&gt;这个里面有例子。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>JavaScript 语言精粹笔记3-方法、毒瘤等</title>
   <link href="http://127.0.0.1/javascript/2014/03/10/javascript-good-parts-note3/"/>
   <updated>2014-03-10T00:00:00+08:00</updated>
   <id>http://127.0.0.1/javascript/2014/03/10/JavaScript-good-parts-note3</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;毒瘤&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;糟粕&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为书中最后一部分：方法、代码风格、优美的特性、毒瘤、糟粕等。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;这一章主要介绍了一些方法集。这里写几个我不太熟悉的方法和要点吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;array.join()&lt;/code&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;对于IE6/7，使用&lt;code&gt;array.join()&lt;/code&gt;连接大量字符串的效率确实优于使用&lt;code&gt;+&lt;/code&gt;元素运算符。但是目前主流的浏览器，包括IE8以后的版本，都对&lt;code&gt;+&lt;/code&gt;元素运算符连接字符串做了特别优化，性能已经显著高于&lt;code&gt;array.join()&lt;/code&gt;。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;number.toExponential(fractionDigits)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;把这个&lt;code&gt;number&lt;/code&gt;转换成一个指数形式的字符串。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;number.toFixed(fractionDigits)&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;将这个&lt;code&gt;number&lt;/code&gt;转换成一个十进制形式的字符串。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;毒瘤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;注意全局变量的引入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript 中 Unicode 是16位的。包含65536个字符（基本多文种平面 Basic Multilingual Plane）。剩下的百万字符中的每一个都可以用一对字符来表示。Unicode 把一对字符视为一个单一的字符，而 JavaScript 认为一对字符是两个不同的字符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;检测&lt;code&gt;null&lt;/code&gt;的方式。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```js
console.log(typeof null) //object&lt;/p&gt;

&lt;p&gt;myValue === null //检测 null&lt;/p&gt;

&lt;p&gt;if (myValue &amp;amp;&amp;amp; typeof myValue === ‘object’) {
    // myValue 是一个对象或数组！
}
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;parseInt&lt;/code&gt; 把字符串转化为整数的函数。它遇到非数字时会停止解析，所以&lt;code&gt;parseInt(&#39;16&#39;)&lt;/code&gt;和&lt;code&gt;parseInt(&#39;16ton&#39;)&lt;/code&gt;产生相同的结果。&lt;/p&gt;

    &lt;p&gt;如果该字符串第一个字符是0，那么该字符串会基于八进制而不是十进制来求职。在八进制中，8和9不是数字，所以&lt;code&gt;parseInt(&#39;08&#39;)&lt;/code&gt;和&lt;code&gt;parseInt(&#39;09&#39;)&lt;/code&gt;都产生0作为结果。但&lt;code&gt;parseInt()&lt;/code&gt;可以接受基数，因此&lt;code&gt;parseInt(&#39;08&#39;,10)&lt;/code&gt;结果为8，建议总是加上这个基数参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript 的对象永远不会是真的空对象，因为它们可以送原型链中取得成员属性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;糟粕&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;避免使用&lt;code&gt;with&lt;/code&gt;语句。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免使用&lt;code&gt;eval&lt;/code&gt;语句。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;continue&lt;/code&gt;可能会降低运算性能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;位运算符在 JavaScript 会非常慢。&lt;/p&gt;

    &lt;p&gt;Java 里，位运算符处理的是整数。JavaScript 没有整数类型，它只有双精度的浮点数，因此，位运算符把它们的数字运算数先转换为整数，执行运算，在转换回去。JavaScript 的执行环境一般接触不到硬件，所以非常慢。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免使用包装对象。&lt;code&gt;new Object&lt;/code&gt;和&lt;code&gt;new Array&lt;/code&gt;等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免使用&lt;code&gt;void&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本系列结束。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>常用的正则表达式!</title>
   <link href="http://127.0.0.1/naringu/2014/03/09/regular/"/>
   <updated>2014-03-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/03/09/regular</id>
   <content type="html">&lt;p&gt;校验密码强度
密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验中文
字符串仅能是中文。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u4e00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u9fa5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由数字、26个英文字母或下划线组成的字符串&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验E-Mail 地址
同密码一样，下面是E-mail地址合规性的正则检查语句。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;p&quot;&gt;[\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w!&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#$%&amp;amp;&#39;*+/=?^_`{|}~-]+(?:\\.[\\w!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验身份证号码
下面是身份证号码的正则校验。15 或 18位。
15位：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;18位：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验日期
“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13578&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2468&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13579&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2468&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13579&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验金额
金额校验，精确到2位小数。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验手机号
下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;判断IE的版本
IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MSIE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?(?!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Trident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[5-9]\\.0).*$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验IP-v4地址
IP4 正则语句。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(?:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;校验IP-v6地址
IP6 正则语句。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:((:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:((:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fe80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(:[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|::&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;检查URL的前缀
应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^[a-zA-Z]+:\\/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;提取URL链接
下面的这个表达式可以筛选出一段文本中的URL。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\\/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[\\w- ./&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;文件路径及扩展名校验
验证windows下文件路径和扩展名（下面的例子中为.txt文件）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]\\&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\\\)\\\\([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\\\]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\\\)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/:*?&quot;&amp;lt;&amp;gt;|]+\\.txt(l)?$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;提取Color Hex Codes
有时需要抽取网页中的颜色代码，可以使用下面的表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;     &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;提取网页图片
假若你想提取网页中所有图片信息，可以利用下面的表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39;]{0,1}([^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;提取页面超链接
提取html中的超链接。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https?:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/)((?!(?:(?:www&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.)?&#39;.implode(&#39;|(?:www&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.)?&#39;, $follow_list).&#39;))[^&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;((?!.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;brel=)[^&amp;gt;]*)(?:[^&amp;gt;]*)&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;查找CSS属性
通过下面的表达式，可以搜索到相匹配的CSS属性。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:]{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#]+[;]{1}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;抽取注释
如果你需要移除HMTL中的注释，可以使用如下的表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;匹配HTML标签
通过下面的表达式可以匹配出HTML中的标签属性。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/?\\w+((\\s+\\w+(\\s*=\\s*(?:&quot;.*?&quot;|&#39;.*?&#39;|[\\^&#39;&quot;&amp;gt;\\s]+))?)+\\s*|\\s*)\\/&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>JavaScript 语言精粹笔记2-继承、数组、正则表达式</title>
   <link href="http://127.0.0.1/javascript/2014/03/08/javascript-good-parts-note2/"/>
   <updated>2014-03-08T00:00:00+08:00</updated>
   <id>http://127.0.0.1/javascript/2014/03/08/JavaScript-good-parts-note2</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;继承&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;伪类&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;对象说明符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;原型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;函数化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;部件&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;数组&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;数组字面量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;长度&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;删除&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;枚举&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;容易混淆的地方&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;指定初始值&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为书中以下章节的笔记：继承、数组和正则表达式。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;继承&lt;/h2&gt;

&lt;p&gt;继承的两大好处：代码重用，引入一套类型系统的规范。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;伪类&lt;/h3&gt;

&lt;p&gt;JavaScript 通过构造器函数产生对象。&lt;/p&gt;

&lt;p&gt;构造器调用模式，即用&lt;code&gt;new&lt;/code&gt;前缀去调用一个函数。&lt;/p&gt;

&lt;p&gt;```js
var Mammal = function(name) {
    this.name = name
}&lt;/p&gt;

&lt;p&gt;Mammal.prototype.getName = function() {
    return this.name
}&lt;/p&gt;

&lt;p&gt;Mammal.prototype.says = function() {
    return this.saying || ‘’
};&lt;/p&gt;

&lt;p&gt;var myMammal = new Mammal(‘Herb’)
console.log(myMammal.getName()) //Herb
```&lt;/p&gt;

&lt;p&gt;书中不推荐这样的写法。有很多风险。若忘记添加&lt;code&gt;new&lt;/code&gt;前缀，&lt;code&gt;this&lt;/code&gt;无法绑定到新的对象上。而是绑定到了全局对象上，破坏了全局变量环境。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;对象说明符&lt;/h3&gt;

&lt;p&gt;上一节中的构造器可能要接受一大串参数。我们可以这样写：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var myObject = Maker({
    first: f,
    middle: m,
    last: l,
    state: s,
    city: c
})
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将JSON对象传递给构造器，而它返回一个构造完全的对象。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;原型&lt;/h3&gt;

&lt;p&gt;在一个纯粹的原型模式中，我们将摒弃类，转而专注于对象。一个新对象可以继承一个就对象的属性。&lt;/p&gt;

&lt;p&gt;```js
var myMammal = {
    name: ‘MM’,
    getName: function() {
        return this.name
    },
    says: function() {
        return this.saying || ‘’
    }
}&lt;/p&gt;

&lt;p&gt;var myCat = Object.create(myMammal)
myCat.name = ‘Kitty’
myCat.saying = ‘meow’
myCat.run = function() {
    return ‘Kitty is running’
}
myCat.getName = function() {
    return this.says + ‘ ‘ + this.name + ‘ ‘ + this.says
}
```&lt;/p&gt;

&lt;p&gt;这是一种差异化继承。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;函数化&lt;/h3&gt;

&lt;p&gt;前文看到的继承模式没法保护隐私。对象的所有属性都是可见的。无法得到私有变量和私有函数。为了解决这一问题，我们有模块模式。&lt;/p&gt;

&lt;p&gt;构造一个生成对象的函数需要4步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个新对象。&lt;/li&gt;
  &lt;li&gt;有选择的定义私有变量和方法。&lt;/li&gt;
  &lt;li&gt;给这个新对象扩充方法。&lt;/li&gt;
  &lt;li&gt;返回那个新对象。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```js
var mammal = function(spec) {
    var that = {}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;that.getName = function() {
    return spec.name
}
that.says = function() {
    return spec.saying || &#39;&#39;
}

return that }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var myMammal = mammal({
    name: ‘Herb’,
    saying: ‘Cheers!’
})&lt;/p&gt;

&lt;p&gt;console.log(myMammal.getName()) //Herb
console.log(myMammal.says()) //Cheers!
```&lt;/p&gt;

&lt;p&gt;也可以参考上一篇文章，&lt;a href=&quot;http://gaohaoyang.github.io/2016/06/07/JavaScript-good-parts-note1/#section-34&quot;&gt;JavaScript 语言精粹笔记1-语法、对象、函数 之模块部分&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;部件&lt;/h3&gt;

&lt;p&gt;这一部分看的不是特别懂，我想等我学完ES2015中的类和模块部分后再看看吧。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;数组&lt;/h2&gt;

&lt;h3 id=&quot;section-7&quot;&gt;数组字面量&lt;/h3&gt;

&lt;p&gt;一个数组字面量是在一对方括号中包围零个或多个用逗号分隔的值的表达式。&lt;/p&gt;

&lt;p&gt;再大多数语言中，一个数组的多有元素都要求是相同的类型。JavaScript 允许数组包含任意混合类型的值。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;长度&lt;/h3&gt;

&lt;p&gt;JavaScript 数组的&lt;code&gt;length&lt;/code&gt;属性是没有上界的。如果用大于或等于当前&lt;code&gt;length&lt;/code&gt;的数字作为下标来存储一个元素，那么&lt;code&gt;length&lt;/code&gt;值会被增大以容纳新元素，不会发生数组越界错误。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;删除&lt;/h3&gt;

&lt;p&gt;数组也是对象，可以用&lt;code&gt;delete&lt;/code&gt;来删除元素&lt;/p&gt;

&lt;p&gt;```js
var numbers = [‘one’, ‘two’, 3, ‘four’, ‘wu’]&lt;/p&gt;

&lt;p&gt;delete numbers[0]
console.log(numbers[0]) //undefined
console.log(numbers.length) //5
```&lt;/p&gt;

&lt;p&gt;可以使用&lt;code&gt;splice&lt;/code&gt;方法，进行删除和修改操作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
numbers.splice(0, 1)
console.log(numbers[0]) //two
console.log(numbers.length) //4
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;枚举&lt;/h3&gt;

&lt;p&gt;使用常规&lt;code&gt;for&lt;/code&gt;循环即可，可以保证数组的顺序。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;容易混淆的地方&lt;/h3&gt;

&lt;p&gt;当属性名是小而连续的整数时，应该使用数组，否则使用对象。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
console.log(typeof [1, 2]) //object
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;返回数组的类型是&lt;code&gt;object&lt;/code&gt;，没有任何意义。&lt;/p&gt;

&lt;p&gt;判断数组类型的方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
console.log(Array.isArray(numbers)) //true
&lt;/code&gt;
ECMAScript 5.1 (ECMA-262) 和 ECMAScript 2015 (6th Edition, ECMA-262) 标准中的方法。&lt;/p&gt;

&lt;p&gt;或者下面这个方法。
&lt;code&gt;js
var is_array = function(value) {
    return Object.prototype.toString.apply(value) === &#39;[object Array]&#39;
}
console.log(is_array(numbers)) //true
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;方法&lt;/h3&gt;

&lt;p&gt;数组的方法被存储在&lt;code&gt;Array.prototype&lt;/code&gt;中的函数。&lt;/p&gt;

&lt;p&gt;数组是对象，因此&lt;code&gt;Array.prototype&lt;/code&gt;也是可扩充的。&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;指定初始值&lt;/h3&gt;

&lt;p&gt;JavaScript 的数组不会预制值。&lt;/p&gt;

&lt;p&gt;JavaScript 没有多维数组，单项大多数类 C 语言一样，支持元素为数组的数组。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var matrix = [
    [7, 8, 9],
    [4, 5, 6],
    [1, 2, 3]
]
console.log(matrix[1][2]) //6
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;正则表达式&lt;/h2&gt;

&lt;p&gt;关于正则表达式，以前的博文写的比较多了，详情见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-10&quot;&gt;百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/2015/04/22/baidu-ife-2-javascript/#section-12&quot;&gt;百度Web前端技术学院(2)-JavaScript 基础 之正则表达式部分2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gaohaoyang.github.io/2016/05/06/regular-expression-group/&quot;&gt;浅谈正则表达式中的分组和引用&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git 如何 clone 非 master 分支的代码</title>
   <link href="http://127.0.0.1/github/2014/03/07/git-clone-not-master-branch/"/>
   <updated>2014-03-07T00:00:00+08:00</updated>
   <id>http://127.0.0.1/github/2014/03/07/git-clone-not-master-branch</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;解决方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;原来的解决方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;我们每次使用命令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git clone git@gitlab.xxx.com:xxxxx.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在&lt;code&gt;daily/1.4.1&lt;/code&gt;分支上，我们希望拿到这个分支上的代码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/07/07/577e349ab42ed.png&quot; alt=&quot;7f07c8f6deef169ef6be5103bbd3e932f8676bb1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;刚刚开周会的时候，自己洋洋得意的分享我的解决方案，但是……经过与团队成员的的讨论，自己的方法弱爆了，现在把更优雅的方法写一下。原来写的方法并不太适合用在这个场景里。&lt;/strong&gt; 我之前写的方法在文章后面。&lt;/p&gt;

&lt;p&gt;直接使用命令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git branch -r #查看远程分支
&lt;/code&gt;
或&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git branch -a #查看所有分支
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会显示&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
origin/HEAD -&amp;gt; origin/master
origin/daily/1.2.2
origin/daily/1.3.0
origin/daily/1.4.1
origin/develop
origin/feature/daily-1.0.0
origin/master
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后直接&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git checkout origin/daily/1.4.1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就好了。。。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;原来的解决方案&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;其实我原来写的这个方法更多的是：设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们在本地先建立一个分支，建议名称和远程的想要同步的分支名称一样。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git branch daily/1.4.1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在切换到这个本地分支&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git checkout daily/1.4.1
# Switched to branch &#39;daily/1.4.1&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来就可以去建立上游分支的关联了，但是这个命令比较长，不好记，我们可以直接先&lt;code&gt;pull&lt;/code&gt;一下，git 会提示我们相应的操作和命令。&lt;/p&gt;

&lt;p&gt;```
git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wish to set tracking information for this branch you can do so with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch --set-upstream-to=origin/&amp;lt;branch&amp;gt; daily/1.4.1 ```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们看到最后一行，执行这个命令，即可完成与上游分支的关联。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git branch --set-upstream-to=origin/daily/1.4.1 daily/1.4.1
# Branch daily/1.4.1 set up to track remote branch daily/1.4.1 from origin.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后再&lt;code&gt;pull&lt;/code&gt;一下就好了！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
git pull
&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PHP中16个魔术方法!</title>
   <link href="http://127.0.0.1/naringu/2014/03/03/magic/"/>
   <updated>2014-03-03T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/03/03/magic</id>
   <content type="html">&lt;h4 id=&quot;font-colorredwindowsfont&quot;&gt;&lt;font color=&quot;red&quot;&gt;windows下的安装和使用&lt;/font&gt;&lt;/h4&gt;

&lt;p&gt;PHP中把以两个下划线__开头的方法称为魔术方法(Magic methods)，这些方法在PHP中充当了举足轻重的作用。 魔术方法包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;__construct()，类的构造函数&lt;/li&gt;
  &lt;li&gt;__destruct()，类的析构函数&lt;/li&gt;
  &lt;li&gt;__call()，在对象中调用一个不可访问方法时调用&lt;/li&gt;
  &lt;li&gt;__callStatic()，用静态方式中调用一个不可访问方法时调用&lt;/li&gt;
  &lt;li&gt;__get()，获得一个类的成员变量时调用&lt;/li&gt;
  &lt;li&gt;__set()，设置一个类的成员变量时调用&lt;/li&gt;
  &lt;li&gt;__isset()，当对不可访问属性调用isset()或empty()时调用&lt;/li&gt;
  &lt;li&gt;__unset()，当对不可访问属性调用unset()时被调用。&lt;/li&gt;
  &lt;li&gt;__sleep()，执行serialize()时，先会调用这个函数&lt;/li&gt;
  &lt;li&gt;__wakeup()，执行unserialize()时，先会调用这个函数&lt;/li&gt;
  &lt;li&gt;__toString()，类被当成字符串时的回应方法&lt;/li&gt;
  &lt;li&gt;__invoke()，调用函数的方式调用一个对象时的回应方法&lt;/li&gt;
  &lt;li&gt;__set_state()，调用var_export()导出类时，此静态方法会被调用。&lt;/li&gt;
  &lt;li&gt;__clone()，当对象复制完成时调用&lt;/li&gt;
  &lt;li&gt;__autoload()，尝试加载未定义的类&lt;/li&gt;
  &lt;li&gt;__debugInfo()，打印所需调试信息&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;范例&lt;/p&gt;

&lt;p&gt;下面让我们以实例的形式向大家讲解下这几个魔术方法时如何使用的。&lt;/p&gt;

&lt;p&gt;一、 __construct()，类的构造函数&lt;/p&gt;

&lt;p&gt;php中构造方法是对象创建完成后第一个被对象自动调用的方法。在每个类中都有一个构造方法，如果没有显示地声明它，那么类中都会默认存在一个没有参数且内容为空的构造方法。&lt;/p&gt;

&lt;p&gt;1、 构造方法的作用&lt;/p&gt;

&lt;p&gt;通常构造方法被用来执行一些有用的初始化任务，如对成员属性在创建对象时赋予初始值。&lt;/p&gt;

&lt;p&gt;2、 构造方法的在类中的声明格式&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__constrct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;参数列表&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;

      &lt;span class=&quot;err&quot;&gt;方法体&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/通常用来对成员属性进行初始化赋值

  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3、 在类中声明构造方法需要注意的事项&lt;/p&gt;

&lt;p&gt;1、在同一个类中只能声明一个构造方法，原因是，PHP不支持构造函数重载。&lt;/p&gt;

&lt;p&gt;2、构造方法名称是以两个下画线开始的__construct()&lt;/p&gt;

&lt;p&gt;下面是它的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                                      
              &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        
              &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        
              &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        

          &lt;span class=&quot;sr&quot;&gt;/**
           * 显示声明一个构造方法且带参数
           */&lt;/span&gt;                                                                                       
          &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;男&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      
              &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;sr&quot;&gt;/**
           * say 方法
           */&lt;/span&gt;
          &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;我叫：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;，性别：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;，年龄：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   

      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;创建对象$Person1且不带任参数&lt;/p&gt;

&lt;p&gt;$Person1 = new Person();
  echo $Person1-&amp;gt;say();     //输出:我叫：，性别：男，年龄：27&lt;/p&gt;

&lt;p&gt;创建对象$Person2且带参数“小明”&lt;/p&gt;

&lt;p&gt;$Person2 = new Person(“小明”);
  echo $Person2-&amp;gt;say();     //输出：我叫：张三，性别：男，年龄：27&lt;/p&gt;

&lt;p&gt;创建对象$Person3且带三个参数&lt;/p&gt;

&lt;p&gt;$Person3 = new Person(“李四”,”男”,25);&lt;/p&gt;

&lt;p&gt;echo $Person3-&amp;gt;say();    //输出：我叫：李四，性别：男，年龄：25&lt;/p&gt;

&lt;p&gt;二、__destruct()，类的析构函数&lt;/p&gt;

&lt;p&gt;通过上面的讲解，现在我们已经知道了什么叫构造方法。那么与构造方法对应的就是析构方法。&lt;/p&gt;

&lt;p&gt;析构方法允许在销毁一个类之前执行的一些操作或完成一些功能，比如说关闭文件、释放结果集等。&lt;/p&gt;

&lt;p&gt;析构方法是PHP5才引进的新内容。&lt;/p&gt;

&lt;p&gt;析造方法的声明格式与构造方法 __construct() 比较类似，也是以两个下划线开始的方法 __destruct() ，这种析构方法名称也是固定的。&lt;/p&gt;

&lt;p&gt;1、 析构方法的声明格式&lt;/p&gt;

&lt;p&gt;function __destruct()
  {
   //方法体
  }
  注意：析构函数不能带有任何参数。&lt;/p&gt;

&lt;p&gt;2、 析构方法的作用&lt;/p&gt;

&lt;p&gt;一般来说，析构方法在PHP中并不是很常用，它属类中可选择的一部分，通常用来完成一些在对象销毁前的清理任务。
举例演示，如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;男&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * say 说话方法
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;我叫：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;，性别：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;，年龄：&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    

      &lt;span class=&quot;sr&quot;&gt;/**
       * 声明一个析构方法
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;我觉得我还可以再抢救一下，我的名字叫&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;销毁上面创建的对象&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的程序运行时输出：&lt;/p&gt;

&lt;p&gt;我觉得我还可以再抢救一下，我的名字叫小明&lt;/p&gt;

&lt;p&gt;三、 __call()，在对象中调用一个不可访问方法时调用。&lt;/p&gt;

&lt;p&gt;该方法有两个参数，第一个参数 $function_name 会自动接收不存在的方法名，第二个 $arguments 则以数组的方式接收不存在方法的多个参数。&lt;/p&gt;

&lt;p&gt;1、 __call() 方法的格式：&lt;/p&gt;

&lt;p&gt;function __call(string $function_name, array $arguments)
  {
      // 方法体
  }&lt;/p&gt;

&lt;p&gt;2、 __call() 方法的作用：&lt;/p&gt;

&lt;p&gt;为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，可以使用 __call() 方法来避免。
该方法在调用的方法不存在时会自动调用，程序仍会继续执行下去。
请参考如下代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                             
      &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  

             &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      

      &lt;span class=&quot;sr&quot;&gt;/**
       * 声明此方法用来处理调用对象中不存在的方法
       */&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$funName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;你所调用的函数：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$funName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(参数：&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;输出调用不存在的方法名&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;输出调用不存在的方法时的参数列表&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)不存在！&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;结束换行&lt;/span&gt;                      
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                          
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;            
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teacher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;调用对象中不存在的方法，则自动调用了对象中的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;苹果&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;p&gt;你所调用的函数：run(参数：Array ( [0] =&amp;gt; teacher ) )不存在！&lt;/p&gt;

&lt;p&gt;你所调用的函数：eat(参数：Array ( [0] =&amp;gt; 小明 [1] =&amp;gt; 苹果 ) )不存在！&lt;/p&gt;

&lt;p&gt;Hello, world!
四、 __callStatic()，用静态方式中调用一个不可访问方法时调用&lt;/p&gt;

&lt;p&gt;此方法与上面所说的 __call() 功能除了 __callStatic() 是未静态方法准备的之外，其它都是一样的。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * 声明此方法用来处理调用对象中不存在的方法
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__callStatic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$funName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;你所调用的静态方法：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$funName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(参数：&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;输出调用不存在的方法名&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;输出调用不存在的方法时的参数列表&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)不存在！&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;结束换行&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;teacher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;调用对象中不存在的方法，则自动调用了对象中的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;苹果&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;p&gt;你所调用的静态方法：run(参数：Array ( [0] =&amp;gt; teacher ) )不存在！&lt;/p&gt;

&lt;p&gt;你所调用的静态方法：eat(参数：Array ( [0] =&amp;gt; 小明 [1] =&amp;gt; 苹果 ) )不存在！
Hello, world!&lt;/p&gt;

&lt;p&gt;五、 __get()，获得一个类的成员变量时调用&lt;/p&gt;

&lt;p&gt;在 php 面向对象编程中，类的成员属性被设定为 private 后，如果我们试图在外面调用它则会出现“不能访问某个私有属性”的错误。那么为了解决这个问题，我们可以使用魔术方法 __get()。&lt;/p&gt;

&lt;p&gt;魔术方法__get()的作用&lt;/p&gt;

&lt;p&gt;在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。&lt;/p&gt;

&lt;p&gt;我们通过下面的 __get() 的实例来更进一步的连接它吧：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * 在类中添加__get()方法，在直接获取属性值时自动调用一次，以属性名作为参数传入并处理
       * @param $propertyName
       *
       * @return int
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$propertyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$propertyName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$propertyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$propertyName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;通过&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;类实例化的对象，并通过构造方法为属性赋初值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;姓名：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;直接访问私有属性&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，自动调用了&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法可以间接获取&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;年龄：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;自动调用了&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;方法，根据对象本身的情况会返回不同的值&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;p&gt;姓名：小明&lt;/p&gt;

&lt;p&gt;年龄：50&lt;/p&gt;

&lt;p&gt;六、 __set()，设置一个类的成员变量时调用&lt;/p&gt;

&lt;p&gt;__set() 的作用：&lt;/p&gt;

&lt;p&gt;__set( $property, $value )` 方法用来设置私有属性， 给一个未定义的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值。&lt;/p&gt;

&lt;p&gt;请看下面的演示代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * 声明魔术方法需要两个参数，真接为私有属性赋值时自动调用，并可以屏蔽一些非法赋值
       * @param $property
       * @param $value
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * 在类中声明说话的方法，将所有的私有属性说出
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;我叫&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;，今年&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;岁了&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;注意，初始值将被下面所改变&lt;/span&gt;
  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;自动调用了&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;函数，将属性名&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;传给第一个参数，将属性值”李四”传给第二个参数&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;小红&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;赋值成功。如果没有&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，则出错。&lt;/span&gt;
  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;自动调用了&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;函数，将属性名&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;传给第一个参数，将属性值&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;传给第二个参数&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;赋值成功&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;是一个非法值，赋值失效&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;输出：我叫小红，今年&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;岁了&lt;/span&gt;
&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;p&gt;我叫小红，今年16岁了&lt;/p&gt;

&lt;p&gt;七、 __isset()，当对不可访问属性调用isset()或empty()时调用&lt;/p&gt;

&lt;p&gt;在看这个方法之前我们看一下isset()函数的应用，isset()是测定变量是否设定用的函数，传入一个变量作为参数，如果传入的变量存在则传回true，否则传回false。&lt;/p&gt;

&lt;p&gt;那么如果在一个对象外面使用isset()这个函数去测定对象里面的成员是否被设定可不可以用它呢？&lt;/p&gt;

&lt;p&gt;分两种情况，如果对象里面成员是公有的，我们就可以使用这个函数来测定成员属性，如果是私有的成员属性，这个函数就不起作用了，原因就是因为私有的被封装了，在外部不可见。那么我们就不可以在对象的外部使用isset()函数来测定私有成员属性是否被设定了呢？当然是可以的，但不是一成不变。你只要在类里面加上一个__isset()方法就可以了，当在类外部使用isset()函数来测定对象里面的私有成员是否被设定时，就会自动调用类里面的__isset()方法了帮我们完成这样的操作。&lt;/p&gt;

&lt;p&gt;__isset()的作用：当对不可访问属性调用 isset() 或 empty() 时，__isset() 会被调用。&lt;/p&gt;

&lt;p&gt;请看下面代码演示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * @param $content
       *
       * @return bool
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当在类外部使用isset()函数测定私有成员{$content}时，自动调用&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;p&gt;1 // public 可以 isset()
当在类外部使用isset()函数测定私有成员name时，自动调用 // __isset() 内 第一个echo
1 // __isset() 内第二个echo
当在类外部使用isset()函数测定私有成员age时，自动调用 // __isset() 内 第一个echo
1 // __isset() 内第二个echo
八、 __unset()，当对不可访问属性调用unset()时被调用。&lt;/p&gt;

&lt;p&gt;看这个方法之前呢，我们也先来看一下 unset() 函数，unset()这个函数的作用是删除指定的变量且传回true，参数为要删除的变量。&lt;/p&gt;

&lt;p&gt;那么如果在一个对象外部去删除对象内部的成员属性用unset()函数可以吗？&lt;/p&gt;

&lt;p&gt;这里自然也是分两种情况：&lt;/p&gt;

&lt;p&gt;1、 如果一个对象里面的成员属性是公有的，就可以使用这个函数在对象外面删除对象的公有属性。&lt;/p&gt;

&lt;p&gt;2、 如果对象的成员属性是私有的，我使用这个函数就没有权限去删除。&lt;/p&gt;

&lt;p&gt;虽然有以上两种情况，但我想说的是同样如果你在一个对象里面加上__unset()这个方法，就可以在对象的外部去删除对象的私有成员属性了。在对象里面加上了__unset()这个方法之后，在对象外部使用“unset()”函数删除对象内部的私有成员属性时，对象会自动调用__unset()函数来帮我们删除对象内部的私有成员属性。&lt;/p&gt;

&lt;p&gt;请看如下代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * @param $content
       *
       * @return bool
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当在类外部使用unset()函数来删除私有成员时自动调用的&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;小明&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;p&gt;当在类外部使用unset()函数来删除私有成员时自动调用的&lt;/p&gt;

&lt;p&gt;1当在类外部使用unset()函数来删除私有成员时自动调用的
1
九、 __sleep()，执行serialize()时，先会调用这个函数&lt;/p&gt;

&lt;p&gt;serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，则该方法会优先被调用，然后才执行序列化操作。&lt;/p&gt;

&lt;p&gt;此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。&lt;/p&gt;

&lt;p&gt;如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;p&gt;__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。
作用：&lt;/p&gt;

&lt;p&gt;__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。
具体请参考如下代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * @return array
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当在类外部使用serialize()时会调用这里的__sleep()方法&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里必须返回一个数值，里边的元素表示返回的属性名称&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;br/&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;代码运行结果：&lt;/p&gt;

&lt;p&gt;当在类外部使用serialize()时会调用这里的__sleep()方法
O:6:”Person”:2:{s:4:”name”;s:8:”5bCP5piO”;s:3:”age”;i:25;}&lt;/p&gt;

&lt;p&gt;十、 __wakeup()，执行unserialize()时，先会调用这个函数&lt;/p&gt;

&lt;p&gt;如果说 __sleep() 是白的，那么 __wakeup() 就是黑的了。&lt;/p&gt;

&lt;p&gt;那么为什么呢？&lt;/p&gt;

&lt;p&gt;因为：&lt;/p&gt;

&lt;p&gt;与之相反，&lt;code&gt;unserialize()&lt;/code&gt; 会检查是否存在一个 &lt;code&gt;__wakeup()&lt;/code&gt; 方法。如果存在，则会先调用 &lt;code&gt;__wakeup&lt;/code&gt; 方法，预先准备对象需要的资源。
作用：&lt;/p&gt;

&lt;p&gt;__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。
还是看代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * @return array
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当在类外部使用serialize()时会调用这里的__sleep()方法&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里必须返回一个数值，里边的元素表示返回的属性名称&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * __wakeup
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;当在类外部使用unserialize()时会调用这里的__wakeup()方法&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;这里不需要返回数组&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;p&gt;当在类外部使用serialize()时会调用这里的__sleep()方法
string(58) “O:6:”Person”:2:{s:4:”name”;s:8:”5bCP5piO”;s:3:”age”;i:25;}” 当在类外部使用serialize()时会调用这里的__sleep()方法
当在类外部使用unserialize()时会调用这里的__wakeup()方法
object(Person)#2 (3) { [“sex”]=&amp;gt; string(3) “男” [“name”]=&amp;gt; int(2) [“age”]=&amp;gt; int(25) }&lt;/p&gt;

&lt;p&gt;十一、 __toString()，类被当成字符串时的回应方法&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;__toString() 方法用于一个类被当成字符串时应怎样回应。例如 &lt;code&gt;echo $obj;&lt;/code&gt; 应该显示些什么。
注意：&lt;/p&gt;

&lt;p&gt;此方法必须返回一个字符串，否则将发出一条 &lt;code&gt;E_RECOVERABLE_ERROR&lt;/code&gt; 级别的致命错误。
警告：&lt;/p&gt;

&lt;p&gt;不能在 __toString() 方法中抛出异常。这么做会导致致命错误。
代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&#39;go go go&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;go go go
那么如果类中没有 __toString() 这个魔术方法运行会发生什么呢？让我们来测试下：&lt;/p&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;Catchable fatal error: Object of class Person could not be converted to string in D:\phpStudy\WWW\test\index.php on line 18
很明显，页面报了一个致命错误，这是语法所不允许的。&lt;/p&gt;

&lt;p&gt;十二、 __invoke()，调用函数的方式调用一个对象时的回应方法&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。
注意：&lt;/p&gt;

&lt;p&gt;本特性只在 PHP 5.3.0 及以上版本有效。
直接上代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;这可是一个对象哦&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;查看运行结果：&lt;/p&gt;

&lt;p&gt;这可是一个对象哦
当然，如果你执意要将对象当函数方法使用，那么会得到下面结果：&lt;/p&gt;

&lt;p&gt;Fatal error: Function name must be a string in D:\phpStudy\WWW\test\index.php on line 18&lt;/p&gt;

&lt;p&gt;十三、 __set_state()，调用var_export()导出类时，此静态方法会被调用。&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;自 PHP 5.1.0 起，当调用 var_export() 导出类时，此静态方法会被自动调用。
参数：&lt;/p&gt;

&lt;p&gt;本方法的唯一参数是一个数组，其中包含按 array(‘property’ =&amp;gt; value, …) 格式排列的类属性。
下面我们先来看看在没有加 __set_state() 情况按下，代码及运行结果如何：&lt;/p&gt;

&lt;p&gt;上代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;看结果：&lt;/p&gt;

&lt;p&gt;Person::__set_state(array( ‘sex’ =&amp;gt; ‘男’, ‘name’ =&amp;gt; ‘小明’, ‘age’ =&amp;gt; 25, ))
很明显，将对象中的属性都打印出来了&lt;/p&gt;

&lt;p&gt;加了 __set_state() 之后：&lt;/p&gt;

&lt;p&gt;继续上代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__set_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$an_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$an_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;小红&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;继续看结果：&lt;/p&gt;

&lt;p&gt;Person::__set_state(array( ‘sex’ =&amp;gt; ‘男’, ‘name’ =&amp;gt; ‘小红’, ‘age’ =&amp;gt; 25, ))
十四、 __clone()，当对象复制完成时调用&lt;/p&gt;

&lt;p&gt;在多数情况下，我们并不需要完全复制一个对象来获得其中属性。但有一个情况下确实需要：如果你有一个 GTK 窗口对象，该对象持有窗口相关的资源。你可能会想复制一个新的窗口，保持所有属性与原来的窗口相同，但必须是一个新的对象（因为如果不是新的对象，那么一个窗口中的改变就会影响到另一个窗口）。还有一种情况：如果对象 A 中保存着对象 B 的引用，当你复制对象 A 时，你想其中使用的对象不再是对象 B 而是 B 的一个副本，那么你必须得到对象 A 的一个副本。&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 __clone() 方法）。对象中的 __clone() 方法不能被直接调用。
语法：&lt;/p&gt;

&lt;p&gt;$copy_of_object = clone $object;
注意：&lt;/p&gt;

&lt;p&gt;当对象被复制后，PHP 5 会对对象的所有属性执行一个浅复制（shallow copy）。所有的引用属性 仍然会是一个指向原来的变量的引用。
当复制完成时，如果定义了 __clone() 方法，则新创建的对象（复制生成的对象）中的 __clone() 方法会被调用，可用于修改属性的值（如果有必要的话）。
看代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$sex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__METHOD__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;你正在克隆对象&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始赋值&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$person2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;persion1:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;br&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;persion2:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;看结果：&lt;/p&gt;

&lt;p&gt;Person::__clone你正在克隆对象&lt;/p&gt;

&lt;p&gt;string(9) “persion1:” object(Person)#1 (3) { [“sex”]=&amp;gt; string(3) “男” [“name”]=&amp;gt; string(6) “小明” [“age”]=&amp;gt; int(25) }&lt;/p&gt;

&lt;p&gt;string(9) “persion2:” object(Person)#2 (3) { [“sex”]=&amp;gt; string(3) “男” [“name”]=&amp;gt; string(6) “小明” [“age”]=&amp;gt; int(25) }&lt;/p&gt;

&lt;p&gt;克隆成功。&lt;/p&gt;

&lt;p&gt;十五、__autoload()，尝试加载未定义的类&lt;/p&gt;

&lt;p&gt;作用：&lt;/p&gt;

&lt;p&gt;你可以通过定义这个函数来启用类的自动加载。&lt;/p&gt;

&lt;p&gt;在魔术函数 __autoload()&lt;/p&gt;

&lt;p&gt;方法出现以前，如果你要在一个程序文件中实例化100个对象，那么你必须用include或者require包含进来100个类文件，或者你把这100个类定义在同一个类文件中 —— 相信这个文件一定会非常大，然后你就痛苦了。&lt;/p&gt;

&lt;p&gt;但是有了 __autoload() 方法，以后就不必为此大伤脑筋了，这个类会在你实例化对象之前自动加载制定的文件。&lt;/p&gt;

&lt;p&gt;还是通过例子来看看吧：&lt;/p&gt;

&lt;p&gt;先看看以往的方式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sr&quot;&gt;/** 
   * 文件non_autoload.php 
   */&lt;/span&gt; 

  &lt;span class=&quot;n&quot;&gt;require_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;project/class/A.php&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;n&quot;&gt;require_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;project/class/B.php&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;n&quot;&gt;require_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;project/class/C.php&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;条件&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;业务逻辑&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;条件&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;业务逻辑&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;看到了吗？不用100个，只是3个看起来就有点烦了。而且这样就会有一个问题：如果脚本执行“条件B”这个分支时，C.php这个文件其实没有必要包含。因为，任何一个被包含的文件，无论是否使用，均会被php引擎编译。如果不使用，却被编译，这样可以被视作一种资源浪费。更进一步，如果C.php包含了D.php，D.php包含了E.php。并且大部分情况都执行“条件B”分支，那么就会浪费一部分资源去编译C.php,D.php,E.php三个“无用”的文件。&lt;/p&gt;

&lt;p&gt;那么如果使用 __autoload() 方式呢？&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sr&quot;&gt;/** 
   * 文件autoload_demo.php 
   */&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;__autoload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_readable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$filePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;条件&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;业务逻辑&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;条件&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;vg&quot;&gt;$b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  
      &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;业务逻辑&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ok,不论效率怎么用，最起码界面看起来舒服多了，没有太多冗余的代。&lt;/p&gt;

&lt;p&gt;再来看看这里的效率如何，我们分析下：&lt;/p&gt;

&lt;p&gt;当php引擎第一次使用类A，但是找不到时，会自动调用 __autoload 方法，并将类名“A”作为参数传入。所以，我们在 __autoload() 中需要的做的就是根据类名，找到相应的文件，并包含进来，如果我们的方法也找不到，那么php引擎就会报错了。&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;p&gt;这里可以只用require，因为一旦包含进来后，php引擎再遇到类A时，将不会调用__autoload，而是直接使用内存中的类A，不会导致多次包含。
扩展：&lt;/p&gt;

&lt;p&gt;其实php发展到今天，已经有将 &lt;code&gt;spl_autoload_register&lt;/code&gt; — 注册给定的函数作为 __autoload 的实现了，但是这个不在啊本文讲解之内，有兴趣可以自行看手册。
十六、__debugInfo()，打印所需调试信息&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;p&gt;该方法在PHP 5.6.0及其以上版本才可以用，如果你发现使用无效或者报错，请查看啊你的版本。
看代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;sr&quot;&gt;/**
       * @return array
       */&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__debugInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
              &lt;span class=&quot;s1&quot;&gt;&#39;propSquared&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;sc&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;object(C)#1 (1) { [“propSquared”]=&amp;gt; int(1764) }
再次注意：&lt;/p&gt;

&lt;p&gt;这里的 &lt;code&gt;**&lt;/code&gt; 是乘方的意思，也是在PHP5.6.0及其以上才可以使用，详情请查看PHP手册
总结&lt;/p&gt;

&lt;p&gt;以上就是PHP中我了解到的魔术方法了，常用的包括 __set() __get() __autoload() 等应该熟悉，其他的了解也没有关系，毕竟知识不怕多嘛。&lt;/p&gt;

&lt;p&gt;好了，有兴趣的或者我这里没有说明白的，可以参考啊官方文档。&lt;/p&gt;

&lt;p&gt;PHP在线手册地址：&lt;a href=&quot;http://php.net/manual/zh/&quot;&gt;http://php.net/manual/zh/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jeykll + github 发博客!</title>
   <link href="http://127.0.0.1/naringu/2014/02/21/hahah/"/>
   <updated>2014-02-21T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/02/21/hahah</id>
   <content type="html">&lt;ol&gt;
  &lt;li&gt;首先你要在github上创建一个版本库
名字必须和版本库的名字相同&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接下来安装ruby
&lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;http://rubyinstaller.org/&lt;/a&gt;
下载完之后要配置环境变量&lt;/p&gt;

    &lt;p&gt;在windows中配置环境变量&lt;/p&gt;

    &lt;p&gt;RUBY_HOME=rubyinstaller_dir （实际的ruby所在路径）&lt;/p&gt;

    &lt;p&gt;在path中添加 %RUBY_HOME%\bin
在命令行下运行 ruby –version，如果显示ruby版本信息说明安装正常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;接下来我们在安装RubyGems&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;https://rubygems.org/pages/download&lt;/p&gt;

&lt;p&gt;下载完到本地之后用终端输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;那么到现在RubyGems就安装成功啦&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;接下来我们在安装jekyll
打开终端 输入&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;检查一下是否安装成功。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;成功的话就会显示jekyll版本号。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;目前为止，我们已经安装完ruby RubyGems jekyll ，接下来要可以新建一个本地博客啦！！！&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myblog&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;输入该命令之后，你的文件夹里面就会生成一个叫myblog的文件夹。myblog可以随便换成你喜欢的名字，比如你想建一个新的博客叫Winter，那你就输入 kekyll new Winter ，以此类推。
进入myblog文件夹 cd myblog
里面就会有这些文件。&lt;/p&gt;

&lt;p&gt;在_posts文件夹里写你的博客，命名规范必须和里面自带的一致 比如：2016-10-27-XXXXX.markdown&lt;/p&gt;

&lt;p&gt;打开命令框输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后系统会告诉你本地网站已经搭建好了，在浏览器里面输入localhost:4000就能看到你刚刚建立好的最基本jekyll网站啦！&lt;/p&gt;

&lt;p&gt;*注意！在本地测试时jekyll serve 命令框不能关闭！！！&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;把本地文件推送到之前创建好的github中，怎么推送就不细说了，推送成功之后在浏览器里面输入XXXX.github.io 你写的博客就会显示出来！
每次在本地_posts中写完之后都得推送到github版本库中。。。。。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此！你的ZB博客就出来了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 语言精粹笔记1-语法、对象、函数</title>
   <link href="http://127.0.0.1/javascript/2014/02/07/javascript-good-parts-note1/"/>
   <updated>2014-02-07T00:00:00+08:00</updated>
   <id>http://127.0.0.1/javascript/2014/02/07/JavaScript-good-parts-note1</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;语法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;空白&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;标识符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;数字&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;字符串&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;语句&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;表达式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;字面量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;函数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;对象&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;对象字面量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;检索&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;更新&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;引用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;原型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;反射&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;枚举&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;删除&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;减少全局变量污染&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;函数&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;函数对象&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;函数字面量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;调用&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-23&quot; id=&quot;markdown-toc-section-23&quot;&gt;方法调用模式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-24&quot; id=&quot;markdown-toc-section-24&quot;&gt;函数调用模式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-25&quot; id=&quot;markdown-toc-section-25&quot;&gt;构造器调用模式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#apply-&quot; id=&quot;markdown-toc-apply-&quot;&gt;Apply 调用模式&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-26&quot; id=&quot;markdown-toc-section-26&quot;&gt;参数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-27&quot; id=&quot;markdown-toc-section-27&quot;&gt;返回&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-28&quot; id=&quot;markdown-toc-section-28&quot;&gt;异常&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-29&quot; id=&quot;markdown-toc-section-29&quot;&gt;扩充类型的功能&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-30&quot; id=&quot;markdown-toc-section-30&quot;&gt;递归&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-31&quot; id=&quot;markdown-toc-section-31&quot;&gt;作用域&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-32&quot; id=&quot;markdown-toc-section-32&quot;&gt;闭包&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-33&quot; id=&quot;markdown-toc-section-33&quot;&gt;回调&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-34&quot; id=&quot;markdown-toc-section-34&quot;&gt;模块&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-35&quot; id=&quot;markdown-toc-section-35&quot;&gt;级联&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-36&quot; id=&quot;markdown-toc-section-36&quot;&gt;柯里化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-37&quot; id=&quot;markdown-toc-section-37&quot;&gt;记忆&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;记录一下阅读蝴蝶书的笔记，本篇为第一部分包含书中前三章内容：语法、对象和函数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s3651235.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原书中第一章为精华，做了一些周边介绍，略去。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;语法&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;空白&lt;/h3&gt;

&lt;p&gt;这里说一下JavaScript的注释，一种是 &lt;code&gt;/* */&lt;/code&gt; 包围的块注释，另一种是 &lt;code&gt;//&lt;/code&gt; 开头的行注释。&lt;/p&gt;

&lt;p&gt;因为块注释的字符可能是JavaScript中正则表达式字面量，因此不是很安全，如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
/*
    var rm_a = /a*/.match(s)
*/
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;标识符&lt;/h3&gt;

&lt;p&gt;标识符由一个字母开头，后面可选择性的加上一个或多个字母、数字或下划线。要避免保留字。&lt;/p&gt;

&lt;p&gt;标识符被用于语句、变量、参数、属性名、运算符和标记。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;数字&lt;/h3&gt;

&lt;p&gt;可以存在指数部分，100和1e2完全相等&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
100 === 1e2 // true
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;isNaN&lt;/code&gt;来检测&lt;code&gt;NaN&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;字符串&lt;/h3&gt;

&lt;p&gt;当年 JavaScript 被创建的时候，Unicode 是16位字符集，因此 JavaScript 字符串是16位的。&lt;/p&gt;

&lt;p&gt;用双引号或单引号包裹。&lt;/p&gt;

&lt;p&gt;重点说一下转义字符&lt;code&gt;\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;反斜杠后面可以跟&lt;code&gt;&quot;&lt;/code&gt;, &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; (backspace), &lt;code&gt;f&lt;/code&gt; (formfeed), &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; (carriage return), &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;u1234&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
&#39;A&#39; === &#39;\u0041&#39; // true
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;语句&lt;/h3&gt;

&lt;p&gt;每个&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的内容被一起抛到一个公共的全局名字空间中。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{...}&lt;/code&gt;代码块不会创建新的作用域，因此变量应该被定义在函数的头部，而不是在代码块中。&lt;/p&gt;

&lt;p&gt;下列值当做假：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他所有值都当做真&lt;/p&gt;

&lt;p&gt;&lt;code&gt;for in&lt;/code&gt;语句枚举对象的所有属性名（键名），使用&lt;code&gt;object.hasOwnProperty(variable)&lt;/code&gt;来确定这个属性名是该对象成员，还是来自原型链。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
for (myvar in obj) {
    if (obj.hasOwnProperty(myvar)) {
        ...
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;表达式&lt;/h3&gt;

&lt;p&gt;运算符优先级&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;运算符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;.&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;提取属性与调用函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;delete&lt;/code&gt; &lt;code&gt;new&lt;/code&gt; &lt;code&gt;typeof&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; &lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;一元运算符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;*&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;===&lt;/code&gt; &lt;code&gt;!==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;逻辑与&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;||&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;逻辑或&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;?:&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;三目&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-7&quot;&gt;字面量&lt;/h3&gt;

&lt;p&gt;对象字面量是一种可以方便地按指定规格创建新对象的表示法。&lt;/p&gt;

&lt;p&gt;数组字面量是一种可以方便地按指定规格创建新数组的表示法。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;函数&lt;/h3&gt;

&lt;p&gt;函数字面量定义了函数值。后续章节详谈。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;对象&lt;/h2&gt;

&lt;p&gt;对象是属性的容器，每一个属性都拥有名字和值。属性的名字可以是包含空字符串在内的任意字符串。属性的值可以是除&lt;code&gt;undefined&lt;/code&gt;值之外的任何值。&lt;/p&gt;

&lt;p&gt;JavaScript 包含一种原型链的特性，允许对象继承另一个对象的属性。正确地使用它能减少对象初始化时消耗的时间和内存。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;对象字面量&lt;/h3&gt;

&lt;p&gt;一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。&lt;/p&gt;

&lt;p&gt;```js
var empty_object = {}&lt;/p&gt;

&lt;p&gt;var stooge = {
    firstName: ‘Haoyang’,
    lastName: ‘Gao’
}
```&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;检索&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;js
console.log(stooge.firstName); // Haoyang
console.log(stooge[&#39;firstName&#39;]); // Haoyang
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;不存在的属性返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;||&lt;/code&gt;来填充默认值。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
console.log(stooge.firstName || &#39;Joe&#39;); // Haoyang
console.log(stooge.age || 25); // 25
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;更新&lt;/h3&gt;

&lt;p&gt;直接使用赋值语句更新，若不存在这个属性，则作为扩充操作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
stooge.firstName = &#39;aaa&#39;
stooge.nickName = &#39;peip&#39;
console.log(stooge) //Object {firstName: &quot;aaa&quot;, lastName: &quot;Gao&quot;, nickName: &quot;peip&quot;}
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;引用&lt;/h3&gt;

&lt;p&gt;对象通过引用来传递他们永远不会被复制。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var x = stooge
x.hair = &#39;black&#39;
stooge.hair //&quot;black&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;原型&lt;/h3&gt;

&lt;p&gt;每一个对象都连接到一个原型对象，并且它可以从中继承属性。所有通过字面量创建的对象都连接到&lt;code&gt;Object.prototype&lt;/code&gt;，它是JavaScript中的标配对象。&lt;/p&gt;

&lt;p&gt;可以使用&lt;code&gt;Object.create()&lt;/code&gt;方法创建一个使用原对象作为其原型的新对象。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var anotherStooge = Object.create(stooge)
anotherStooge.firstName //&quot;aaa&quot;
anotherStooge.firstName = &#39;bbb&#39;
anotherStooge.firstName //&quot;bbb&quot;
anotherStooge.hair //&quot;black&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;新对象先查找自己的属性，若不存在则会向原型方向查找。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f4ieu7focqj207h05caaf.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当我们对某个对象作出改变时，不会触及该对象的原型。&lt;/p&gt;

&lt;p&gt;原型关系是一种动态关系。如果我们添加一个新的属性到原型中，该属性会立即对所有基于该原型创建的对象可见。&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;反射&lt;/h3&gt;

&lt;p&gt;在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力。&lt;/p&gt;

&lt;p&gt;检查对象并确定对象有什么属性是很容易的事情，只要试着去检索该属性并验证取得的值。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt;用来确定对象属性的类型。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hasOwnProperty&lt;/code&gt;，若对象拥有独有的属性，它将返回&lt;code&gt;true&lt;/code&gt;。不会检查原型链。&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;枚举&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;for in&lt;/code&gt;可以遍历一个对象中的所有属性名，包括原型链上的属性名。可以使用&lt;code&gt;hasOwnProperty&lt;/code&gt;过滤原型链上的属性，使用&lt;code&gt;typeof&lt;/code&gt;来排除函数。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
for (var name in anotherStooge) {
    if (anotherStooge.hasOwnProperty(name) &amp;amp;&amp;amp; typeof anotherStooge[name] !== &#39;function&#39;) {
        console.log(name + &#39;---&amp;gt;&#39; + anotherStooge[name])
    }
}
// firstName---&amp;gt;bbb
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;属性名是无序的，若想保持顺序应使用数组和&lt;code&gt;for&lt;/code&gt;循环。&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;删除&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;delete&lt;/code&gt;可以用来删除对象的属性。若对象包含该属性，则会被移除。它不会触及原型链中的任何对象。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
anotherStooge.firstName //&quot;bbb&quot;
delete anotherStooge.firstName
anotherStooge.firstName //&quot;aaa&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-18&quot;&gt;减少全局变量污染&lt;/h3&gt;

&lt;p&gt;JavaScript 可以随意的定义全局变量来容纳应用的所有资源。但这会削弱程序的灵活性，应避免使用全局变量。&lt;/p&gt;

&lt;p&gt;最小化使用全局变量的方法之一是为应用只创建一个唯一的全局变量。&lt;/p&gt;

&lt;p&gt;```js
var MYAPP = {}&lt;/p&gt;

&lt;p&gt;MYAPP.stooge = {
    //…
}&lt;/p&gt;

&lt;p&gt;MYAPP.flight = {
    //…
}
```
下一章将使用闭包来进行信息隐藏，是另一种有效减少全局污染的方法。&lt;/p&gt;

&lt;h2 id=&quot;section-19&quot;&gt;函数&lt;/h2&gt;

&lt;h3 id=&quot;section-20&quot;&gt;函数对象&lt;/h3&gt;

&lt;p&gt;JavaScript 中的函数就是对象。函数对象连接到&lt;code&gt;Function.prototype&lt;/code&gt;（该原型对象本身连接到&lt;code&gt;Object.prototype&lt;/code&gt;）。每个函数对象在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。&lt;/p&gt;

&lt;p&gt;函数对象在创建时也随配有一个&lt;code&gt;prototype&lt;/code&gt;属性。它的值是一个拥有&lt;code&gt;constructor&lt;/code&gt;属性且值即为该函数对象。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
function add(a, b) {
    return a + b
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f4lrei2b3pj208f06et95.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。&lt;/p&gt;

&lt;p&gt;函数的与众不同之处在于可以被调用。&lt;/p&gt;

&lt;h3 id=&quot;section-21&quot;&gt;函数字面量&lt;/h3&gt;

&lt;p&gt;函数对象通过函数字面量来创建。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var add = function(a, b) {
    return a + b
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;调用&lt;/h3&gt;

&lt;p&gt;调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;。参数&lt;code&gt;this&lt;/code&gt;在面向对象编程中非常重要，它的值取决于调用的模式。JavaScript中一共有4中调用模式：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。&lt;/p&gt;

&lt;p&gt;实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面的内容也可以参考我以前的博文 &lt;a href=&quot;http://gaohaoyang.github.io/2015/06/12/JavaScript-this/&quot;&gt;JavaScript 中的 this&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-23&quot;&gt;方法调用模式&lt;/h4&gt;

&lt;p&gt;当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，&lt;code&gt;this&lt;/code&gt;被绑定到该对象。&lt;/p&gt;

&lt;p&gt;```js
var myObject = {
    value: 0,
    increment: function(inc) {
        this.value += typeof inc === ‘number’ ? inc : 1
    }
}&lt;/p&gt;

&lt;p&gt;myObject.increment()
console.log(myObject.value) //1&lt;/p&gt;

&lt;p&gt;myObject.increment(3)
console.log(myObject.value) //4
```&lt;/p&gt;

&lt;h4 id=&quot;section-24&quot;&gt;函数调用模式&lt;/h4&gt;

&lt;p&gt;当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。&lt;/p&gt;

&lt;p&gt;此时&lt;code&gt;this&lt;/code&gt;被绑定到全局对象。即时是内部函数也会将&lt;code&gt;this&lt;/code&gt;绑定到全局对象。&lt;/p&gt;

&lt;p&gt;可以在函数内创建一个属性并赋值为&lt;code&gt;this&lt;/code&gt;来解决这个问题。如下：&lt;/p&gt;

&lt;p&gt;```js
var add = function(a, b) {
    return a + b
}&lt;/p&gt;

&lt;p&gt;myObject.double = function() {
    var that = this
    var helper = function() {
        that.value = add(that.value, that.value)
    }
    helper()
}&lt;/p&gt;

&lt;p&gt;myObject.double()
console.log(myObject.value) //8
```&lt;/p&gt;

&lt;h4 id=&quot;section-25&quot;&gt;构造器调用模式&lt;/h4&gt;

&lt;p&gt;JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。&lt;/p&gt;

&lt;p&gt;如果在一个函数前面带上&lt;code&gt;new&lt;/code&gt;来调用，那么背地里将会创建一个连接到该函数的&lt;code&gt;prototype&lt;/code&gt;成员的新对象，同时&lt;code&gt;this&lt;/code&gt;会被绑定到那个新对象上。&lt;/p&gt;

&lt;p&gt;```js
//创建构造器函数
var Quo = function(string) {
    this.status = string
}&lt;/p&gt;

&lt;p&gt;//给Que的所有实例提供一个公共方法
Quo.prototype.getStatus = function() {
    return this.status
}&lt;/p&gt;

&lt;p&gt;//实例化
var myQuo = new Quo(‘confused’)&lt;/p&gt;

&lt;p&gt;console.log(myQuo.getStatus()) //confused
```&lt;/p&gt;

&lt;p&gt;书中不推荐这种形式的构造器函数，下一章有更好的解决方案。&lt;/p&gt;

&lt;h4 id=&quot;apply-&quot;&gt;Apply 调用模式&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;apply&lt;/code&gt;方法让我们构建一个参数数组传递给调用函数。他也允许我们选择&lt;code&gt;this&lt;/code&gt;的值。&lt;code&gt;apply&lt;/code&gt;方法接受两个参数，第一个是要绑定给&lt;code&gt;this&lt;/code&gt;的值，第二个是参数数组。&lt;/p&gt;

&lt;p&gt;```js
var arr = [3, 4]
var sum = add.apply(null, arr)
console.log(sum) //7&lt;/p&gt;

&lt;p&gt;var statusObject = {
    status: ‘hello’
}&lt;/p&gt;

&lt;p&gt;var status = Quo.prototype.getStatus.apply(statusObject)
console.log(status) //hello
```&lt;/p&gt;

&lt;h3 id=&quot;section-26&quot;&gt;参数&lt;/h3&gt;

&lt;p&gt;当函数被调用时，会得到一个&lt;code&gt;arguments&lt;/code&gt;数组。通过此参数可以访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var sum = function() {
    var i, sum = 0
    for (i = 0; i &amp;lt; arguments.length; i++) {
        sum += arguments[i]
    }
    return sum
}
console.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9)) //45
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因语言的设计错误，&lt;code&gt;arguments&lt;/code&gt;并不是一个真正的数组。是一个“类似数组”的对象。有&lt;code&gt;length&lt;/code&gt;属性，但没有任何数组的方法。&lt;/p&gt;

&lt;h3 id=&quot;section-27&quot;&gt;返回&lt;/h3&gt;

&lt;p&gt;函数执行时遇到关闭函数体的&lt;code&gt;}&lt;/code&gt;时结束。然后把控制权交还给调用该函数的程序。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;return&lt;/code&gt;可以使函数提前返回，不在执行余下的语句。&lt;/p&gt;

&lt;p&gt;函数总是会返回一个值，若没有指定，则返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;若函数调用时在前面加上了&lt;code&gt;new&lt;/code&gt;前缀，且返回值不是一个对象的时候，则返回&lt;code&gt;this&lt;/code&gt;（该新对象）。&lt;/p&gt;

&lt;h3 id=&quot;section-28&quot;&gt;异常&lt;/h3&gt;

&lt;p&gt;异常是干扰程序的正常流畅的不寻常的事故。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var add2 = function(a, b) {
    if (typeof a !== &#39;number&#39; || typeof b !== &#39;number&#39;) {
        throw {
            name: &#39;TypeError&#39;,
            message: &#39;add needs numbers&#39;
        }
    }
    return a + b
}
console.log(add2(2, 3)) //5
console.log(add2(&#39;a&#39;, 6))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/7011d6cfjw1f4mprafcvhj20ml00xjrj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;throw&lt;/code&gt;语句中断函数的执行。抛出一个&lt;code&gt;exception&lt;/code&gt;对象，该对象包含一个用来识别异常类型的&lt;code&gt;name&lt;/code&gt;属性和一个描述性的&lt;code&gt;message&lt;/code&gt;属性。也可以自定义其他属性。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js
var try_it = function() {
    try {
        add2(&#39;a&#39;)
    } catch (e) {
        console.log(e.name + &#39;: &#39; + e.message)
    }
}
try_it() //TypeError: add needs numbers
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果在&lt;code&gt;try&lt;/code&gt;代码块内抛出一个异常，控制权就会跳转到它的&lt;code&gt;catch&lt;/code&gt;语句中。&lt;/p&gt;

&lt;h3 id=&quot;section-29&quot;&gt;扩充类型的功能&lt;/h3&gt;

&lt;p&gt;JavaScript 允许给语言的基本类型扩充功能。通过&lt;code&gt;Object.prototype&lt;/code&gt;添加方法，可以让该方法对所有对象都适用。&lt;/p&gt;

&lt;p&gt;```js
// 先添加方法使得该方法对所有函数可用
Function.prototype.method = function(name, func) {
    this.prototype[name] = func
    return this
}&lt;/p&gt;

&lt;p&gt;//添加一个取整方法
Number.method(‘integer’, function() {
    return Math&lt;a href=&quot;this&quot;&gt;this &amp;lt; 0 ? ‘ceil’ : ‘floor’&lt;/a&gt;
})
console.log((-10 / 3).integer()) //-3&lt;/p&gt;

&lt;p&gt;//添加 trim()
String.method(‘trim’, function() {
    return this.replace(/^\s+|\s+$/g, ‘’)
})
console.log(‘  hello alibaba  ‘.trim()) //hello alibaba
```&lt;/p&gt;

&lt;p&gt;JavaScript 原型继承是动态的，因此新的方法立刻被赋予到所有的对象实例上，即使对象实例是在方法被增加之前就创建好了。&lt;/p&gt;

&lt;h3 id=&quot;section-30&quot;&gt;递归&lt;/h3&gt;

&lt;p&gt;递归函数就是会直接或者间接地调用自身的一种函数。&lt;/p&gt;

&lt;p&gt;```js
var walkTheDom = function walk(node, func) {
    func(node)
    node = node.firstChild
    while (node) {
        walk(node, func)
        node = node.nextSibling
    }
}&lt;/p&gt;

&lt;p&gt;var getElementsByAttribute = function(att, value) {
    var results = []
    walkTheDom(document.body, function(node) {
        var actual = node.nodeType === 1 &amp;amp;&amp;amp; node.getAttribute(att)
        if (typeof actual === ‘string’ &amp;amp;&amp;amp; (actual === value || typeof value !== ‘string’)) {
            results.push(node)
        }
    })
    return results
}&lt;/p&gt;

&lt;p&gt;//在知乎主页上操作
console.log(getElementsByAttribute(‘data-za-module’, ‘AnswerItem’))
//得到下列数据
//[div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content, div.feed-content]
```&lt;/p&gt;

&lt;h3 id=&quot;section-31&quot;&gt;作用域&lt;/h3&gt;

&lt;p&gt;作用域控制着变量与参数的可见性及生命周期。它减少了名称冲突，并提供了自动内存管理。&lt;/p&gt;

&lt;p&gt;无块级作用域。&lt;/p&gt;

&lt;p&gt;有函数作用域。&lt;/p&gt;

&lt;p&gt;建议在函数体的顶部声明函数中可能用到的所有变量。&lt;/p&gt;

&lt;h3 id=&quot;section-32&quot;&gt;闭包&lt;/h3&gt;

&lt;p&gt;作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;arguments&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;```js
var quo = function(status) {
    return {
        get_status: function() {
            return status
        }
    }
}&lt;/p&gt;

&lt;p&gt;var myQuo = quo(‘amazed’)
console.log(myQuo.get_status()) //amazed
```
狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。&lt;/p&gt;

&lt;p&gt;避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前&lt;code&gt;i&lt;/code&gt;值的函数，这样就不会导致混淆了。&lt;/p&gt;

&lt;h3 id=&quot;section-33&quot;&gt;回调&lt;/h3&gt;

&lt;p&gt;将一个函数作为参数，一旦接收到响应，再调用这个函数。&lt;/p&gt;

&lt;h3 id=&quot;section-34&quot;&gt;模块&lt;/h3&gt;

&lt;p&gt;可以用函数和闭包构造模块。&lt;/p&gt;

&lt;p&gt;模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。&lt;/p&gt;

&lt;p&gt;```js
var numberCal = (function() {
    var half = function(n) {
        return n / 2
    }
    var double = function(n) {
        return n * 2
    }
    var tribble = function(n) {
        return n * 3
    }
    return {
        half: half,
        double: double,
        tribble: tribble
    }
}())&lt;/p&gt;

&lt;p&gt;console.log(numberCal.half(5)) //2.5
console.log(numberCal.half(6)) //3
console.log(numberCal.double(7)) //14
console.log(numberCal.tribble(7)) //21
```&lt;/p&gt;

&lt;h3 id=&quot;section-35&quot;&gt;级联&lt;/h3&gt;

&lt;p&gt;如果让方法返回&lt;code&gt;this&lt;/code&gt;而不是默认的&lt;code&gt;undefined&lt;/code&gt;，就可以启用级联，即连续调用。&lt;/p&gt;

&lt;h3 id=&quot;section-36&quot;&gt;柯里化&lt;/h3&gt;

&lt;p&gt;柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。&lt;/p&gt;

&lt;p&gt;详情见以前的博文 &lt;a href=&quot;http://gaohaoyang.github.io/2015/06/11/JavaScript-function/#bind--currying&quot;&gt;JavaScript 函数 -bind 与 currying&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-37&quot;&gt;记忆&lt;/h3&gt;

&lt;p&gt;函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jquery的使用!</title>
   <link href="http://127.0.0.1/naringu/2014/01/22/five/"/>
   <updated>2014-01-22T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/01/22/five</id>
   <content type="html">&lt;p&gt;1.什么是jquery？&lt;/p&gt;

&lt;p&gt;一款免费且开放源代码的JavaScript代码库&lt;/p&gt;

&lt;p&gt;2.什么是JavaScript代码库&lt;/p&gt;

&lt;p&gt;Prototype框架（代码库），是成型比较早的Javascript代码库，面向对象的思想不完善且整个代码比较松散。&lt;/p&gt;

&lt;p&gt;Dojo框架，Dojo框架具有很多框架不具有的功能，比如离线存储等，其核心代码比较精简，但是其门槛较高且文档不全，版本不稳定。&lt;/p&gt;

&lt;p&gt;Mootools框架，整个框架核心代码只有8k，完整版也只有100多k，所以代码非常精简，对于面向对象的支持非常完善。&lt;/p&gt;

&lt;p&gt;ExtJS框架，通过Javascript可以编写富媒体，本身界面非常的美化，非常炫，但是其比较耗资源，而且其是收费的。&lt;/p&gt;

&lt;p&gt;jQuery框架（2006年，Javascript专家-美国人约翰特里），以其强大的DOM框架、Ajax封装等一些功能为所有程序员所推崇。&lt;/p&gt;

&lt;p&gt;3.基本选择器&lt;/p&gt;

&lt;h1 id=&quot;id-id&quot;&gt;id ：通过元素的id属性，匹配元素&lt;/h1&gt;

&lt;p&gt;Element ：通过元素名称，匹配元素&lt;/p&gt;

&lt;p&gt;selector1,selector2 ：同时匹配多个选择器&lt;/p&gt;

&lt;p&gt;.class ：通过元素的class属性，匹配元素&lt;/p&gt;

&lt;p&gt;4.层次选择器&lt;/p&gt;

&lt;p&gt;ancetor descendant ：选取ancetor元素下的所有后代元素(所有父子孙元素…)&lt;/p&gt;

&lt;p&gt;parent &amp;gt; child ：选取parent下的子元素(父子关系)&lt;/p&gt;

&lt;p&gt;prev + next ：选取prev元素的相邻的下一个元素（同级）&lt;/p&gt;

&lt;p&gt;prev~siblings ：选取prev元素的后面所有同级元素&lt;/p&gt;

&lt;p&gt;5.简单选择器&lt;/p&gt;

&lt;p&gt;:first ：选择第一个元素&lt;/p&gt;

&lt;p&gt;:last ：选取最后一个元素&lt;/p&gt;

&lt;p&gt;:even ：偶数  索引的值   索引从0开始&lt;/p&gt;

&lt;p&gt;:odd  ：奇数&lt;/p&gt;

&lt;p&gt;:eq(索引) ：选取索引为index的元素，默认从0开始&lt;/p&gt;

&lt;p&gt;:gt(index) ：选择索引大于index的元素，默认从0开始&lt;/p&gt;

&lt;p&gt;:lt(index) ：选取索引小于index的元素，默认从0开始&lt;/p&gt;

&lt;p&gt;:not(selector) ：选择选择器不为selector的元素&lt;/p&gt;

&lt;p&gt;6.内容选择器&lt;/p&gt;

&lt;p&gt;:contains(text) ：匹配元素内容包含text文本的元素&lt;/p&gt;

&lt;p&gt;:empty ：匹配元素内容为空的元素&lt;/p&gt;

&lt;p&gt;:has(selector) ：匹配具有元素的元素&lt;/p&gt;

&lt;p&gt;:parent ：匹配内容不为空的元素&lt;/p&gt;

&lt;p&gt;7.可见性选择器&lt;/p&gt;

&lt;p&gt;:hidden ：匹配所有隐藏元素（display:none与type=hidden）&lt;/p&gt;

&lt;p&gt;:visible ：匹配所有可见元素&lt;/p&gt;

&lt;p&gt;8.属性选择器&lt;/p&gt;

&lt;p&gt;[attribute] ：匹配具有某一属性的元素&lt;/p&gt;

&lt;p&gt;[attribute=value] ：匹配属性值等于value的元素&lt;/p&gt;

&lt;p&gt;[attribute!=value] ：匹配属性值不等于value的元素&lt;/p&gt;

&lt;p&gt;[attribute^=value] ：匹配属性值以value开始的元素&lt;/p&gt;

&lt;p&gt;[attribute$=value] ：匹配属性值以value结尾的元素&lt;/p&gt;

&lt;p&gt;[attribute*=value] ：匹配属性值包含value的元素&lt;/p&gt;

&lt;p&gt;[selector1][selector2][selectorN] ：匹配具有多个指定属性的元素&lt;/p&gt;

&lt;p&gt;9.子元素选择器&lt;/p&gt;

&lt;p&gt;nth-child(index/even/odd) 从1算起 ：匹配满足条件（索引，偶数，奇数）子元素&lt;/p&gt;

&lt;p&gt;:first-child ：选取第一个子元素&lt;/p&gt;

&lt;p&gt;:last-child ：选取最后一个子元素&lt;/p&gt;

&lt;p&gt;:only-child ：选取子元素且该子元素是唯一的子元素，则匹配&lt;/p&gt;

&lt;p&gt;10.表单选择器&lt;/p&gt;

&lt;p&gt;:input ：匹配所有表单元素（包含select、textarea）&lt;/p&gt;

&lt;p&gt;:text 	：匹配所有text文本框&lt;/p&gt;

&lt;p&gt;:password ：匹配所有密码框&lt;/p&gt;

&lt;p&gt;:radio	：匹配所有单选&lt;/p&gt;

&lt;p&gt;:checkbox ：匹配所有复选框&lt;/p&gt;

&lt;p&gt;:submit ：匹配所有提交按钮&lt;/p&gt;

&lt;p&gt;:reset ：匹配所有重置按钮&lt;/p&gt;

&lt;p&gt;:image ：匹配所有图像域&lt;/p&gt;

&lt;p&gt;:button ：匹配所有button按钮（type=’button’或button标签）&lt;/p&gt;

&lt;p&gt;:file ：匹配所有文件域&lt;/p&gt;

&lt;p&gt;:hidden ：匹配所有隐藏表单&lt;/p&gt;

&lt;p&gt;11.表单对象属性选择器&lt;/p&gt;

&lt;p&gt;:enabled ：选取所有可用表单&lt;/p&gt;

&lt;p&gt;:disabled ：选取所有不可用表单&lt;/p&gt;

&lt;p&gt;:checked ：选取所有选中的表单元素（单选框与复选框）&lt;/p&gt;

&lt;p&gt;:selected ：选取被选中的下拉选框（下拉）&lt;/p&gt;

&lt;p&gt;12.属性&lt;/p&gt;

&lt;p&gt;attr(name) ：获取元素的属性值&lt;/p&gt;

&lt;p&gt;attr(key,value) ：设置元素的属性的值&lt;/p&gt;

&lt;p&gt;attr(properties) ：一次为元素设置多个属性，要求参数是一个json对象&lt;/p&gt;

&lt;p&gt;attr(key,fn) ：通过函数的返回值设置元素的属性&lt;/p&gt;

&lt;p&gt;removeAttr(name) ：移除元素的属性&lt;/p&gt;

&lt;p&gt;13.class操作&lt;/p&gt;

&lt;p&gt;addClass(class) ：为元素添加class样式&lt;/p&gt;

&lt;p&gt;removeClass(class) ：为元素移除class样式&lt;/p&gt;

&lt;p&gt;toggleClass(class) ：切换样式，当元素拥有class样式则移除，否则，即添加&lt;/p&gt;

&lt;p&gt;hasClass(class) ：判断当前元素是否具有class样式&lt;/p&gt;

&lt;p&gt;14.html/text/val&lt;/p&gt;

&lt;p&gt;html() ：获取元素的值（主要针对的是双标签元素）&lt;/p&gt;

&lt;p&gt;html(val) ：设置元素的值&lt;/p&gt;

&lt;p&gt;val() ：获取表单元素的value值（主要针对的是表单元素）&lt;/p&gt;

&lt;p&gt;val(val) ：设置表单元素的value值&lt;/p&gt;

&lt;p&gt;text() ：获取元素的值&lt;/p&gt;

&lt;p&gt;text(val) ：设置元素的值&lt;/p&gt;

&lt;p&gt;说明：
html()与text()方法区别
在获取时，如果是普通文本信息，两者效果一致，如元素中包含子元素，那么html方法可以获取到所有的子元素及文本信息，而text()方法只能获取文本信息。
在设置时，如果是普通文本信息，两者效果一致，如果设置的值中包含标签，那么html方法可以进行解析执行，而text方法不能解析html代码，会当做普通文本处理。&lt;/p&gt;

&lt;p&gt;15.css操作&lt;/p&gt;

&lt;p&gt;css(name) ：获取元素的css的值&lt;/p&gt;

&lt;p&gt;css(name,value) ：设置元素的css的值&lt;/p&gt;

&lt;p&gt;css(properties) ：一次为元素设置多个css的值，要求参数为json对象&lt;/p&gt;

&lt;p&gt;16.尺寸操作&lt;/p&gt;

&lt;p&gt;width() ：获取元素的宽度&lt;/p&gt;

&lt;p&gt;width(value) ：设置元素的宽度&lt;/p&gt;

&lt;p&gt;height() ：获取元素的高度&lt;/p&gt;

&lt;p&gt;height(value) ：设置元素的高度&lt;/p&gt;

&lt;p&gt;17.基本事件&lt;/p&gt;

&lt;p&gt;blur(fn) ：当失去焦点时触发&lt;/p&gt;

&lt;p&gt;change(fn) ：当状态改变时触发&lt;/p&gt;

&lt;p&gt;click(fn) ：单击时触发&lt;/p&gt;

&lt;p&gt;dblclick(fn) ：双击时触发&lt;/p&gt;

&lt;p&gt;focus(fn) ：获取焦点时触发&lt;/p&gt;

&lt;p&gt;keydown(fn) ：键盘按下时触发&lt;/p&gt;

&lt;p&gt;keyup(fn) ：键盘弹起时触发&lt;/p&gt;

&lt;p&gt;keypress(fn) ：键盘按下时触发&lt;/p&gt;

&lt;p&gt;load(fn) ：页面载入时触发&lt;/p&gt;

&lt;p&gt;unload(fn) ：页面卸载（关闭）时触发&lt;/p&gt;

&lt;p&gt;mousedown(fn) ：鼠标按下时触发&lt;/p&gt;

&lt;p&gt;mouseup(fn) ：鼠标弹起时触发&lt;/p&gt;

&lt;p&gt;mousemove(fn) ：鼠标移动时触发&lt;/p&gt;

&lt;p&gt;mouseover(fn) ：鼠标悬浮时触发&lt;/p&gt;

&lt;p&gt;mouseout(fn) ：鼠标离开时触发&lt;/p&gt;

&lt;p&gt;resize(fn) ：大小改变时触发&lt;/p&gt;

&lt;p&gt;scroll(fn) ：滚动时触发&lt;/p&gt;

&lt;p&gt;select(fn) ：选中时触发&lt;/p&gt;

&lt;p&gt;submit(fn) ：表单提交时触发&lt;/p&gt;

&lt;p&gt;18.事件切换&lt;/p&gt;

&lt;p&gt;hover(over,out) ：鼠标悬浮与鼠标离开事件，第一个参数为over事件处理程序，第二个参数为out事件处理程序&lt;/p&gt;

&lt;p&gt;toggle(fn,fn) ：点击事件切换，可以有多个参数&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>linux的使用!</title>
   <link href="http://127.0.0.1/naringu/2014/01/18/four/"/>
   <updated>2014-01-18T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/01/18/four</id>
   <content type="html">&lt;p&gt;1.linux命令：&lt;/p&gt;

&lt;p&gt;解压文件：
         tar指令 –zxvf 源码包&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     -zxf 解压参数

     -v  显示进度（一般情况下可以不写）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装：yum install [-y] [rpm包名]&lt;/p&gt;

&lt;p&gt;卸载：yum remove [-y] [rpm包名]&lt;/p&gt;

&lt;p&gt;升级：yum update [-y] [rpm包]&lt;/p&gt;

&lt;p&gt;新建：Touch 文件名   touch 1.txt&lt;/p&gt;

&lt;p&gt;kill   -杀死方式  进程ID&lt;/p&gt;

&lt;p&gt;复制：Cp 源文件  目标文件    cp -v /home/hehe  ./hehe&lt;/p&gt;

&lt;p&gt;移动：mv 参数 源文件 目标文件   mv -v /home/hehe ./hehe&lt;/p&gt;

&lt;p&gt;删除：rm -rf 文件夹或文件&lt;/p&gt;

&lt;p&gt;查看：find -name   根据文件的名称查找&lt;/p&gt;

&lt;p&gt;管道命令：grep 参数 字符串 源文件&lt;/p&gt;

&lt;p&gt;解压缩： tar -xvf linuxqq.tar.gz&lt;/p&gt;

&lt;p&gt;关机命令：Halt Poweroff Shutdown Reboot&lt;/p&gt;

&lt;p&gt;帮助命令：2.7.1――help man&lt;/p&gt;

&lt;p&gt;2.Vim/Vi文本编辑器应用&lt;/p&gt;

&lt;p&gt;:w ：保存当前文件&lt;/p&gt;

&lt;p&gt;:q（quit）：退出当前文件&lt;/p&gt;

&lt;p&gt;:wq ：保存并退出&lt;/p&gt;

&lt;p&gt;:q! ：强制退出&lt;/p&gt;

&lt;p&gt;:wq! ：强制保存退出&lt;/p&gt;

&lt;p&gt;:set nu ：显示当前文件行号&lt;/p&gt;

&lt;p&gt;:set nonu ：隐藏当前行号&lt;/p&gt;

&lt;p&gt;:noh ：取消高亮显示&lt;/p&gt;

&lt;p&gt;:u ：撤销&lt;/p&gt;

&lt;p&gt;dd ：剪切当前行&lt;/p&gt;

&lt;p&gt;ndd:剪切n行&lt;/p&gt;

&lt;p&gt;yy ：复制当前行&lt;/p&gt;

&lt;p&gt;nyy: 复制n行&lt;/p&gt;

&lt;p&gt;p ：粘贴&lt;/p&gt;

&lt;p&gt;3.vi常用快捷键&lt;/p&gt;

&lt;p&gt;1)移动光标&lt;/p&gt;

&lt;p&gt;h ：光标左移一个字符&lt;/p&gt;

&lt;p&gt;j ：光标上移一个字符&lt;/p&gt;

&lt;p&gt;k ：光标下移一个字符&lt;/p&gt;

&lt;p&gt;l ：光标右移一个字符&lt;/p&gt;

&lt;p&gt;0 ：光标移至行首&lt;/p&gt;

&lt;p&gt;$ ：光标移至行尾&lt;/p&gt;

&lt;p&gt;H ：光标移至屏幕首行&lt;/p&gt;

&lt;p&gt;M ：光标移至屏幕中间&lt;/p&gt;

&lt;p&gt;L ：光标移至屏幕最末行&lt;/p&gt;

&lt;p&gt;2)插入文本&lt;/p&gt;

&lt;p&gt;i ：在光标前插内内容&lt;/p&gt;

&lt;p&gt;a ：在光标后插入内容&lt;/p&gt;

&lt;p&gt;o ：在所在行的下一行插入新行&lt;/p&gt;

&lt;p&gt;O ：在所在行的上一行插入新行&lt;/p&gt;

&lt;p&gt;3)删除文本&lt;/p&gt;

&lt;p&gt;x：删除光标后面的字符&lt;/p&gt;

&lt;p&gt;X：删除光标前面的字符&lt;/p&gt;

&lt;p&gt;nx：删除光标后面n个字符&lt;/p&gt;

&lt;p&gt;nX：删除光标前面的n个字符&lt;/p&gt;

&lt;p&gt;d0：删除光标至行首的内容&lt;/p&gt;

&lt;p&gt;d$：删除光标至行尾的内容&lt;/p&gt;

&lt;p&gt;dd ：删除整行&lt;/p&gt;

&lt;p&gt;ndd ：向下删除n行&lt;/p&gt;

&lt;p&gt;4)复制文本&lt;/p&gt;

&lt;p&gt;yy ：复制整行&lt;/p&gt;

&lt;p&gt;nyy ：复制n行&lt;/p&gt;

&lt;p&gt;p ：在所在行下一行粘贴&lt;/p&gt;

&lt;p&gt;P ：在所在行上一行粘贴&lt;/p&gt;

&lt;p&gt;dd ：剪切&lt;/p&gt;

&lt;p&gt;5)查找文本&lt;/p&gt;

&lt;p&gt;/pattern ：向下查找&lt;/p&gt;

&lt;p&gt;?pattern ：向上查找&lt;/p&gt;

&lt;p&gt;n ：顺序查找&lt;/p&gt;

&lt;p&gt;N ：反向查找&lt;/p&gt;

&lt;p&gt;:s/p1/p2/g ：在当前行，将p1替换成p2&lt;/p&gt;

&lt;p&gt;:n1,n2s/p1/p2/g ：将n1至n2行之间的p1替换成p2&lt;/p&gt;

&lt;p&gt;6)屏幕翻滚&lt;/p&gt;

&lt;p&gt;ctrl+u：向文件首翻半屏&lt;/p&gt;

&lt;p&gt;ctrl+d：向文件尾翻半屏&lt;/p&gt;

&lt;p&gt;ctrl+f：向文件尾翻一屏&lt;/p&gt;

&lt;p&gt;ctrl+b：向文件首翻一屏&lt;/p&gt;

&lt;p&gt;4.scp 远程文件管理（Linux对Linux）&lt;/p&gt;

&lt;p&gt;scp 本地文件 远程文件  ： 上传文件
scp test.php root@192.168.1.18:/root/&lt;/p&gt;

&lt;p&gt;scp 远程文件 本地文件  ： 下载文件
scp root@192.168.1.20:/root/tian.php /root/&lt;/p&gt;

&lt;p&gt;scp –r 文件夹 文件夹
scp -r root@192.168.1.20:/root/won /root/won22&lt;/p&gt;

&lt;p&gt;5.LAMP环境搭建及管理和lnmp搭建及管理&lt;/p&gt;

&lt;p&gt;可参考&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zph1234/article/details/51250523&quot;&gt;http://blog.csdn.net/zph1234/article/details/51250523&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zph1234/article/details/51248124&quot;&gt;http://blog.csdn.net/zph1234/article/details/51248124&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.SVN安装
21.2(1)掌握SVN的安装
yum install subversion
(2)掌握SVN版本库的创建
svnadmin create 版本库的路径
svnadmin create /usr/local/svn/sunny
(3)掌握SVN的配置
1)掌握配置文件的目录当前版本库的conf目录下
2)掌握配置版本库信息和用户文件和用户密码文件的路径、版本库路径
① # anon-access = read
②# auth-access = write
③# password-db = passwd
④将以上三行的注释去掉
3)掌握创建svn组和组用户的权限
①[group]
sunny = gep,wce //创建一个sunny的组，并指定两个用户gep和wce
②[/]             //制定根目录下的权限
@sunny = rw     //sunny组用户权限为读写
* = r           //其他用户只有读权限
③保存退出
4)掌握创建或修改用户密码
	①[users]
gep = 123456    //用户名为gep的用户的密码为123456
wce = 123456    //。。。
②保存退出
(4)掌握SVN的启动
1)掌握多版本库启动svnserve -d -r 版本库目录
2)掌握单版本启动   svnserve -d -r 版本库目录/版本库名
(5)掌握SVN的自动启动
1)vi /etc/rc.local    打开自启动文件添加
2)/usr/bin/svnserve -d -r /usr/local/svn/
(6)掌握SVN的自动更新
1)在vi /版本库目录/hooks/post-commit中加入
2)#!/bin/sh
3)#设置一些变量
4)SVN=/usr/bin/svn
5)WEB=/data0/htdocs/ecshop #要更新的目录
6)export LANG=en_US.UTF-8
7)$SVN update $WEB –username wsss –password 123
(7)掌握SVN命令方式检出
Svn checkout 版本库的路径 检出的路径
(8)掌握SVN客户端检出
&lt;img src=&quot;/../images/img1.png&quot; alt=&quot;cookie&quot; /&gt;
(9)SVN对比工具(beyondCompare)&lt;/p&gt;

&lt;p&gt;1)”C:\Program Files (x86)\Beyond Compare 3\BComp.exe” %base %mine /title1=%bname /title2=%yname /leftreadonly&lt;/p&gt;

&lt;p&gt;2)”C:\Program Files (x86)\Beyond Compare 3\BCompare.exe”
&lt;img src=&quot;/../images/img2.png&quot; alt=&quot;cookie&quot; /&gt;
“C:\Program Files (x86)\Beyond Compare 3\BComp.exe” %mine %theirs %base %merged /title1=%yname /title2=%tname /title3=%bname /title4=%mname
&lt;img src=&quot;/../images/img3.png&quot; alt=&quot;cookie&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>面向对象!</title>
   <link href="http://127.0.0.1/naringu/2014/01/12/three/"/>
   <updated>2014-01-12T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/01/12/three</id>
   <content type="html">&lt;p&gt;面向对象是一种计算机编程架构，比面向过程具有更强的灵活性和扩展性。&lt;/p&gt;

&lt;p&gt;1)主流软件开发语言离不开面向对象&lt;/p&gt;

&lt;p&gt;2)主流网站开发语言离不开面向对象&lt;/p&gt;

&lt;p&gt;3)工作中需要，企业招聘有些明确要求掌握面向对象编程&lt;/p&gt;

&lt;p&gt;4)主流php框架都是面向对象编程方式实现(如ThinkPHP,CI,YII,Zend framework等)&lt;/p&gt;

&lt;p&gt;2.面向对象（OO）包括3部分内容&lt;/p&gt;

&lt;p&gt;1)面向对象分析（Object Oriented Analysis,OOA）
2)面向对象设计（Object Oriented Design,OOD）
3)面向对象编程（Object Oriented Programming,OOP）,这是我们常说的面向对象编程。&lt;/p&gt;

&lt;p&gt;3.类和对象&lt;/p&gt;

&lt;p&gt;1）类：具有相同属性和方法的事物的集合，是抽象的。&lt;/p&gt;

&lt;p&gt;类的组成：&lt;/p&gt;

&lt;p&gt;属性（也称变量或成员变量）&lt;/p&gt;

&lt;p&gt;方法（类中的函数被称为方法或成员方法）&lt;/p&gt;

&lt;p&gt;常量  (无法更改或撤销定义)&lt;/p&gt;

&lt;p&gt;2）对象：是类的实例化结果，是具体的。&lt;/p&gt;

&lt;p&gt;3）通过标签找对象：document.getElementsByTagName(“标签名”)&lt;/p&gt;

&lt;p&gt;比如：说学生（模糊的抽象的一类），而具体的一个学生就是一个对象。&lt;/p&gt;

&lt;p&gt;4.面向对象三大特点&lt;/p&gt;

&lt;p&gt;1）封装性&lt;/p&gt;

&lt;p&gt;也称为信息隐藏。就是将一个类的使用和实现分开。只保留有限的接口与外部联系。使用者不必关心具体的实现，只知道每个方法的调用方式即可。&lt;/p&gt;

&lt;p&gt;好处：避免了程序之间的依赖性。&lt;/p&gt;

&lt;p&gt;2）继承性&lt;/p&gt;

&lt;p&gt;继承性就是派生类（子类）自动继承父类中的属性和方法，并可以修改或添加新的属性和方法。&lt;/p&gt;

&lt;p&gt;注意：继承分单继承和多继承，php支持的是单继承，一个子类只能有一个父类。&lt;/p&gt;

&lt;p&gt;好处：提高了代码的重用性。&lt;/p&gt;

&lt;p&gt;3）多态性：&lt;/p&gt;

&lt;p&gt;多态即多种形态，具有表现多种形态的能力特征。在面向对象中表示根据对象的类型以不同方式处理（说白了就是调用同一个方法可以获得不同的结果）。&lt;/p&gt;

&lt;p&gt;好处：增强了软件的灵活性。&lt;/p&gt;

&lt;p&gt;5.访问控制&lt;/p&gt;

&lt;p&gt;在属性或方法前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。&lt;/p&gt;

&lt;p&gt;公有的类成员可以在任何地方被访问。&lt;/p&gt;

&lt;p&gt;受保护的类成员则可以被其自身以及其子类和父类访问。&lt;/p&gt;

&lt;p&gt;私有的类成员则只能被其定义所在的类访问。&lt;/p&gt;

&lt;p&gt;6.封装&lt;/p&gt;

&lt;p&gt;封装：将数据（属性）以及对数据的操作（方法）捆绑到一起，形成对外的数据隐藏。只对外提供可以调用的接口供其使用。（public的方法和属性）。&lt;/p&gt;

&lt;p&gt;封装的过程称之为抽象：将具有相同特性的一类事务，把公共的内容抽离出来，形成文字描述的过程。&lt;/p&gt;

&lt;p&gt;7.继承&lt;/p&gt;

&lt;p&gt;语法：&lt;/p&gt;

&lt;p&gt;父类：拥有一些可以被继承的属性和方法&lt;/p&gt;

&lt;p&gt;子类：想拥有自己不存在但是在别的类中存在的属性和方法&lt;/p&gt;

&lt;p&gt;关键字：extends&lt;/p&gt;

&lt;p&gt;子类 extends 父类&lt;/p&gt;

&lt;p&gt;继承的优点&lt;/p&gt;

&lt;p&gt;1)便于扩展（子类可以在父类的基础上增加自己的特点）&lt;/p&gt;

&lt;p&gt;2)节省代码：提高代码的复用性&lt;/p&gt;

&lt;p&gt;继承的细节&lt;/p&gt;

&lt;p&gt;①　子类最多只能继承一个父类（指直接继承）&lt;/p&gt;

&lt;p&gt;②　子类可以继承其父类的public,protected修饰的属性和方法。&lt;/p&gt;

&lt;p&gt;③　在创建某个子类对象时，默认情况下不会自动调用其父类的构造函数。&lt;/p&gt;

&lt;p&gt;④　如果在子类中需要访问父类中（以public/protected修饰）的方法，可以使用&lt;/p&gt;

&lt;p&gt;父类：：方法名或者是parent::方法名。&lt;/p&gt;

&lt;p&gt;如果子类（派生类）中的方法和父类（基类）方法相同，我们称之为方法重写/方&lt;/p&gt;

&lt;p&gt;继承：子类可以使用父类的属性和方法（除私有的）。&lt;/p&gt;

&lt;p&gt;8.多态&lt;/p&gt;

&lt;p&gt;多态：多种形态，在存在继承的情况下，子类必须重写父类的方法（子类拥有与父类同名的方法）&lt;/p&gt;

&lt;p&gt;9.使用$this访问方法和属性&lt;/p&gt;

&lt;p&gt;我们学习过，实例化对象后，可以通过对象名来调用类中的属性和方法。&lt;/p&gt;

&lt;p&gt;对象名-&amp;gt;属性名&lt;/p&gt;

&lt;p&gt;对象名-&amp;gt;方法名()&lt;/p&gt;

&lt;p&gt;类的内部如需调用本类的成员属性和成员方法，可借助伪变量$this。&lt;/p&gt;

&lt;p&gt;$this-&amp;gt;属性名&lt;/p&gt;

&lt;p&gt;$this-&amp;gt;方法名()&lt;/p&gt;

&lt;p&gt;原理：当一个对象($a)调用其方法(who())时，该方法执行之前，先完成一个绑定。就是$this绑定到调用该方法的那个对象上。&lt;/p&gt;

&lt;p&gt;10.self与$this的区别&lt;/p&gt;

&lt;p&gt;1)self ：代表本类，自身（不要理解为本类的对象），$this代表对象&lt;/p&gt;

&lt;p&gt;2)self访问类内部的常量和静态成员，$this访问对象的属性和普通方法&lt;/p&gt;

&lt;p&gt;3)self必须配合范围解析操作符（::）才能生效，$this代表对象，对象本来就是一种数据类型，所以$this可以单独被打印。&lt;/p&gt;

&lt;p&gt;4)能用$this的地方，一定可以使用self，但是能使用self的地方不一定可以使用$this&lt;/p&gt;

&lt;p&gt;5)非静态的属性和方法均用对象（$this）访问，静态的方法和属性或常量均用类(self)来访问&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>javascript!</title>
   <link href="http://127.0.0.1/naringu/2014/01/09/two/"/>
   <updated>2014-01-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/01/09/two</id>
   <content type="html">&lt;p&gt;1.什么是javascript？它的特点是什么？它的作用是什么？
定义：javascript是一门客户端的脚本语言，可以嵌套到html里面，浏览器能直接解析。&lt;/p&gt;

&lt;p&gt;特点：&lt;/p&gt;

&lt;p&gt;1)javaScript是一种基于对象和事件驱动并具有安全性能的脚本语言   基于对象和事件驱动并具有安全性能的脚本语言。&lt;/p&gt;

&lt;p&gt;2)js代码自上而下执行，和php代码执行顺序一致。&lt;/p&gt;

&lt;p&gt;3)js中的代码严格区分大小写。&lt;/p&gt;

&lt;p&gt;4)每行结尾的分号可有可无。&lt;/p&gt;

&lt;p&gt;作用：制作网页特效、实现表单验证、增加浏览器与用户交互的动态效果&lt;/p&gt;

&lt;p&gt;2.javascript中的事件的分类
鼠标事件
1)onclick(鼠标点击事件)
2)onmouseover(属性在鼠标指针移动到元素上时触发)
3)onmouseout(属性在鼠标指针移动到元素外时触发)
4)onmousemove(属性在鼠标指针移动到元素上时触发)
键盘事件
1)onkeydown(事件会在用户按下一个键盘按键时发生)&lt;/p&gt;

&lt;p&gt;2)onkeyup(事件会在键盘按键被松开时发生)&lt;/p&gt;

&lt;p&gt;表单事件&lt;/p&gt;

&lt;p&gt;1)onblur(失去焦点时间)&lt;/p&gt;

&lt;p&gt;2)onsubmit(事件会在表单中的确认按钮被点击时发生)&lt;/p&gt;

&lt;p&gt;3)onchange(事件会在域的内容改变时发生)&lt;/p&gt;

&lt;p&gt;Window.onload(页面加载事件)&lt;/p&gt;

&lt;p&gt;3.DOM编程的基本找对象方法&lt;/p&gt;

&lt;p&gt;1）通过id找对象：document.getElementById(“元素id”)&lt;/p&gt;

&lt;p&gt;2）通过name找对象：document.getElementsByName(“元素name”)&lt;/p&gt;

&lt;p&gt;3）通过标签找对象：document.getElementsByTagName(“标签名”)&lt;/p&gt;

&lt;p&gt;4.DOM的基本属性&lt;/p&gt;

&lt;p&gt;1）innerHTML属性：找到或设置双标签间的值&lt;/p&gt;

&lt;p&gt;2）value属性：找到或设置表单中带有value属性的值&lt;/p&gt;

&lt;p&gt;3）innerText属性：找到或设置双标签间的值&lt;/p&gt;

&lt;p&gt;注解：&lt;/p&gt;

&lt;p&gt;nnerText和innerHTML的区别：在获取双标签间的值得时候，innerText是剥除html标签，只有文本内容，而innerHTML是带有html标签的。&lt;/p&gt;

&lt;p&gt;5.正则表达式的匹配符&lt;/p&gt;

&lt;p&gt;模式匹配符：&lt;/p&gt;

&lt;p&gt;\：转义字符  例如：\b转义了b&lt;/p&gt;

&lt;p&gt;^：正则表达式开始符号&lt;/p&gt;

&lt;p&gt;$：正则表达式结束符号&lt;/p&gt;

&lt;p&gt;*：匹配前面的字符出现0次或者n次&lt;/p&gt;

&lt;p&gt;+：匹配前面的字符出现1次或者n次&lt;/p&gt;

&lt;p&gt;?：匹配前面的字符出现0次或者1次&lt;/p&gt;

&lt;p&gt;.：匹配除了换行符以外的所有单个字符&lt;/p&gt;

&lt;p&gt;{n}：匹配前面的n个字符&lt;/p&gt;

&lt;p&gt;{n,m}：匹配至少n个最多m个前面字符&lt;/p&gt;

&lt;p&gt;[xyz]：匹配中括号里的任意一个字符&lt;/p&gt;

&lt;p&gt;[^xyz]：匹配除了中括号里的任意一个字符&lt;/p&gt;

&lt;p&gt;\w：匹配任意一个数字或字母或下划线 等价于					[A-Za-z0-9_]&lt;/p&gt;

&lt;p&gt;\d：匹配任意一个0–9之间的数字&lt;/p&gt;

&lt;p&gt;模式修正符：i：忽略大小写&lt;/p&gt;

&lt;p&gt;正则检测字符串函数：test()，成功返回true，失败返回false
       例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;       &lt;span class=&quot;no&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zhangsan&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^\w+$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
   		 &lt;span class=&quot;no&quot;&gt;Alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“用户名合法”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;   常用正则表达式举例：

     //用户名由6-18位的字母数字下划线组成，不能由数字开头

     var r_name=/^[a-z_]\w{5,17}$/i

     //密码长度不能少于六位

     var r_pwd=/^\w{6,}$/

     //所有的通用邮箱地址

     var r_eamil=/^\w+@\w+(\.)\w+$/

     //匹配一个QQ邮箱地址

     //861745122@qq.com

     var r_qq_email=/^\d{5,}@qq(\.)com$/

     //匹配一个163的邮箱地址

     var r_163_email=/^\w+@163(\.)com$/

     //匹配一个后缀名可能是.com|.net|.cn|.edu

     var email=/^\w+@\w+(\.)com|net|cn|edu$/

    //要求输入有效的年龄段

    var r_age=/^\d{1,2}$/

    //if(age&amp;gt;=18&amp;amp;&amp;amp;age&amp;lt;=100)

    //验证手机号:11位  13 15 18开头

    var r_tel=/^1[3,5,8]\d{9}$/

     //验证身份证号  18位或者17位加一个X

   var r_s=/^\d{18}|\d{17}x$/i

    //验证中文

   var reg=/^[\u4e00-\u9fa5]{2,17}$/
&lt;/code&gt;&lt;/pre&gt;

   	      //php中文

&lt;pre&gt;&lt;code&gt;    $reg = “/^[\x{4e00}-\x{9fa5}]$/u”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.深入理解客户端验证和服务器端验证表单信息的区别&lt;/p&gt;

   	客户端的验证也就是js验证，只是为了提高用户的体验，

   	在表单提交到服务器端之前做客户端信息的有效性验证。客户端的js很容易被用户禁止掉，

   	如果客户端禁止了js，那么验证也就失效了，用户照样还可以提交非法数据。

   	所以，保证入库数据的合法性和有效性必须采用服务器端php验证和客户端js验证结合的方式进行，

   	服务器端的验证增加了验证的安全性和数据的合法性及有效性，为数据入库做了很好的铺垫，

   	让数据库更准确的得到客户端的数据。

&lt;p&gt;7.多文件上传&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;goods_pic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;vg&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;extension&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
                &lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;extension&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;重新设置名字&lt;/span&gt;
                &lt;span class=&quot;vg&quot;&gt;$lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tmp_name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;move_uploaded_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$lin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/images/&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;vg&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/images/&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;vg&quot;&gt;$ctrlfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\\&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;vg&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$ctrlfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;vg&quot;&gt;$img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;8.实现分页步骤&lt;/p&gt;

&lt;p&gt;第一步：查询出参与分页数据的总记录数&lt;/p&gt;

&lt;p&gt;第二步：设定每页显示多少条数据&lt;/p&gt;

&lt;p&gt;第三步：计算出总页数：ceil（总记录数/每页显示的条数）&lt;/p&gt;

&lt;p&gt;第四步：获取当前页：$page=$_GET[‘page’]?$_GET[‘page’]:1;&lt;/p&gt;

&lt;p&gt;第五步：计算偏移量：(当前页-1)*每页显示的条数&lt;/p&gt;

&lt;p&gt;第六步：查询数据：select * from 表名 limit 偏移量,每页显示的条数&lt;/p&gt;

&lt;p&gt;第七步：输出上一页、下一页、首页、尾页的超链接&lt;/p&gt;

&lt;p&gt;9.ajax技术的概念，ajax的优缺点及应用场景&lt;/p&gt;

&lt;p&gt;1)定义：ajax是一种技术，是由div+css javascript和xml技术组成&lt;/p&gt;

&lt;p&gt;2)作用：异步存取，局部刷新，能实现无页面刷新的效果&lt;/p&gt;

&lt;p&gt;3)Ajax优点：可以减轻服务器处理数据的压力，实现无页面刷新，增   强用户体验&lt;/p&gt;

&lt;p&gt;4)Ajax缺点：不利于SEO（搜索引擎）优化&lt;/p&gt;

&lt;p&gt;5)Ajax应用场景：在页面显示大量数据，实时更新的网站上，实现局部刷新，与后台服务器及时交互&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Session、Cookie、Pdo、Mysqli的使用!</title>
   <link href="http://127.0.0.1/naringu/2014/01/09/one/"/>
   <updated>2014-01-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/01/09/one</id>
   <content type="html">&lt;p&gt;1.session
运用session时，首先要Session_Start();开启session
存session：$_SESSION[“name”]=”value”;
取session：echo $_SESSION[“name”];
销毁session：session_destroy();&lt;/p&gt;

&lt;p&gt;2.cookie
setcookie(“UserName”,”zs”,time()+2&lt;em&gt;7&lt;/em&gt;24*3600);
第一个参数为键名，第二个参数为值，第三个参数为过期时间
去cookie值：$_COOKIE[‘UserName’];
删除一个cookie：setcookie(‘UserName’, NULL);&lt;/p&gt;

&lt;p&gt;3.pdo
使用pdo时要开启pdo扩展。
什么是pdo？
PDO：PHP data object，php数据对象，也叫php数据抽象层，是一种能够管理多种不同数据库的数据对
象，PHP只需要去调用PDO，而不用去在意PDO底层管理的数据库到底是采用什么样的方式，哪些方法来实
现的功能。让PHP操作数据库变得简单。
使用：$pdo=new PDO(‘mysql:host=127.0.0.1;dbname=hehe’,’root’,’root’);
三个参数
	$dsn：数据库类型:host=主机地址;port=端口号;dbname=数据库
	$user：用户名
	$pass：密码
必须区分SQL语句到底是什么操作：写操作使用exec，读操作使用query
例如：$pdo-&amp;gt;query(‘select * from login’)-&amp;gt;fetchAll(PDO::FETCH_ASSOC)；
      $pdo-&amp;gt;exec(‘delete from login’);&lt;/p&gt;

&lt;p&gt;4.mysqli	
$mysqli = mysqli_connect($cfg_dbhost,$cfg_dbuser,$cfg_dbpwd,$cfg_dbname);
四个参数
	$cfg_dbhost：127.0.0.1
	$cfg_dbuser：用户名
	$cfg_dbpwd：密码
	$cfg_dbname: 数据库
mysqli_query($mysqli,”set names utf8”);
例如：$sql = “select * from test”;
 $res = mysqli_query($mysqli,$sql);
$row=mysqli_fetch_array($res);
print_r($row);  	//这会是一个二维数组&lt;/p&gt;

&lt;p&gt;5.搜索高量显示
搜索一个关键字，并且把关键字标红
例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vg&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue,red,green,yellow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;font color=&#39;red&#39;&amp;gt;red&amp;lt;/font&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;结果为red是高亮显示&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jeykll + github 发博客!</title>
   <link href="http://127.0.0.1/naringu/2014/01/09/hahah/"/>
   <updated>2014-01-09T00:00:00+08:00</updated>
   <id>http://127.0.0.1/naringu/2014/01/09/hahah</id>
   <content type="html">&lt;ol&gt;
  &lt;li&gt;首先你要在github上创建一个版本库
名字必须和版本库的名字相同&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接下来安装ruby
&lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;http://rubyinstaller.org/&lt;/a&gt;
下载完之后要配置环境变量&lt;/p&gt;

    &lt;p&gt;在windows中配置环境变量&lt;/p&gt;

    &lt;p&gt;RUBY_HOME=rubyinstaller_dir （实际的ruby所在路径）&lt;/p&gt;

    &lt;p&gt;在path中添加 %RUBY_HOME%\bin
在命令行下运行 ruby –version，如果显示ruby版本信息说明安装正常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;接下来我们在安装RubyGems&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;https://rubygems.org/pages/download&lt;/p&gt;

&lt;p&gt;下载完到本地之后用终端输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;那么到现在RubyGems就安装成功啦&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;接下来我们在安装jekyll
打开终端 输入&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;检查一下是否安装成功。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;成功的话就会显示jekyll版本号。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;目前为止，我们已经安装完ruby RubyGems jekyll ，接下来要可以新建一个本地博客啦！！！&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myblog&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;输入该命令之后，你的文件夹里面就会生成一个叫myblog的文件夹。myblog可以随便换成你喜欢的名字，比如你想建一个新的博客叫Winter，那你就输入 kekyll new Winter ，以此类推。
进入myblog文件夹 cd myblog
里面就会有这些文件。&lt;/p&gt;

&lt;p&gt;在_posts文件夹里写你的博客，命名规范必须和里面自带的一致 比如：2016-10-27-XXXXX.markdown&lt;/p&gt;

&lt;p&gt;打开命令框输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后系统会告诉你本地网站已经搭建好了，在浏览器里面输入localhost:4000就能看到你刚刚建立好的最基本jekyll网站啦！&lt;/p&gt;

&lt;p&gt;*注意！在本地测试时jekyll serve 命令框不能关闭！！！&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;把本地文件推送到之前创建好的github中，怎么推送就不细说了，推送成功之后在浏览器里面输入XXXX.github.io 你写的博客就会显示出来！
每次在本地_posts中写完之后都得推送到github版本库中。。。。。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此！你的ZB博客就出来了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> 代码 ajax分页 </title>
   <link href="http://127.0.0.1/ajax/2011/05/03/ajax/"/>
   <updated>2011-05-03T06:14:54+08:00</updated>
   <id>http://127.0.0.1/ajax/2011/05/03/ajax</id>
   <content type="html">&lt;p&gt;后台：&lt;br /&gt;
[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function check(Request $request)  
{  
    $news = $request-&amp;gt;input(&#39;news&#39;);  
    $begin=$request-&amp;gt;input(&#39;begin&#39;);  
    $end = $request-&amp;gt;input(&#39;end&#39;);  
    $where = &quot;1&quot;;  
    if(!empty($news)){  
        $where.=&quot; and news like &#39;%$news%&#39;&quot;;  
    }  
    if(!empty($begin)){  
        $where.=&quot; and time &amp;gt; &#39;$begin&#39;&quot;;  
    }  
    if(!empty($end)){  
        $where.=&quot; and time &amp;lt; &#39;$end&#39;&quot;;  
    }  
    //echo $where;  
    $count = count(Db::select(&quot;select * from news  where $where&quot;));  
  
    $n=3;  
    $pages=ceil($count/$n);  
  
    //echo $pages;die;  
  
    $page=isset($_GET[&#39;page&#39;])?$_GET[&#39;page&#39;]:1;  
  
    $up=$page&amp;lt;=1?$page:$page-1;  
  
    $down=$page&amp;gt;=$pages?$pages:$page+1;  
  
    $state=($page-1)*$n;  
  
    $arr=Db::select(&quot;select * from news where $where limit $state,$n&quot;);  
    //print_r($arr);die;  
  
    $arr[&#39;arr&#39;]=$arr;  
    $arr[&#39;up&#39;]=$up;  
    $arr[&#39;down&#39;]=$down;  
    $arr[&#39;pages&#39;]=$pages;  
    $arr[&#39;page&#39;]=$page;  
    $arr[&#39;begin&#39;]=$begin;  
  
  
  
    return view(&#39;index&#39;,[  
        &#39;arr&#39;=&amp;gt;$arr  
    ]);  
}   前台： &amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;display(1)&quot;&amp;gt;首页&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;display()&quot;&amp;gt;上一页&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;display()&quot;&amp;gt;下一页&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;display()&quot;&amp;gt;末页&amp;lt;/a&amp;gt; ```php &amp;lt;script&amp;gt; function display(page) { var news=document.getElementById(&#39;news&#39;).value; var begin=document.getElementById(&#39;begin&#39;).value; var end=document.getElementById(&#39;end&#39;).value; var xhr = new XMLHttpRequest(); xhr.open(&#39;get&#39;,&#39;check?page=&#39;+page+&quot;&amp;amp;news=&quot;+news+&quot;&amp;amp;begin=&quot;+begin+&quot;&amp;amp;end=&quot;+end) xhr.send(null); xhr.onreadystatechange=function() { if(xhr.readyState==4 &amp;amp;&amp;amp; xhr.status==200) { document.getElementById(&#39;div1&#39;).innerHTML=xhr.responseText; } } }&amp;lt;/script&amp;gt; ```
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title> 代码 laravel发邮件 </title>
   <link href="http://127.0.0.1/laravel/2011/05/02/laravel/"/>
   <updated>2011-05-02T06:14:54+08:00</updated>
   <id>http://127.0.0.1/laravel/2011/05/02/laravel</id>
   <content type="html">&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use mail;  
  
if ($request-&amp;gt;isMethod(&#39;post&#39;))  
{  
    $input=$request-&amp;gt;all();  
    //print_r($input);die;   
    //unset($input[&#39;_token&#39;]);  
     $email =$request-&amp;gt;input(&#39;email&#39;);  
     $name =$request-&amp;gt;input(&#39;name&#39;);  
     $check =$request-&amp;gt;input(&#39;check&#39;);  
    foreach($email as $value) {  
    $res= Mail::send(&#39;emails.test&#39;,[&#39;check&#39;=&amp;gt;$check],function($m)use($value,$name) { $m-&amp;gt;to($value)-&amp;gt;subject($name); }); if(!$res) { die(&quot;失败了！&quot;); } else{$re = DB::table(&#39;email&#39;)-&amp;gt;insert( [&#39;name&#39;=&amp;gt;$name,&#39;check&#39;=&amp;gt;$check,&#39;email&#39;=&amp;gt;$value,&#39;time&#39;=&amp;gt;date(&#39;Y-m-d h:i:s&#39;)] );if(!$re){die(&quot;入库失败&quot;);  
     }  
   }   
   }  
    returnredirect(&#39;lists&#39;);}  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> 微信公众号开发 </title>
   <link href="http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/15/weixin/"/>
   <updated>2010-02-15T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/15/weixin</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;01：我们首先注册一个微信订阅号  
02： （1）进入后台，进行消息自动回复，自定义菜单的操作  
     （2）接口调用，自己开发。  
首先：我用的是测试号开发.(因为权限的限制)  
(地址：https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login)  
      APPID:***  
      APPSECRET:***  
  
对接  
URL:(换成自己的)  
Token:( 换成自己的)  
      进行对接在微信开发开发手册中 PHP (demo),放入上面的URL的地址中(记得Token换一下)  
      对接成功后我们就可以愉快的开发了，是不是有点小激动。  
&amp;lt;pre name=&quot;code&quot; class=&quot;php&quot;&amp;gt;1：获取access_token  
        
   access_token是公众号的全局唯一票据，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间。access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效。  
  
接口地址：  
http请求方式: GET  
https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;amp;appid=APPID&amp;amp;secret=APPSECRET  
  
  
这里我们需要知道：  
appid：***  
secret：***  
很巧我们已经知道了。  
  
正常情况下，微信会返回下述JSON数据包给公众号：   
{&quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,&quot;expires_in&quot;:7200}  



2：被动消息回复  
   01：文本回复：  
   在demo实例中我们可以发现：  
   [php] view plain copy
   public function responseMsg()  
   {  
        //get post data, May be due to the different environments  
        $postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];  
  
        //extract post data  
        if (!empty($postStr)){  
                /* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection, 
                   the best way is to check the validity of xml by yourself */  
                libxml_disable_entity_loader(true);  
                $postObj = simplexml_load_string($postStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);  
                $fromUsername = $postObj-&amp;gt;FromUserName;  
                $toUsername = $postObj-&amp;gt;ToUserName;  
                $keyword = trim($postObj-&amp;gt;Content);  
                $time = time();  
                $textTpl = &quot;&amp;lt;xml&amp;gt;  
                &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/ToUserName&amp;gt;  
                &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/FromUserName&amp;gt;  
                &amp;lt;CreateTime&amp;gt;%s&amp;lt;/CreateTime&amp;gt;  
                &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MsgType&amp;gt;  
                &amp;lt;Content&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/Content&amp;gt;  
                &amp;lt;FuncFlag&amp;gt;0&amp;lt;/FuncFlag&amp;gt;  
                &amp;lt;/xml&amp;gt;&quot;;               
        if(!empty( $keyword ))  
                {  
                    $msgType = &quot;text&quot;;  
                    $contentStr = &quot;Welcome to wechat world!&quot;;  
                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
                    echo $resultStr;  
                }else{  
                    echo &quot;Input something...&quot;;  
                }  
  
        }else {  
            echo &quot;&quot;;  
            exit;  
        }  
     }  
  
     如上面实例中：我们可以看到  
     $contentStr = &quot;Welcome to wechat world!&quot;;   
     现在我们可以测试一下，关注公众号：  
     发送数据，  
     看到返回回来的正是：$contentStr  
     （这个$contentStr 我们可以改成自己喜欢的，哈哈）  




       02：图片回复：  
       可以看到在demo中  
       $msgType = &quot;text&quot;;  
       是不是觉得改成$msgType = &quot;image&quot;就行了？ 这是错误的。  
       我们可以仔细的分析一下demo  
   [php] view plain copy
            if(!empty( $keyword ))  
                {  
                    $msgType = &quot;text&quot;;  
                    $contentStr = &quot;Welcome to wechat world!&quot;;  
                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
                    echo $resultStr;  
                }else{  
                    echo &quot;Input something...&quot;;  
                }  
  
   $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
  
    这里面的参数：  
   $textTpl  是不是是文本类型的？  
    所以我们要改成image 的类型：     
              [php] view plain copy
               $imgTpl = &quot;&amp;lt;xml&amp;gt;  
               &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/ToUserName&amp;gt;  
               &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/FromUserName&amp;gt;  
               &amp;lt;CreateTime&amp;gt;%s&amp;lt;/CreateTime&amp;gt;  
               &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MsgType&amp;gt;  
               &amp;lt;Image&amp;gt;  
                           &amp;lt;MediaId&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MediaId&amp;gt;  
                           &amp;lt;/Image &amp;gt;  
            &amp;lt;/xml&amp;gt;&quot;;  
               注意到现在还没有完了。  
               参数里的$contentStr可不是文本的$contentStr = &quot;Welcome to wechat world!&quot;;  
  
               应该是$mediald了。  
               那么问题就来了？  
               Mediald从哪来？是什么？  
               Mediald是一个文件的唯一标示。  
  
               我们上传文件才能获取Mediald  
  
               所以我们就的上传文件，调动接口了。  
               在开发文档的素材管理中：  
               新增临时素材：  
               接口地址：https://api.weixin.qq.com/cgi-bin/media/upload?access_token=ACCESS_TOKEN&amp;amp;type=TYPE  
  
               这里我们需要获取access_token值(上面我们已经获取到了)  
  
               Type的类型：image  
  
               成功的时候回返回  
               {&quot;type&quot;:&quot;TYPE&quot;,&quot;media_id&quot;:&quot;MEDIA_ID&quot;,&quot;created_at&quot;:123456789}  
  
               我们拿到media_id值，  
  
               $mediald=media_id值  
  
               然而这个参数写成：  
               $resultStr = sprintf($imgTpl, $fromUsername, $toUsername, $time, $msgType, $mediald);  
  
  
               我们也可以指定一个规则：  
                [php] view plain copy
                if(!empty( $keyword ))  
                {  
                  If($keyword==”img”)  
                   {  
                    $imgTpl = &quot;&amp;lt;xml&amp;gt;  
                   &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/ToUserName&amp;gt;  
                   &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/FromUserName&amp;gt;  
                   &amp;lt;CreateTime&amp;gt;%s&amp;lt;/CreateTime&amp;gt;  
                   &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MsgType&amp;gt;  
                   &amp;lt;Image&amp;gt;  
                               &amp;lt;MediaId&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MediaId&amp;gt;  
                               &amp;lt;/Image &amp;gt;  
                   &amp;lt;/xml&amp;gt;&quot;;  
                        $msgType = &quot;image&quot;;  
                    $mediald=media_id;  
                    $resultStr = sprintf($imgTpl, $fromUsername, $toUsername, $time, $msgType, $mediald);  
                    echo $resultStr;  
  
                  }  
                   else  
                  {  
                    $msgType = &quot;text&quot;;  
                    $contentStr = &quot;Welcome to wechat world!&quot;;  
                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
                    echo $resultStr;  
                  }                  
                  }else{  
                    echo &quot;Input something...&quot;;  
                  }  
 进行测试;  
这样是不感觉特别爽呀！！！  
&amp;lt;p&amp;gt;3：开发Oauth2.0 的授权：&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;   我们可以先看一下文档&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a target=_blank href=&quot;https://mp.weixin.qq.com/wiki/4/9ac2e7b1f1d22e9e57260f6553822520.html#.E7.AC.AC.E4.B8.80.E6.AD.A5.EF.BC.9A.E7.94.A8.E6.88.B7.E5.90.8C.E6.84.8F.E6.8E.88.E6.9D.83.EF.BC.8C.E8.8E.B7.E5.8F.96code&quot;&amp;gt;第一步：用户同意授权，获取code&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt; &amp;lt;a target=_blank href=&quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;response_type=code&amp;amp;scope=SCOPE&amp;amp;state=STATE#wechat_redirect&quot; target=&quot;_blank&quot;&amp;gt;https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;response_type=code&amp;amp;scope=SCOPE&amp;amp;state=STATE#wechat_redirect&amp;lt;/a&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的参数：&lt;/p&gt;

&lt;p&gt;Appid：公众号的唯一标识&lt;/p&gt;

&lt;p&gt;redirect_uri：授权后重定向的回调链接地址，请使用urlencode对链接进行处理&lt;/p&gt;

&lt;p&gt;scope: ……&lt;/p&gt;

&lt;p&gt;用户同意授权后&lt;/p&gt;

&lt;p&gt;如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;amp;state=STATE。若用户禁止授权，则重定向后不会带上code参数，仅会带上state参数redirect_uri?state=STATE&lt;/p&gt;

&lt;p&gt;我们可以接一下code值：&lt;/p&gt;

&lt;p&gt;$code=$_GET[‘code’]&lt;/p&gt;

&lt;p&gt;第二步：通过code换取网页授权access_token&lt;/p&gt;

&lt;p&gt;这里access_token可不是以上的那个access_token&lt;/p&gt;

&lt;p&gt;获取code后，请求以下链接获取access_token：&lt;/p&gt;

&lt;p&gt;https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;amp;secret=SECRET&amp;amp;code=CODE&amp;amp;grant_type=authorization_code&lt;/p&gt;

&lt;p&gt;成功以后：&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;“access_token”:”ACCESS_TOKEN”,&lt;/p&gt;

&lt;p&gt;“expires_in”:7200,&lt;/p&gt;

&lt;p&gt;“refresh_token”:”REFRESH_TOKEN”,&lt;/p&gt;

&lt;p&gt;“openid”:”OPENID”,&lt;/p&gt;

&lt;p&gt;“scope”:”SCOPE”&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;我们会获取很多数据.&lt;/p&gt;

&lt;p&gt;openid&lt;/p&gt;

&lt;p&gt;access_token&lt;/p&gt;

&lt;p&gt;第三步：拉取用户信息&lt;/p&gt;

&lt;p&gt;http：GET（请使用https协议）&lt;/p&gt;

&lt;p&gt;https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;amp;openid=OPENID&amp;amp;lang=zh_CN&lt;/p&gt;

&lt;p&gt;access_token：&lt;/p&gt;

&lt;p&gt;opened:&lt;/p&gt;

&lt;p&gt;我们都获取到了。&lt;/p&gt;

&lt;p&gt;调用成功后我们就可以获取用户的信息了。&lt;/p&gt;

&lt;p&gt;{&lt;/p&gt;

&lt;p&gt;“openid”:” OPENID”,&lt;/p&gt;

&lt;p&gt;” nickname”: NICKNAME,&lt;/p&gt;

&lt;p&gt;“sex”:”1”,&lt;/p&gt;

&lt;p&gt;“province”:”PROVINCE”&lt;/p&gt;

&lt;p&gt;“city”:”CITY”,&lt;/p&gt;

&lt;p&gt;“country”:”COUNTRY”,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;headimgurl&quot;:    &quot; http://wx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46&quot;, 

    &quot;privilege&quot;:[

    &quot;PRIVILEGE1&quot;

    &quot;PRIVILEGE2&quot;

],

&quot;unionid&quot;: &quot;o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>阿里云 centos7 mysql远程连接报错 </title>
   <link href="http://127.0.0.1/centos/2010/02/14/centos7/"/>
   <updated>2010-02-14T06:14:54+08:00</updated>
   <id>http://127.0.0.1/centos/2010/02/14/centos7</id>
   <content type="html">&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; grant all on *.* to user1 identified by &#39;123456&#39;;  
Query OK, 0 rows affected (0.01 sec)  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>微信 关注/取消关注事件  </title>
   <link href="http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/12/jssdk/"/>
   <updated>2010-02-12T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/12/jssdk</id>
   <content type="html">&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
/** 
  * wechat php test 
  */  
  
//define your token  
define(&quot;TOKEN&quot;, &quot;weixin&quot;);  
$wechatObj = new wechatCallbackapiTest();  
//$wechatObj-&amp;gt;valid();  
if(!isset($_GET[&quot;echostr&quot;])){  
     $wechatObj-&amp;gt;responseMsg();  
}else{  
 $wechatObj-&amp;gt;valid();  
}  
  
class wechatCallbackapiTest  
{  
    public function valid()  
    {  
        $echoStr = $_GET[&quot;echostr&quot;];  
        if($this-&amp;gt;checkSignature()){  
            echo $echoStr;  
            //$this-&amp;gt;responseMsg();  
            exit;  
        }  
    }  
  
    public function responseMsg()  
    {  
        $postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];  
          
        if (!empty($postStr)){  
        $postObj = simplexml_load_string($postStr, &#39;SimpleXMLElement&#39;, LIBXML_NOCDATA);  
        $RX_TYPE = trim($postObj-&amp;gt;MsgType);  
                switch($RX_TYPE)  
                {  
                    case &quot;text&quot;:  
                        $resultStr = $this-&amp;gt;handleText($postObj);  
                        break;  
                    case &quot;event&quot;:  
                        $resultStr = $this-&amp;gt;handleEvent($postObj);  
                        break;  
                    default:  
                        $resultStr = &quot;Unknow msg type: &quot;.$RX_TYPE;  
                        break;  
                }  
                echo $resultStr;  
                //$fromUsername = $postObj-&amp;gt;FromUserName;  
                //$toUsername = $postObj-&amp;gt;ToUserName;  
                //$keyword = trim($postObj-&amp;gt;Content);  
                //$time = time();  
                //$textTpl = &quot;&amp;lt;xml&amp;gt;  
                //          &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/ToUserName&amp;gt;  
                //          &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/FromUserName&amp;gt;  
                //          &amp;lt;CreateTime&amp;gt;%s&amp;lt;/CreateTime&amp;gt;  
                //          &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/MsgType&amp;gt;  
                //          &amp;lt;Content&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/Content&amp;gt;  
                //          &amp;lt;FuncFlag&amp;gt;0&amp;lt;/FuncFlag&amp;gt;  
                //          &amp;lt;/xml&amp;gt;&quot;;               
                //if(!empty( $keyword ))  
                //{  
                //  $msgType = &quot;text&quot;;  
                //  $contentStr = &quot;你好啊，屌丝1&quot;;  
                //  $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);  
                //  echo $resultStr;  
                //}else{  
                //  echo &quot;你好啊，屌丝1&quot;;  
                //}  
  
        }else {  
            echo &quot;&quot;;  
            exit;  
        }  
    }  
    public function handleEvent($object)  
    {  
        $contentStr = &quot;&quot;;  
        switch ($object-&amp;gt;Event)  
        {  
            case &quot;subscribe&quot;:  
                $contentStr = &quot;感谢您关注【微卖】&quot;.&quot;\n&quot;.&quot;我们为您提供全国各地的生活指南，做最好的外卖微信平台。&quot;.&quot;\n&quot;.&quot;目前平台功能如下：&quot;.&quot;\n&quot;.&quot;【1】 查天气，如输入：本地天气&quot;.&quot;\n&quot;.&quot;【2】 查公交，如输入：本地公交178&quot;.&quot;\n&quot;.&quot;【3】 翻译，如输入：翻译I love you&quot;.&quot;\n&quot;.&quot;【4】 本地信息查询，如输入：&quot;.&quot;\n&quot;.&quot;更多内容，敬请期待...&quot;;  
                break;  
            default :  
                $contentStr = &quot;Unknow Event: &quot;.$object-&amp;gt;Event;  
                break;  
        }  
        $resultStr = $this-&amp;gt;responseText($object, $contentStr);  
        return $resultStr;  
    }  
      
    public function responseText($object, $content, $flag=0)  
    {  
        $textTpl = &quot;&amp;lt;xml&amp;gt;  
                    &amp;lt;ToUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/ToUserName&amp;gt;  
                    &amp;lt;FromUserName&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/FromUserName&amp;gt;  
                    &amp;lt;CreateTime&amp;gt;%s&amp;lt;/CreateTime&amp;gt;  
                    &amp;lt;MsgType&amp;gt;&amp;lt;![CDATA[text]]&amp;gt;&amp;lt;/MsgType&amp;gt;  
                    &amp;lt;Content&amp;gt;&amp;lt;![CDATA[%s]]&amp;gt;&amp;lt;/Content&amp;gt;  
                    &amp;lt;FuncFlag&amp;gt;%d&amp;lt;/FuncFlag&amp;gt;  
                    &amp;lt;/xml&amp;gt;&quot;;  
        $resultStr = sprintf($textTpl, $object-&amp;gt;FromUserName, $object-&amp;gt;ToUserName, time(), $content, $flag);  
        return $resultStr;  
    }  
      
      
  
    private function checkSignature()  
    {  
        // you must define TOKEN by yourself  
        if (!defined(&quot;TOKEN&quot;)) {  
            throw new Exception(&#39;TOKEN is not defined!&#39;);  
        }  
          
        $signature = $_GET[&quot;signature&quot;];  
        $timestamp = $_GET[&quot;timestamp&quot;];  
        $nonce = $_GET[&quot;nonce&quot;];  
                  
        $token = TOKEN;  
        $tmpArr = array($token, $timestamp, $nonce);  
        // use SORT_STRING rule  
        sort($tmpArr, SORT_STRING);  
        $tmpStr = implode( $tmpArr );  
        $tmpStr = sha1( $tmpStr );  
        return true;  
        if( $tmpStr == $signature ){  
            return true;  
        }else{  
            return false;  
        }  
    }  
}  
  
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>微信js接口 的调用 </title>
   <link href="http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/11/jssdk/"/>
   <updated>2010-02-11T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/11/jssdk</id>
   <content type="html">&lt;p&gt;一、JSSDK类定义
复制代码&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
class JSSDK {  
  private $appId;  
  private $appSecret;  
  
  public function __construct($appId, $appSecret) {  
    $this-&amp;gt;appId = $appId;  
    $this-&amp;gt;appSecret = $appSecret;  
  }  
  
  public function getSignPackage() {  
    $jsapiTicket = $this-&amp;gt;getJsApiTicket();  
    $url = &quot;http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]&quot;;  
    $timestamp = time();  
    $nonceStr = $this-&amp;gt;createNonceStr();  
  
    // 这里参数的顺序要按照 key 值 ASCII 码升序排序  
    $string = &quot;jsapi_ticket=$jsapiTicket&amp;amp;noncestr=$nonceStr×tamp=$timestamp&amp;amp;url=$url&quot;;  
  
    $signature = sha1($string);  
  
    $signPackage = array(  
      &quot;appId&quot;     =&amp;gt; $this-&amp;gt;appId,  
      &quot;nonceStr&quot;  =&amp;gt; $nonceStr,  
      &quot;timestamp&quot; =&amp;gt; $timestamp,  
      &quot;url&quot;       =&amp;gt; $url,  
      &quot;signature&quot; =&amp;gt; $signature,  
      &quot;rawString&quot; =&amp;gt; $string  
    );  
    return $signPackage;   
  }  
  
  private function createNonceStr($length = 16) {  
    $chars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;  
    $str = &quot;&quot;;  
    for ($i = 0; $i &amp;lt; $length; $i++) {  
      $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);  
    }  
    return $str;  
  }  
  
  private function getJsApiTicket() {  
    // jsapi_ticket 应该全局存储与更新，以下代码以写入到文件中做示例  
    $data = json_decode(file_get_contents(&quot;jsapi_ticket.json&quot;));  
    if ($data-&amp;gt;expire_time &amp;lt; time()) {  
      $accessToken = $this-&amp;gt;getAccessToken();  
      $url = &quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi&amp;amp;access_token=$accessToken&quot;;  
      $res = json_decode($this-&amp;gt;httpGet($url));  
      $ticket = $res-&amp;gt;ticket;  
      if ($ticket) {  
        $data-&amp;gt;expire_time = time() + 7000;  
        $data-&amp;gt;jsapi_ticket = $ticket;  
        $fp = fopen(&quot;jsapi_ticket.json&quot;, &quot;w&quot;);  
        fwrite($fp, json_encode($data));  
        fclose($fp);  
      }  
    } else {  
      $ticket = $data-&amp;gt;jsapi_ticket;  
    }  
  
    return $ticket;  
  }  
  
  private function getAccessToken() {  
    // access_token 应该全局存储与更新，以下代码以写入到文件中做示例  
    $data = json_decode(file_get_contents(&quot;access_token.json&quot;));  
    if ($data-&amp;gt;expire_time &amp;lt; time()) {  
      $url = &quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;amp;appid=$this-&amp;gt;appId&amp;amp;secret=$this-&amp;gt;appSecret&quot;;  
      $res = json_decode($this-&amp;gt;httpGet($url));  
      $access_token = $res-&amp;gt;access_token;  
      if ($access_token) {  
        $data-&amp;gt;expire_time = time() + 7000;  
        $data-&amp;gt;access_token = $access_token;  
        $fp = fopen(&quot;access_token.json&quot;, &quot;w&quot;);  
        fwrite($fp, json_encode($data));  
        fclose($fp);  
      }  
    } else {  
      $access_token = $data-&amp;gt;access_token;  
    }  
    return $access_token;  
  }  
  
  private function httpGet($url) {  
    $curl = curl_init();  
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);  
    curl_setopt($curl, CURLOPT_TIMEOUT, 500);  
    curl_setopt($curl, CURLOPT_URL, $url);  
  
    $res = curl_exec($curl);  
    curl_close($curl);  
  
    return $res;  
  }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;复制代码&lt;/p&gt;

&lt;p&gt;二、类调用
复制代码&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
require_once &quot;jssdk.php&quot;;  
$jssdk = new JSSDK(&quot;yourAppID&quot;, &quot;yourAppSecret&quot;);  
$signPackage = $jssdk-&amp;gt;GetSignPackage();  
?&amp;gt;  
&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html lang=&quot;en&quot;&amp;gt;  
&amp;lt;head&amp;gt;  
  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;  
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
    
&amp;lt;/body&amp;gt;  
&amp;lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  
&amp;lt;script&amp;gt;  
  // 注意：所有的JS接口只能在公众号绑定的域名下调用，公众号开发者需要先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。   
  // 如果发现在 Android 不能分享自定义内容，请到官网下载最新的包覆盖安装，Android 自定义分享接口需升级至 6.0.2.58 版本及以上。  
  // 完整 JS-SDK 文档地址：http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html  
  wx.config({  
    appId: &#39;&amp;lt;?php echo $signPackage[&quot;appId&quot;];?&amp;gt;&#39;,  
    timestamp: &amp;lt;?php echo $signPackage[&quot;timestamp&quot;];?&amp;gt;,  
    nonceStr: &#39;&amp;lt;?php echo $signPackage[&quot;nonceStr&quot;];?&amp;gt;&#39;,  
    signature: &#39;&amp;lt;?php echo $signPackage[&quot;signature&quot;];?&amp;gt;&#39;,  
    jsApiList: [  
      // 所有要调用的 API 都要加到这个列表中  
    ]  
  });  
  wx.ready(function () {  
    // 在这里调用 API  
  });  
&amp;lt;/script&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>微信 jssdk获取经纬度转换成百度的经纬度</title>
   <link href="http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/10/jssdk/"/>
   <updated>2010-02-10T06:14:54+08:00</updated>
   <id>http://127.0.0.1/%E5%BE%AE%E4%BF%A1/2010/02/10/jssdk</id>
   <content type="html">&lt;p&gt;1：引入js文件&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;https://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  
  
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://api.map.baidu.com/api?type=quick&amp;amp;ak=iT46LDMO8w4i3k6blFarL7Me9RC2yQ1r&amp;amp;v=1.0&quot;&amp;gt;&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;  
  wx.config({  
    appId: &#39;&#39;,  
    timestamp: ,  
    nonceStr: &#39;&#39;,  
    signature: &#39;&#39;,  
    jsApiList: [  
      // 所有要调用的 API 都要加到这个列表中  
       &#39;getLocation&#39;,  
       &#39;openLocation&#39;  
    ]  
  });  
  wx.ready(function () {  
    // 在这里调用 API  
        wx.getLocation({  
                success: function (res) {  
                    var latitude = res.latitude; // 纬度，浮点数，范围为90 ~ -90  
                    var longitude = res.longitude; // 经度，浮点数，范围为180 ~ -180。  
                    var speed = res.speed; // 速度，以米/每秒计  
                    var accuracy = res.accuracy; // 位置精度  
                    localStorage.setItem(&quot;latitude&quot;, latitude);  
                        localStorage.setItem(&quot;longitude&quot;, longitude);  
                      
                    //var data = {  
                    //  latitude: latitude,  
                    //  longitude: longitude  
                    //};  
                    // alert(JSON.stringify(data));  
            $.ajax({  
            url: &#39;http://api.map.baidu.com/geocoder/v2/?ak=btsVVWf0TM1zUBEbzFz6QqWF&amp;amp;callback=renderReverse&amp;amp;location=&#39; + latitude + &#39;,&#39; + longitude + &#39;&amp;amp;output=json&amp;amp;pois=1&#39;,  
            type: &quot;get&quot;,  
            dataType: &quot;jsonp&quot;,  
            jsonp: &quot;callback&quot;,  
            success: function (data) {  
                console.log(data);  
                var name = (data.result.formatted_address);  
                   
                   
                 //var map=JSON.stringify(name);  
                             //alert(map);die;  
                 //var map1=map.substr(1);  
                 //var map1=name(start,stop);  
                 //alert(name);die;  
                   
                 $(&quot;#txt_dw&quot;).val(name);    
                    
                if (typeof callback == &quot;function&quot;) {  
                    callback(data);  
                }  
  
            }  
         });  
             //var map = new BMap.Map(&quot;allmap&quot;);  
                     //var point = new BMap.Point(116.331398,39.897445);  
                     //var gc = new BMap.Geocoder();  
                     //gc.getLocation(point, function(rs){  
                     //var addComp = rs.addressComponents;  
                     //alert(addComp.province + &quot;, &quot; + addComp.city + &quot;, &quot; + addComp.district + &quot;, &quot; + addComp.street + &quot;, &quot; + addComp.streetNumber);  
                     //});  
                      
  
                 }  
      
  
      
                 });  
    
 });  
&amp;lt;/script&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>  APP接口 基础简介    </title>
   <link href="http://127.0.0.1/php/2010/02/09/app/"/>
   <updated>2010-02-09T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/09/app</id>
   <content type="html">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;APP接口（通信接口）&lt;/p&gt;

    &lt;p&gt;接口地址：例如：http://app.com/api.php 
 接口文件：api.php处理一些业务逻辑（获取数据）
 接口数据：获取数据，传到客户端进行使用&lt;/p&gt;

    &lt;p&gt;APP接口的核心在于接口文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;APP接口如何进行通信
  客户端向服务器端发送http请求（用户不可视的接口地址），服务器端收到http请求之后根据请求做出相应的处理，处理结束后向客户端返回数据（数据一般为XML和JSON两种格式）。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XML数据及JSON数据&lt;/p&gt;

    &lt;p&gt;XML数据&lt;/p&gt;

    &lt;p&gt;XML –&amp;gt; Extensible Markup Language 扩展标记语言&lt;/p&gt;

    &lt;p&gt;用来标记语言数据，定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML语言的节点可以自定义，HTML语言的节点（标签）不可以自定义，例如：&amp;lt;p&amp;gt;、&lt;h&gt;等。
  XML语言格式统一，跨平台和语言。&lt;/h&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;? xml version = &quot;1.0&quot; encoding = &quot;UTF-8&quot; ?&amp;gt;
  &amp;lt;item&amp;gt;
       &amp;lt;title&amp;gt;singwa&amp;lt;/title&amp;gt;
       &amp;lt;test id = &quot;1&quot; /&amp;gt;
  &amp;lt;/item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;XML语言必须且只能拥有一个根节点&lt;item&gt;&lt;/item&gt;&lt;/p&gt;

    &lt;p&gt;JSON数据&lt;/p&gt;

    &lt;p&gt;JSON –&amp;gt; JavaScript Object Notation&lt;/p&gt;

    &lt;p&gt;一种轻量级的数据交换格式，具有良好的可读性，便于快速编写。采用兼容性很高的，完全独立于语言的文本格式。&lt;/p&gt;

    &lt;p&gt;XML与JSON的区别&lt;/p&gt;

    &lt;p&gt;可读性 	XML数据的可读性更强（结构清晰）
 生成数据方面（php生成XML及JSON） 	JSON只使用一个函数，方便
 传输速度 	JSON数据小，传输速度也快&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;APP接口功能&lt;/p&gt;

    &lt;p&gt;获取数据&lt;/p&gt;

    &lt;p&gt;从数据库中或缓存中获取数据，然后通过接口数据返回给客户端&lt;/p&gt;

    &lt;p&gt;提交数据&lt;/p&gt;

    &lt;p&gt;通过接口提交数据给服务器，然后服务器入库处理或做其他处理。提交数据的接口包含两种：版本升级接口和数据接收接口&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title> APP接口 具体操作   </title>
   <link href="http://127.0.0.1/php/2010/02/08/app/"/>
   <updated>2010-02-08T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/08/app</id>
   <content type="html">&lt;p&gt;1：单例模式连接数据库：&lt;/p&gt;

&lt;p&gt;2：首页接口开发以及客户端APP演示&lt;/p&gt;

&lt;p&gt;3：APP版本升级以及APP演示&lt;/p&gt;

&lt;p&gt;4：APP错误日志接口&lt;/p&gt;

&lt;p&gt;一：单例模式连接数据库&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php   
class Db{  
static private $_instance;  
static private $_connectSource;  
private $_dbConfig =array (  
   &#39;host&#39;=&amp;gt;&#39;127.0.0.1&#39;,  
   &#39;user&#39;=&amp;gt;&#39;root&#39;,  
   &#39;password&#39;=&amp;gt;&#39;root&#39;,  
   &#39;database&#39;=&amp;gt;&#39;test&#39;  
);  
private function __construct(){  
      
}  
  
Static public function getInstance(){  
   
     if(!(self::$_instance instanceof self))  
     {  
         self::$_instance=new self();  
     }  
       
     return self::$_instance;  
}  
  
public function connect(){  
    if(!self::$_connectSource)  
    {  
    self::$_connectSource=mysql_connect($this-&amp;gt;_dbConfig[&#39;host&#39;],$this-&amp;gt;_dbConfig[&#39;user&#39;],$this-&amp;gt;_dbConfig[&#39;password&#39;]);  
    if(!self::$_connectSource)  
    {  
        die(&#39;mysql connect error&#39;.mysql_error());  
    }  
      
    mysql_select_db($this-&amp;gt;_dbConfig[&#39;database&#39;]);  
  
    mysql_query(&quot;set names UTF8&quot;,self::$_connectSource);  
    }  
      
    return self::$_connectSource;  
      
      
      
}  
}  
  
  
$connect=Db::getInstance()-&amp;gt;connect();  
  
var_dump($connect);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二：首页接口开发以及客户端APP演示&lt;/p&gt;

&lt;p&gt;方案一：读取数据库方式(时效性高);&lt;/p&gt;

&lt;p&gt;方案二：读取缓存;&lt;/p&gt;

&lt;p&gt;方案三：定时读取缓存;&lt;/p&gt;

&lt;p&gt;工具：下载安卓模拟器：&lt;/p&gt;

&lt;p&gt;三：APP版本升级以及APP演示&lt;/p&gt;

&lt;p&gt;开启APP-&amp;gt;检测是否更新（是,否）&lt;/p&gt;

&lt;p&gt;四：APP错误日志接口&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title> 程序员如何打造薪资15k  </title>
   <link href="http://127.0.0.1/php/2010/02/07/15k/"/>
   <updated>2010-02-07T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/07/15k</id>
   <content type="html">&lt;p&gt;首先我是一名程序员&lt;/p&gt;

&lt;p&gt;无论技术上还是职业上，我都不称职。&lt;/p&gt;

&lt;p&gt;如何打造薪资15k？&lt;/p&gt;

&lt;p&gt;首先，先从自己的技术上着手。我们的技术一分耕耘一分收获，是你的就是你的，别人抢也抢不走，不是你的就不是你的，一把雪送到你手上也会融化流走。&lt;/p&gt;

&lt;p&gt;技术还是脚踏实地的好好学。&lt;/p&gt;

&lt;p&gt;其次，就是个人素质。&lt;/p&gt;

&lt;p&gt;性格开朗、稳重、有活力，待人热情、真诚；工作认真负责，积极主动，能吃苦耐劳，用于承受压力，勇于创新；有很强的组织能力和团队协作精神，具有较强的适应能力；纪律性强，工作积极配合；意志坚强，具有较强的无私奉献精神&lt;/p&gt;

&lt;p&gt;我们要有一个做程序员的能力：&lt;/p&gt;

&lt;p&gt;1，了解阶段，您能写一些代码，因为那是在手册和google的帮助下，您才完成的。变量乱定义，N多函数不知道，做起事来很慢，想到什么写什么，代码写的比较乱，后期维护很麻烦。
2，熟悉阶段，经常查函数，手册估计也看过一，二遍了，常用的函数基本上您都了解了。后期维护给您带来了不少痛苦，您开始发现自己的代码有很多不足，开始思考如果改进自己的代码，如何站在项目的角度来规划自己的代码，而不是想到什么写什么，知道如何来减少冗余代码，使您的代码清晰，知道什么样的代码写出来让人看着舒服，基本的代码规范，已经形成。为了提高自己，会特意的去一些技术性的论坛，学习研究。
3，很熟悉阶段，本来我想写精通的，到现在我也不知道精通是到什么程度，也没有听到有人说自己精通PHP的，所以就用很熟悉了。这个阶段，我想您已经从面向过程进入了面向对象。个人觉得面向对象的最大好处就是，能使整个项目功能化，模块化，后期维护，改版，升级就很方便了。没有面向对象的时候，不也一样开发吗.这个时期，您已经研究过了一种或者几种框架，结合自己的实际项目经验，在脑子里已经能形成自己的一个框架，这个框架是最适合你的。并且能够将这个框架运用到实际的开发中去，以提高自己的开发效率。
如果您刚写代码的时候，就有人能约束你按OOP的思想去写代码的话，那您就遇到贵人了。当不好的代码习惯养成时，在想改就不那么容易了。&lt;/p&gt;

&lt;p&gt;沟通能力
这一点非常重要，并且被越来越多的人所忽视，其实做程序员挺杯具的，根电脑打交道的时间是最多，也许是因为这样吧，勾通的时候，是比较费劲的，也有可能是被程序的严谨性束缚了大脑，说出来的话，太专业，可能其他人听不懂的。所以平时多和他人交流，特别是根非技术人员多勾通，多站在对方的角度来思想问题，这样的话，我想勾通起来会容易很多。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>四种基本排序算法 </title>
   <link href="http://127.0.0.1/php/2010/02/06/php/"/>
   <updated>2010-02-06T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/06/php</id>
   <content type="html">&lt;ol&gt;
  &lt;li&gt;冒泡排序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;思路分析：在要排序的一组数中，对当前还未排好的序列，从前往后对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即，每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;代码实现：  
$arr=array(1,43,54,62,21,66,32,78,36,76,39);    
function bubbleSort($arr)  
{    
  $len=count($arr);  
  //该层循环控制 需要冒泡的轮数  
  for($i=1;$i&amp;lt;$len;$i++)  
  { //该层循环用来控制每轮 冒出一个数 需要比较的次数  
    for($k=0;$k&amp;lt;$len-$i;$k++)  
    {  
       if($arr[$k]&amp;gt;$arr[$k+1])  
        {  
            $tmp=$arr[$k+1];  
            $arr[$k+1]=$arr[$k];  
            $arr[$k]=$tmp;  
        }  
    }  
  }  
  return $arr;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;选择排序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;思路分析：在要排序的一组数中，选出最小的一个数与第一个位置的数交换。然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;代码实现：  
function selectSort($arr) {  
//双重循环完成，外层控制轮数，内层控制比较次数  
 $len=count($arr);  
    for($i=0; $i&amp;lt;$len-1; $i++) {  
        //先假设最小的值的位置  
        $p = $i;  
          
        for($j=$i+1; $j&amp;lt;$len; $j++) {  
            //$arr[$p] 是当前已知的最小值  
            if($arr[$p] &amp;gt; $arr[$j]) {  
            //比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。  
                $p = $j;  
            }  
        }  
        //已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，则位置互换即可。  
        if($p != $i) {  
            $tmp = $arr[$p];  
            $arr[$p] = $arr[$i];  
            $arr[$i] = $tmp;  
        }  
    }  
    //返回最终结果  
    return $arr;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.插入排序&lt;/p&gt;

&lt;p&gt;思路分析：在要排序的一组数中，假设前面的数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;代码实现：  
function insertSort($arr) {  
    $len=count($arr);   
    for($i=1, $i&amp;lt;$len; $i++) {  
        $tmp = $arr[$i];  
        //内层循环控制，比较并插入  
        for($j=$i-1;$j&amp;gt;=0;$j--) {  
            if($tmp &amp;lt; $arr[$j]) {  
                //发现插入的元素要小，交换位置，将后边的元素与前面的元素互换  
                $arr[$j+1] = $arr[$j];  
                $arr[$j] = $tmp;  
            } else {  
                //如果碰到不需要移动的元素，由于是已经排序好是数组，则前面的就不需要再次比较了。  
                break;  
            }  
        }  
    }  
    return $arr;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.快速排序&lt;br /&gt;
思路分析：选择一个基准元素，通常选择第一个元素或者最后一个元素。通过一趟扫描，将待排序列分成两部分，一部分比基准元素小，一部分大于等于基准元素。此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;代码实现：  
function quickSort($arr) {  
    //先判断是否需要继续进行  
    $length = count($arr);  
    if($length &amp;lt;= 1) {  
        return $arr;  
    }  
    //选择第一个元素作为基准  
    $base_num = $arr[0];  
    //遍历除了标尺外的所有元素，按照大小关系放入两个数组内  
    //初始化两个数组  
    $left_array = array();  //小于基准的  
    $right_array = array();  //大于基准的  
    for($i=1; $i&amp;lt;$length; $i++) {  
        if($base_num &amp;gt; $arr[$i]) {  
            //放入左边数组  
            $left_array[] = $arr[$i];  
        } else {  
            //放入右边  
            $right_array[] = $arr[$i];  
        }  
    }  
    //再分别对左边和右边的数组进行相同的排序处理方式递归调用这个函数  
    $left_array = quick_sort($left_array);  
    $right_array = quick_sort($right_array);  
    //合并  
    return array_merge($left_array, array($base_num), $right_array);  
}  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>  QQ群红包的算法实现探讨（基于PHP demo）    </title>
   <link href="http://127.0.0.1/php/2010/02/05/qq/"/>
   <updated>2010-02-05T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/05/qq</id>
   <content type="html">&lt;p&gt;这个算法需要满足以下几点要求：&lt;/p&gt;

&lt;p&gt;1、每个人都要能够领取到红包；&lt;/p&gt;

&lt;p&gt;2、每个人领取到的红包金额总和=总金额；&lt;/p&gt;

&lt;p&gt;3、每个人领取到的红包金额不等，但也不能差的太离谱，不然就没趣味；&lt;/p&gt;

&lt;p&gt;4、算法一定要简单，不然对不起腾讯这个招牌；&lt;/p&gt;

&lt;p&gt;正式编码之前，先搭建一个递进的模型来分析规律
[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;设定总金额为10元，有N个人随机领取：  
N=1   
则红包金额=X元；   
  
N=2   
为保证第二个红包可以正常发出，第一个红包金额=0.01至9.99之间的某个随机数   
第二个红包=10-第一个红包金额；   
  
N=3   
红包1=0.01至0.98之间的某个随机数   
红包2=0.01至(10-红包1-0.01)的某个随机数   
红包3=10-红包1-红包2   
  
……  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此，规律出现啦！开始编码！
[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header(&quot;Content-Type: text/html;charset=utf-8&quot;);//输出不乱码，你懂的    
$total=10;//红包总额    
$num=8;// 分成8个红包，支持8人随机领取    
$min=0.01;//每个人最少能收到0.01元    
        
for ($i=1;$i&amp;lt;$num;$i++)    
  {    
      $safe_total=$total-($num-$i)*$min;//随机安全上限    
      $money=mt_rand($min*100,$safe_total*100)/100;    
      $total=$total-$money;    
      echo &#39;第&#39;.$i.&#39;个红包：&#39;.$money.&#39; 元，余额：&#39;.$total.&#39; 元 &amp;lt;br/&amp;gt;&#39;;    
  }    
 echo &#39;第&#39;.$num.&#39;个红包：&#39;.$total.&#39; 元，余额：0 元&#39;;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入一看，波动太大，这数据太无趣了！
[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;第1个红包：7.48 元，余额：2.52 元   
第2个红包：1.9 元，余额：0.62 元   
第3个红包：0.49 元，余额：0.13 元   
第4个红包：0.04 元，余额：0.09 元   
第5个红包：0.03 元，余额：0.06 元   
第6个红包：0.03 元，余额：0.03 元   
第7个红包：0.01 元，余额：0.02 元   
第8个红包：0.02 元，余额：0 元  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改良一下，将平均值作为随机安全上限来控制波动差&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header(&quot;Content-Type: text/html;charset=utf-8&quot;);//输出不乱码，你懂的    
$total=10;//红包总额    
$num=8;// 分成8个红包，支持8人随机领取    
$min=0.01;//每个人最少能收到0.01元    
        
for ($i=1;$i&amp;lt;$num;$i++)    
{    
    $safe_total=($total-($num-$i)*$min)/($num-$i);//随机安全上限    
    $money=mt_rand($min*100,$safe_total*100)/100;    
    $total=$total-$money;    
    echo &#39;第&#39;.$i.&#39;个红包：&#39;.$money.&#39; 元，余额：&#39;.$total.&#39; 元 &amp;lt;br/&amp;gt;&#39;;    
}    
  echo &#39;第&#39;.$num.&#39;个红包：&#39;.$total.&#39; 元，余额：0 元&#39;;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果见下图
[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;第1个红包：0.06 元，余额：9.94 元   
第2个红包：1.55 元，余额：8.39 元   
第3个红包：0.25 元，余额：8.14 元   
第4个红包：0.98 元，余额：7.16 元   
第5个红包：1.88 元，余额：5.28 元   
第6个红包：1.92 元，余额：3.36 元   
第7个红包：2.98 元，余额：0.38 元   
第8个红包：0.38 元，余额：0 元  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>  nodejs群聊和私聊   </title>
   <link href="http://127.0.0.1/php/2010/02/04/nodejs/"/>
   <updated>2010-02-04T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/04/nodejs</id>
   <content type="html">&lt;p&gt;网站效果测试：&lt;/p&gt;

&lt;p&gt;http://chat.zphteach.com/&lt;/p&gt;

&lt;p&gt;自行安装，代码如下&lt;/p&gt;

&lt;p&gt;先安装nodejs&lt;/p&gt;

&lt;p&gt;服务器代码&lt;/p&gt;

&lt;p&gt;[javascript]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = require(&#39;http&#39;).createServer(handler)  
var io = require(&#39;socket.io&#39;)(app);  
var fs = require(&#39;fs&#39;);  
  
app.listen(83);  
function handler (req, res) {  
  fs.readFile(__dirname + &#39;/index.html&#39;,  
  function (err, data) {  
    if (err) {  
      res.writeHead(500);  
      return res.end(&#39;Error loading index.html&#39;);  
    }  
  
    res.writeHead(200);  
    res.end(data);  
  });  
}     
io.on(&#39;connection&#39;, function (socket) {   
    //获取所有用户  
    var user_list=socket.nsp.adapter.rooms;  
    //将用户发送到页面  
    io.emit(&quot;user_list&quot;,user_list);  
    socket.on(&#39;disconnect&#39;, function () {  
        io.emit(&quot;user_list&quot;,user_list);  
    });  
      
    socket.on(&#39;per2per&#39;,function(name,data){  
        //console.log(socket.id);  
        //console.log(data.user)  
        var user=data.user.substr(2);  
        //console.log(user)  
        //console.log(data.content)  
        if(data.user==&#39;all&#39;){  
            io.emit(&quot;message&quot;,&#39;all&#39;,data.content)  
        }else{  
            socket.broadcast.to(data.user).emit(&quot;message&quot;,name,data.content);  
            socket.emit(&quot;message&quot;,user,data.content);  
        }  
          
    })  
      
    //admin模块结束  
          
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;客户端代码&lt;/p&gt;

&lt;p&gt;[javascript]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;  
&amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;  
&amp;lt;script src=&quot;js/jquery-1.11.1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  
    &amp;lt;script src=&quot;js/socket.io-1.4.5.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  
   &amp;lt;title&amp;gt;nodejs聊天&amp;lt;/title&amp;gt;  
   &amp;lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;  
   &amp;lt;script src=&quot;js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  
&amp;lt;/head&amp;gt;  
&amp;lt;style&amp;gt;  
    .panel-body{  
        display:none;  
    }  
&amp;lt;/style&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;div class=&quot;container&quot;&amp;gt;  
  
   &amp;lt;h1 id=&quot;count&quot;&amp;gt;&amp;lt;/h1&amp;gt;  
    昵称id:&amp;lt;span id=&quot;self&quot; style=&quot;color:red&quot;/&amp;gt;&amp;lt;/span&amp;gt;  
    发送给：&amp;lt;span id=&quot;friend&quot; style=&quot;color:green&quot; value=&quot;all&quot;/&amp;gt;all&amp;lt;/span&amp;gt;  
   &amp;lt;div class=&quot;row&quot;&amp;gt;  
      &amp;lt;div class=&quot;col-md-4&quot; style=&quot;overflow:auto&quot;&amp;gt;  
         &amp;lt;ul class=&quot;list-group&quot; id=&quot;userlist&quot; onclick=&quot;javascript:void(0)&quot;&amp;gt;  
           &amp;lt;li class=&quot;list-group-item&quot;&amp;gt;  
              &amp;lt;span class=&quot;badge&quot;&amp;gt;新&amp;lt;/span&amp;gt;  
              24*7 支持  
           &amp;lt;/li&amp;gt;  
        &amp;lt;/ul&amp;gt;  
      &amp;lt;/div&amp;gt;  
      &amp;lt;div class=&quot;col-md-8&quot; &amp;gt;  
          
        &amp;lt;div class=&quot;panel panel-default&quot; &amp;gt;  
          &amp;lt;!-- Default panel contents --&amp;gt;  
          &amp;lt;div class=&quot;panel-heading&quot; &amp;gt;消息中心&amp;lt;/div&amp;gt;  
          &amp;lt;div class=&quot;panel-body&quot; id=&#39;text_all&#39; style=&quot;height:500px; overflow:auto&quot;&amp;gt;  
            &amp;lt;div class=&quot;well well-sm&quot;&amp;gt;all&amp;lt;/div&amp;gt;  
          &amp;lt;/div&amp;gt;  
        &amp;lt;/div&amp;gt;  
        &amp;lt;input id=&quot;content&quot;/&amp;gt;  
        &amp;lt;button onclick=&quot;send()&quot;  class=&quot;btn btn-success&quot;&amp;gt;send&amp;lt;/button&amp;gt;  
          
      &amp;lt;/div&amp;gt;  
   &amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;  
     
&amp;lt;/div&amp;gt;  
  
  
&amp;lt;script&amp;gt;  
$(&quot;#text_all&quot;).css(&#39;display&#39;,&#39;block&#39;);  
var socket = io(&#39;http://&#39;+location.host+&#39;:83&#39;); // TIP: io()  
  socket.on(&#39;connect&#39;, function () {   
    $(&quot;#self&quot;).html(socket.id);//获取自己socke.id  
    //获取用户列表  
    socket.on(&#39;user_list&#39;,function(data){  
        $(&quot;#userlist&quot;).empty();  
        //console.log(data);  
        var count=0;  
        //所有人标签  
        var text=&#39;&amp;lt;li class=&quot;list-group-item&quot; value=&quot;all&quot;&amp;gt;&amp;lt;span id=&quot;badge_all&quot; class=&quot;badge&quot;&amp;gt;0&amp;lt;/span&amp;gt;all&amp;lt;/li&amp;gt;&#39;  
        $(&quot;#userlist&quot;).append(text)  
              
        for(var x in data){       
            //console.log(x)  
            count++;  
            var name=x;  
            var self = x.substr(2)  
            //生成用户列表  
            if(self!=socket.id){  
                var text=&#39;&amp;lt;li class=&quot;list-group-item&quot; value=&quot;&#39;+name+&#39;&quot;&amp;gt;&amp;lt;span id=&quot;badge_&#39;+self+&#39;&quot; class=&quot;badge&quot;&amp;gt;0&amp;lt;/span&amp;gt;&#39;+name+&#39;&amp;lt;/li&amp;gt;&#39;  
                $(&quot;#userlist&quot;).append(text)  
            }  
            if($(&quot;#text_&quot;+self).length==0){  
              var panel=&#39;&amp;lt;div class=&quot;panel-body&quot; id=&quot;text_&#39;+self+&#39;&quot; style=&quot;height:500px; overflow:auto&quot;&amp;gt;&amp;lt;div class=&quot;well well-sm&quot;&amp;gt;和&#39;+self+&#39;私聊中心&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&#39;  
                $(&#39;.panel&#39;).append(panel);  
            }         
        }  
        //$(&quot;.panel-body&quot;).hide();  
        //$(&quot;#text_all&quot;).show();  
        $(&quot;#count&quot;).html(&quot;在线人数：&quot;+count);      
    })  
    //来接受消息  
    socket.on(&#39;message&#39;,function(name,data){  
        //console.log(data);  
        //console.log(name)  
        //当前时间  
        var myDate=new Date()  
        var data_text=&#39;&amp;lt;div class=&quot;well well-sm&quot;&amp;gt;&#39;+myDate.toLocaleString()+&quot;:&quot;+data+&#39;&amp;lt;/div&amp;gt;&#39;  
        $(&quot;#text_&quot;+name).append(data_text)  
        //未读消息数+1         
        var val=$(&#39;#badge_&#39;+name).html()  
        //console.log(val)  
        $(&#39;#badge_&#39;+name).html(parseInt(val)+1)           
        //消息滚动到底部  
        $(&quot;#text_&quot;+name).scrollTop(99999999);   
    })  
  });  
  
  //消息发送  
  function send(){  
     var content= $(&quot;#content&quot;).val();  
     //console.log(content.length)  
     var length=content.length  
     if(length==0){  
         alert(&quot;不能为空&quot;)  
         return false;  
     }else if(length&amp;gt;20){  
         alert(&quot;消息太长了&quot;)  
         return false;  
     }  
     var user= $(&quot;#friend&quot;).attr(&#39;value&#39;);  
     //console.log(content);  
     //console.log(user);  
     socket.emit(&quot;per2per&quot;,socket.id,{user:user,content:content});  
  }  
  //点击用户列表  
  $(document).on(&quot;click&quot;,&quot;.list-group-item&quot;,function(){  
      $(&#39;.list-group-item&#39;).css(&#39;background-color&#39;,&#39;white&#39;)  
      $(&#39;.list-group-item&#39;).css(&#39;color&#39;,&#39;black&#39;)  
      $(this).css(&#39;background-color&#39;,&#39;green&#39;)  
      $(this).css(&#39;color&#39;,&#39;white&#39;)  
      var val= $(this).attr(&#39;value&#39;);  
      $(&quot;#friend&quot;).attr(&#39;value&#39;,val)  
      $(&quot;#friend&quot;).html(val)  
      
        if(val!=&#39;all&#39;){  
           val = val.substr(2)  
        }  
      $(&quot;.panel-body&quot;).hide();  
      $(&quot;#text_&quot;+val).show();       
  })  
    
  
&amp;lt;/script&amp;gt;  
&amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title> excel的导入导出  </title>
   <link href="http://127.0.0.1/php/2010/02/03/excel/"/>
   <updated>2010-02-03T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2010/02/03/excel</id>
   <content type="html">&lt;p&gt;导入&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function excel_put(){  
    //先做一个文件上传，保存文件  
    $path=$_FILES[&#39;file&#39;];  
    $filePath = &quot;uploads/&quot;.$path[&quot;name&quot;];  
    move_uploaded_file($path[&quot;tmp_name&quot;],$filePath);  
    //默认用excel2007读取excel，若格式不对，则用之前的版本进行读取  
    //表格字段名字  
    $data=array(&#39;B&#39;=&amp;gt;&#39;name&#39;,&#39;C&#39;=&amp;gt;&#39;pwd&#39;,&#39;D&#39;=&amp;gt;&#39;money1&#39;,&#39;E&#39;=&amp;gt;&#39;salt&#39;);  
    $tablename=&#39;user1&#39;;//表名字  
    $this-&amp;gt;excel_fileput($filePath,$data,$tablename);      
}  
private function excel_fileput($filePath,$data,$tablename){  
    $this-&amp;gt;load-&amp;gt;library(&quot;phpexcel&quot;);//ci框架中引入excel类  
    $PHPExcel = new PHPExcel();  
    $PHPReader = new PHPExcel_Reader_Excel2007();  
    if(!$PHPReader-&amp;gt;canRead($filePath)){  
        $PHPReader = new PHPExcel_Reader_Excel5();  
        if(!$PHPReader-&amp;gt;canRead($filePath)){  
            echo &#39;no Excel&#39;;  
            return ;  
        }  
    }  
    // 加载excel文件  
    $PHPExcel = $PHPReader-&amp;gt;load($filePath);  
  
    // 读取excel文件中的第一个工作表  
    $currentSheet = $PHPExcel-&amp;gt;getSheet(0);  
    // 取得最大的列号  
    $allColumn = $currentSheet-&amp;gt;getHighestColumn();  
    // 取得一共有多少行  
    $allRow = $currentSheet-&amp;gt;getHighestRow();  
  
    // 从第二行开始输出，因为excel表中第一行为列名  
    for($currentRow = 2;$currentRow &amp;lt;= $allRow;$currentRow++){  
        /**从第A列开始输出*/  
        //echo $allColumn;  
          
        for($currentColumn= &#39;A&#39;;$currentColumn&amp;lt;= $allColumn; $currentColumn++){    
            $val = $currentSheet-&amp;gt;getCellByColumnAndRow(ord($currentColumn) - 65,$currentRow)-&amp;gt;getValue();  
            //print_r($val);  
            //die;  
              
            if($currentColumn == &#39;A&#39;)  
            {  
                //echo $val.&quot;\t&quot;;  
            }else if($currentColumn &amp;lt;= $allColumn){  
                $data1[$currentColumn]=$val;  
            }  
        }  
        foreach($data as $key=&amp;gt;$val){  
            $data2[$val]=$data1[$key];  
        }  
        $this-&amp;gt;db-&amp;gt;insert($tablename,$data2);  
        //print_r($data2);  
        //echo &quot;&amp;lt;/br&amp;gt;&quot;;         
    }  
    //echo &quot;\n&quot;;  
    echo &quot;导入成功&quot;;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出
[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;header(&quot;Content-type:application/vnd.ms-excel&quot;);  
header(&quot;Content-Disposition:attachment;filename=123.xls&quot;);  
  
$array=$this-&amp;gt;db-&amp;gt;get(&quot;shop_address&quot;)-&amp;gt;result_array();  
$str = &quot;Id\tName\tPid\n&quot;;  
foreach ($array as $val) {  
    $str .=  $val[&#39;id&#39;] . &quot;\t&quot; .$val[&#39;name&#39;] . &quot;\t&quot; . $val[&#39;pid&#39;] . &quot;\n&quot;;  
}  
echo $str;    
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title> input标签file类型，选择多个文件进行上传 </title>
   <link href="http://127.0.0.1/html5/2009/01/27/html/"/>
   <updated>2009-01-27T06:14:54+08:00</updated>
   <id>http://127.0.0.1/html5/2009/01/27/html</id>
   <content type="html">&lt;p&gt;html页面&lt;/p&gt;

&lt;p&gt;[html] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html&amp;gt;  
    &amp;lt;head&amp;gt;  
        &amp;lt;meta charset=&quot;UTF-8&quot;/&amp;gt;  
        &amp;lt;title&amp;gt;xhr2&amp;lt;/title&amp;gt;  
    &amp;lt;/head&amp;gt;  
    &amp;lt;body&amp;gt;      
        &amp;lt;div style=&quot;text-align:center;margin:100px&quot;&amp;gt;        
            &amp;lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;file&quot; multiple=&quot;multiple&quot;&amp;gt;&amp;lt;progress id=&quot;uploadprogress&quot; min=&quot;0&quot; max=&quot;100&quot; value=&quot;0&quot;&amp;gt;0&amp;lt;/progress&amp;gt;  
            &amp;lt;button onclick=&quot;xhr2()&quot;&amp;gt;多文件上传&amp;lt;/button&amp;gt;  
        &amp;lt;/div&amp;gt;          
        &amp;lt;script&amp;gt;  
        function xhr2(){  
            var xhr = new XMLHttpRequest();//第一步  
            //定义表单变量  
            var file = document.getElementById(&#39;file&#39;).files;  
            //console.log(file.length);  
            //新建一个FormData对象  
            var formData = new FormData(); //++++++++++  
            //追加文件数据  
            for(i=0;i&amp;lt;file.length;i++){    
                 formData.append(&quot;file[&quot;+i+&quot;]&quot;, file[i]); //++++++++++  
            }   
            //formData.append(&quot;file&quot;, file[0]); //++++++++++  
              
            //post方式  
            xhr.open(&#39;POST&#39;, &#39;xhr2.php&#39;); //第二步骤  
                        xhr.upload.onprogress = function (event) {  
            　　if (event.lengthComputable) {  
            　　　　var complete = (event.loaded / event.total * 100 | 0);  
        　　　　　　     var progress = document.getElementById(&#39;uploadprogress&#39;);  
            　　　　progress.value = progress.innerHTML = complete;  
            　　}  
            };  
            //发送请求  
            xhr.send(formData);  //第三步骤  
            //ajax返回  
            xhr.onreadystatechange = function(){ //第四步  
        　　　　if ( xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200 ) {  
        　　　　　　console.log( xhr.responseText );  
        　　　　}  
        　　};  
            //设置超时时间  
            xhr.timeout = 100000;  
            xhr.ontimeout = function(event){  
        　　　　alert(&#39;请求超时！&#39;);  
        　　}   
        }  
        &amp;lt;/script&amp;gt;  
    &amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php处理页面&lt;/p&gt;

&lt;p&gt;[php] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
print_r($_FILES[&quot;file&quot;]);  
  
for($i=0;$i&amp;lt;count($_FILES[&quot;file&quot;][&#39;name&#39;]);$i++){  
$name=$_FILES[&quot;file&quot;][&quot;name&quot;][$i];  
move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;][$i],iconv(&quot;UTF-8&quot;,&quot;gb2312&quot;,$name));  
}  
  
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> centos之lamp </title>
   <link href="http://127.0.0.1/centos/2009/01/26/lamp/"/>
   <updated>2009-01-26T06:14:54+08:00</updated>
   <id>http://127.0.0.1/centos/2009/01/26/lamp</id>
   <content type="html">&lt;p&gt;一、配置防火墙&lt;/p&gt;

&lt;p&gt;CentOS 7.0默认使用的是firewall作为防火墙。&lt;/p&gt;

&lt;p&gt;1、关闭firewall：&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop firewalld.service #停止firewall  
systemctl disable firewalld.service #禁止firewall开机启动  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、关闭SELINUX&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/selinux/config  
#SELINUX=enforcing #注释掉  
SELINUX=disabled #增加  
:wq! #保存退出  
setenforce 0 #使配置立即生效  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.安装apache&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install httpd #根据提示，输入Y安装即可成功安装  
systemctl start httpd.service #启动apache  
systemctl stop httpd.service #停止apache  
systemctl restart httpd.service #重启apache  
systemctl enable httpd.service #设置apache开机启动  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.安装mariadb（mysql）&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install mariadb mariadb-server #询问是否要安装，输入Y即可自动安装,直到安装完成  
systemctl start mariadb.service #启动MariaDB  
systemctl stop mariadb.service #停止MariaDB  
systemctl restart mariadb.service #重启MariaDB  
systemctl enable mariadb.service #设置开机启动  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;修改mysql密码：set password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;root&#39;);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql授权远程连接（navicat等）： grant all on *.* to root identified by &#39;root&#39;;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、安装PHP以及组件，使PHP支持 MariaDB&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install php php-mysql php-gd libjpeg* php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash  
#这里选择以上安装包进行安装，根据提示输入Y回车  
systemctl restart mariadb.service #重启MariaDB  
systemctl restart httpd.service #重启apache  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试篇
```php
cd /var/www/html&lt;/p&gt;

&lt;p&gt;vi index.php #输入下面内容&lt;/p&gt;

&lt;?php

phpinfo();

?&gt;

&lt;p&gt;:wq! #保存退出
```
在客户端浏览器输入服务器IP地址，可以看到如下图所示相关的配置信息！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title> centos之lnmp </title>
   <link href="http://127.0.0.1/centos/2009/01/25/lnmp/"/>
   <updated>2009-01-25T06:14:54+08:00</updated>
   <id>http://127.0.0.1/centos/2009/01/25/lnmp</id>
   <content type="html">&lt;p&gt;1.安装nginx&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install yum-priorities -y  
wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm  
rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm  
yum install nginx  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start nginx.service #启动nginx  
systemctl stop nginx.service #停止  
systemctl restart nginx.service #重启  
systemctl enable nginx.service #设置开机启动   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.更改nginx端口号（根据自己需求）&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/nginx/conf.d/  
vim default.conf  
把listen 80改成listen 81  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl restart nginx.service #重启nginx  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.访问http://ip:81即可看到nginx首页&lt;/p&gt;

&lt;p&gt;4.下一步安装php-fpm
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install php-fpm  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start php-fpm.service #启动php-fpm  
systemctl enable php-fpm.service #设置开机启动  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.更改nginx配置文件识别php&lt;/p&gt;

&lt;p&gt;vi /etc/nginx/conf.d/default.conf，把之前的#给去掉就可以了，顺手改一下fastcgi_param&lt;/p&gt;

&lt;p&gt;[python] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ \.php$ {  
    root           html;  
    fastcgi_pass   127.0.0.1:9000;  
    fastcgi_index  index.php;  
    fastcgi_param  SCRIPT_FILENAME  /usr/share/nginx/html/$fastcgi_script_name;  
    include        fastcgi_params;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.&lt;/p&gt;

&lt;p&gt;在 /usr/share/nginx/html中新建一个test.PHP  &lt;?php echo 123;?&gt;&lt;/p&gt;

&lt;p&gt;访问http://ip:81/test.php即可看到php页面&lt;/p&gt;

&lt;p&gt;7.负载配置&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream site{  
        server 172.16.170.138;  
        server 172.16.170.139;  
}  
server {  
    listen       80;  
    server_name  localhost;  
  
    #charset koi8-r;  
    #access_log  /var/log/nginx/log/host.access.log  main;  
  
    location / {  
        root   /usr/share/nginx/html;  
        index  index.html index.htm;  
        proxy_pass http://site;  
    }  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>mysql 主从复制配置 </title>
   <link href="http://127.0.0.1/mysql/2009/01/24/mysql/"/>
   <updated>2009-01-24T06:14:54+08:00</updated>
   <id>http://127.0.0.1/mysql/2009/01/24/mysql</id>
   <content type="html">&lt;p&gt;主从复制配置&lt;/p&gt;

&lt;p&gt;步骤如下：&lt;/p&gt;

&lt;p&gt;主服务器：从服务器ip地址分别为
[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192.168.145.222、192.168.145.226  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1、修改主服务器master:&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/my.cnf  
[mysqld]  
    log-bin=mysql-bin   #[必须]启用二进制日志  
    server-id=222      #[必须]服务器唯一ID，默认是1，一般取IP最后一段  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、修改从服务器slave:&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi /etc/my.cnf  
[mysqld]  
     log-bin=mysql-bin   #[不是必须]启用二进制日志  
     server-id=226      #[必须]服务器唯一ID，默认是1，一般取IP最后一段  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3、重启两台服务器的MySQL&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl restart mariadb  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4、在主服务器上建立帐户并授权slave:&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql  
mysql&amp;gt;GRANT REPLICATION SLAVE ON *.* to &#39;mysync&#39;@&#39;%&#39; identified by &#39;q123456&#39;; //一般不用root帐号，“%”表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.145.226，加强安全。  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、登录主服务器的mysql，查询master的状态&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;show master status;  
 +------------------+----------+--------------+------------------+  
 | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |  
 +------------------+----------+--------------+------------------+  
 | mysql-bin.000004 |      308 |              |                  |  
 +------------------+----------+--------------+------------------+  
 1 row in set (0.00 sec)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化&lt;/p&gt;

&lt;p&gt;6、配置从服务器Slave：&lt;/p&gt;

&lt;p&gt;注意mysql-bin.000004和308是第五步中的File和Position&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;change master to master_host=&#39;192.168.145.222&#39;,master_user=&#39;mysync&#39;,master_password=&#39;q123456&#39;,master_log_file=&#39;mysql-bin.000004&#39;,master_log_pos=308; //注意mysql-bin.000004和308是第五步中的File和  
mysql&amp;gt;start slave; //启动从服务器复制功能  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7、检查从服务器复制功能状态：&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show slave status\G  
************************** 1. row ***************************  
  
            Slave_IO_State: Waiting for master to send event  
            Master_Host: 192.168.2.222  //主服务器地址  
            Master_User: mysync   //授权帐户名，尽量避免使用root  
            Master_Port: 3306    //数据库端口，部分版本没有此行  
            Connect_Retry: 60  
            Master_Log_File: mysql-bin.000004  
            Read_Master_Log_Pos: 600     //#同步读取二进制日志的位置，大于等于Exec_Master_Log_Pos  
            Relay_Log_File: ddte-relay-bin.000003  
            Relay_Log_Pos: 251  
            Relay_Master_Log_File: mysql-bin.000004  
            Slave_IO_Running: Yes    //此状态必须YES  
            Slave_SQL_Running: Yes     //此状态必须YES  
                  ......  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：Slave_IO及Slave_SQL进程必须正常运行，即YES状态，否则都是错误的状态(如：其中一个NO均属错误)。&lt;/p&gt;

&lt;p&gt;以上操作过程，主从服务器配置完成。&lt;/p&gt;

&lt;p&gt;9、主从服务器测试：&lt;/p&gt;

&lt;p&gt;主服务器Mysql，建立数据库，并在这个库中建表插入一条数据：&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database hi_db;  
  Query OK, 1 row affected (0.00 sec)  
  
  mysql&amp;gt; use hi_db;  
  Database changed  
  
  mysql&amp;gt;  create table hi_tb(id int(3),name char(10));  
  Query OK, 0 rows affected (0.00 sec)  
   
  mysql&amp;gt; insert into hi_tb values(001,&#39;bobu&#39;);  
  Query OK, 1 row affected (0.00 sec)  
  
  mysql&amp;gt; show databases;  
   +--------------------+  
   | Database           |  
   +--------------------+  
   | information_schema |  
   | hi_db                |  
   | mysql                |  
   | test                 |  
   +--------------------+  
   4 rows in set (0.00 sec)  
  
从服务器Mysql查询：  
  
   mysql&amp;gt; show databases;  
  
   +--------------------+  
   | Database               |  
   +--------------------+  
   | information_schema |  
   | hi_db                 |       //I&#39;M here，大家看到了吧  
   | mysql                 |  
   | test          |  
  
   +--------------------+  
   4 rows in set (0.00 sec)  
  
   mysql&amp;gt; use hi_db  
   Database changed  
   mysql&amp;gt; select * from hi_tb;           //查看主服务器上新增的具体数据  
   +------+------+  
   | id   | name |  
   +------+------+  
   |    1 | bobu |  
   +------+------+  
   1 row in set (0.00 sec)  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>mysql忘记密码怎么办</title>
   <link href="http://127.0.0.1/mysql/2009/01/23/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/"/>
   <updated>2009-01-23T06:14:54+08:00</updated>
   <id>http://127.0.0.1/mysql/2009/01/23/mysql忘记密码</id>
   <content type="html">&lt;p&gt;方法：
可以进行如下的步骤重新设置MySQL的root密码：&lt;/p&gt;

&lt;p&gt;1．首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。 因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的 状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对 外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全 状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。&lt;/p&gt;

&lt;p&gt;2．修改MySQL的登录设置：&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/my.cnf   
在[mysqld]的段中加上一句：skip-grant-tables   
保存并且退出vi。   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3．重新启动mysql&lt;/p&gt;

&lt;p&gt;4．登录并修改MySQL的root密码 
[plain]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mysql   
Welcome to the MySQL monitor. Commands end with ; or \g.   
Your MySQL connection id is 3 to server version: 3.23.56   
Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the buffer.   
mysql&amp;gt; USE mysql ;   
Reading table information for completion of table and column names   
You can turn off this feature to get a quicker startup with -A   
Database changed   
mysql&amp;gt; UPDATE user SET Password = password ( ‘new-password’ ) WHERE User = ‘root’ ;   
Query OK, 0 rows affected (0.00 sec)   
Rows matched: 2 Changed: 0 Warnings: 0   
mysql&amp;gt; flush privileges ;   
Query OK, 0 rows affected (0.01 sec)   
mysql&amp;gt; quit   
Bye   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5．将MySQL的登录设置修改回来 
[plain]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# vi /etc/my.cnf   
将刚才在[mysqld]的段中加上的skip-grant-tables删除   
保存并且退出vi。   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6．重新启动mysqld&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>session入mysql </title>
   <link href="http://127.0.0.1/session/2009/01/22/session%E5%85%A5mysql/"/>
   <updated>2009-01-22T06:14:54+08:00</updated>
   <id>http://127.0.0.1/session/2009/01/22/session入mysql</id>
   <content type="html">&lt;p&gt;```php
    &amp;lt;?php&lt;br /&gt;
    ini_set(“session.save_handler”,”user”);  &lt;br /&gt;
    //session.gc_probability = 1 分子  &lt;br /&gt;
    ini_set(“session.gc_probability”,1);  &lt;br /&gt;
    //session.gc_divisor = 1000 分母  &lt;br /&gt;
    ini_set(“session.gc_divisor”,2);  &lt;br /&gt;
    //session.gc_maxlifetime = 1440 垃圾回收时间，session有效期  &lt;br /&gt;
    session_set_save_handler( “open”,”close”,”read”,”write”,”destroy”,”gc” );&lt;br /&gt;
    //连接数据库  &lt;br /&gt;
    function open(){  &lt;br /&gt;
        @$link = mysql_connect(‘127.0.0.1’, ‘root’, ‘root’);  &lt;br /&gt;
        mysql_query(‘set names utf8’);  &lt;br /&gt;
        mysql_query(‘use wangbin’);  &lt;br /&gt;
    }  &lt;br /&gt;
    function close(){  &lt;br /&gt;
        mysql_close();  &lt;br /&gt;
    }  &lt;br /&gt;
    function read($sess_id){  &lt;br /&gt;
        $sql = “select session_data from &lt;code&gt;session&lt;/code&gt; where session_id = ‘$sess_id’”;  &lt;br /&gt;
        $result = mysql_query($sql);  &lt;br /&gt;
        if($rows = mysql_fetch_assoc($result)){&lt;br /&gt;
            return $rows[‘session_data’]; }&lt;br /&gt;
        else{&lt;br /&gt;
            return ‘’;&lt;br /&gt;
        }  &lt;br /&gt;
    }  &lt;br /&gt;
    function write($sess_id,$sess_data){  &lt;br /&gt;
        $sql = “insert into &lt;code&gt;session&lt;/code&gt; (session_id,session_data,session_time) values(‘$sess_id’,’$sess_data’, now()) on duplicate key update session_data = ‘$sess_data’ , session_time = now()”;  //这是为了gc()  &lt;br /&gt;
        return mysql_query($sql);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}    
function destroy($sess_id){    
    echo __FUNCTION__;    
    $sql = &quot;delete from `session` where session_id = &#39;$sess_id&#39;&quot;;    
    return mysql_query($sql);    
    
}    
function gc($sess_id){    
    $maxlifetime = ini_set(&quot;session.gc_maxlifetime&quot;);    
    echo __FUNCTION__;    
    $sql = &quot;delete from `session` where now()-session_time &amp;gt; &#39;$maxlifetime&#39; &quot;;    
    return mysql_query($sql);    
}    
header(&quot;content-type:text/html;charset=utf8&quot;);    
session_start();    
$_SESSION[&#39;name&#39;]=&#39;aa&#39;;    
//echo session_id();    
echo $_SESSION[&#39;name&#39;];    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>session入redis</title>
   <link href="http://127.0.0.1/session/2009/01/21/session%E5%85%A5redis/"/>
   <updated>2009-01-21T06:14:54+08:00</updated>
   <id>http://127.0.0.1/session/2009/01/21/session入redis</id>
   <content type="html">&lt;p&gt;Session信息入Redis&lt;/p&gt;

&lt;p&gt;为什么要把SESSION保存在缓存&lt;/p&gt;

&lt;p&gt;就PHP来说，语言本身支持的session是以文件的方式保存到磁盘文件中，保存在指定的文件夹中，保存的路径可以在配置文件中设置或者在程序中使用函数session_save_path()进行设置，但是这么做有弊端，&lt;/p&gt;

&lt;p&gt;第一就是保存到文件系统中，效率低，只要有用到session就会从好多个文件中查找指定的sessionid，效率很低。&lt;/p&gt;

&lt;p&gt;第二就是当用到多台服务器的时候可能会出现，session丢失问题（其实是保存在了其他服务器上）。&lt;/p&gt;

&lt;p&gt;当然了，保存在缓存中可以解决上面的问题，如果使用php本身的session函数，可以使用 session_set_save_handler()函数很方便的对session的处理过程进行重新控制。如果不用php的session系列函数， 可以自己编写个类似的session函数，也是可以的，我现在做的这个项目就是这样，会根据用户的mid、登录时间进行求hash作为 sessionId，每次请求的时候都必须加上sessionId才算合法（第一次登录的时候是不需要的，这个时候会创建sessionId，返回给客户 端），这么做也很方便、简洁高效的。当然了，我这篇文章主要说的是在php自身的SESSION中”做做手脚”。&lt;/p&gt;

&lt;p&gt;SESSION保存在缓存中&lt;/p&gt;

&lt;p&gt;php将缓存保存到redis中，可以使用配置文件，对session的处理和保存做修改，当然了，在程序中使用ini_set()函数去修改也可以，这个很方便测试，我这里就使用这种方式，当然了，要是生产环境还是建议使用配置文件。&lt;/p&gt;

&lt;p&gt;如果想简单操作session入redis操作可以将一下代码运行一下
```php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;ini_set(“session.save_handler”, “redis”);&lt;/p&gt;

&lt;p&gt;ini_set(“session.save_path”, “tcp://localhost:6379”);&lt;/p&gt;

&lt;p&gt;session_start();&lt;/p&gt;

&lt;p&gt;header(“Content-type:text/html;charset=utf-8”);&lt;/p&gt;

&lt;p&gt;$_SESSION[‘view’] = ‘zhangsan’;&lt;/p&gt;

&lt;p&gt;echo $_SESSION[‘view’];&lt;/p&gt;

&lt;p&gt;```
这里设置session.save_handler方式为redis，session.save_path为redis的地址和端口，设置之后刷新，再回头查看redis，会发现redis中的生成了sessionId，sessionId和浏览器请求的是一样的，&lt;/p&gt;

&lt;p&gt;如果是memcache
```php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;ini_set(“session.save_handler”, “memcache”);&lt;/p&gt;

&lt;p&gt;ini_set(“session.save_path”, “tcp://localhost:11211”);&lt;/p&gt;

&lt;p&gt;session_start();&lt;/p&gt;

&lt;p&gt;header(“Content-type:text/html;charset=utf-8”);&lt;/p&gt;

&lt;p&gt;$_SESSION[‘view’] = ‘zhangsan’;&lt;/p&gt;

&lt;p&gt;echo $_SESSION[‘view’];&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
也可以使用
&lt;/code&gt;php&lt;/p&gt;

&lt;p&gt;Session_set_save_handler(‘open’,’close’,’ read’,’ write’,’ destory’,’ gc’);
&lt;code&gt;
用法如下自定义一个Redis_session类
&lt;/code&gt;php
&amp;lt;?php&lt;/p&gt;

&lt;p&gt;class RedisSession{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private $_redis = array(

    &#39;handler&#39; =&amp;gt; null, //数据库连接句柄

    &#39;host&#39; =&amp;gt; null,   //redis端口号

    &#39;port&#39; =&amp;gt; null,

);

public function __construct($array = array()){

    isset($array[&#39;host&#39;])?$array[&#39;host&#39;]:&quot;false&quot;;

    isset($array[&#39;port&#39;])?$array[&#39;host&#39;]:&quot;false&quot;;

    $this-&amp;gt;_redis = array_merge($this-&amp;gt;_redis, $array);

}

public function begin(){

    //设置session处理函数

    session_set_save_handler(

        array($this, &#39;open&#39;),

        array($this, &#39;close&#39;),

        array($this, &#39;read&#39;),

        array($this, &#39;write&#39;),

        array($this, &#39;destory&#39;),

        array($this, &#39;gc&#39;)

    );

}

public function open(){

    $redis = new Redis();

    $redis-&amp;gt;connect($this-&amp;gt;_redis[&#39;host&#39;], $this-&amp;gt;_redis[&#39;port&#39;]);

    if(!$redis){

        return false;

    }

 

    $this-&amp;gt;_redis[&#39;handler&#39;] = $redis;

    $this-&amp;gt;gc(null);

    return true;

}

//关

public function close(){

    return $this-&amp;gt;_redis[&#39;handler&#39;]-&amp;gt;close();

}

//读

public function read($session_id){

    return $this-&amp;gt;_redis[&#39;handler&#39;]-&amp;gt;get($session_id);

}

//写

public function write($sessionId, $sessionData){

    return $this-&amp;gt;_redis[&#39;handler&#39;]-&amp;gt;set($sessionId, $sessionData);

}

public function destory($sessionId){

    return $this-&amp;gt;_redis[&#39;handler&#39;]-&amp;gt;delete($sessionId) &amp;gt;= 1 ? true : false;

}

public function gc(){

    //获取所有sessionid，让过期的释放掉

    $this-&amp;gt;_redis[&#39;handler&#39;]-&amp;gt;keys(&quot;*&quot;);

    return true;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;$ses = new RedisSession(array(‘host’=&amp;gt;’127.0.0.1’,’port’=&amp;gt;’6379’));&lt;/p&gt;

&lt;p&gt;$ses-&amp;gt;begin();&lt;/p&gt;

&lt;p&gt;session_start();&lt;/p&gt;

&lt;p&gt;$_SESSION[‘name’]=’zhangsan’;&lt;/p&gt;

&lt;p&gt;echo $_SESSION[‘name’];&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;这样就可以实现session数据如redis代码执行过程中必须安装redis才可以&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>git 远程版本库，github提供服务原理，git自动更新发送邮件 </title>
   <link href="http://127.0.0.1/git/2009/01/20/git/"/>
   <updated>2009-01-20T06:14:54+08:00</updated>
   <id>http://127.0.0.1/git/2009/01/20/git</id>
   <content type="html">&lt;p&gt;1.安装好Linux，安装好Git（192.168.1.239）&lt;/p&gt;

&lt;p&gt;2.创建一个用户zph（让此用户提供git on server），密码设置为12345678&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# useradd zph  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# passwd zph  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.切换到zph用户&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# su zph  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.创建一个远程仓库&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init --bare sample.git  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.在windows下（192.168.1.5），打开git bash&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone zph@192.168.1.239:/home/zph/sample.git  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;终端会让输入密码，此时输入zph用户的密码即（12345678）&lt;/p&gt;

&lt;p&gt;6.为了让用户，不用每次都输入密码，在linux生成.ssh目录&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7.进入.ssh,新建一个authorized_keys文件&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /home/zph/.ssh/  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi authorized_keys  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8.打开windows中当前用户的.ssh/id_rsa.pub,复制里面的内容，粘贴到第7步中的authorized_keys中&lt;/p&gt;

&lt;p&gt;9.更改authorized_keys文件的权限&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$chmod 600 authorized_keys  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10.验证authorized_keys有没有生效，打开windows&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh zph@192.168.1.239  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不需要输入密码，代表生效了&lt;/p&gt;

&lt;p&gt;11.重复第5步，已经不需要输入密码了&lt;/p&gt;

&lt;p&gt;12.代码自动更新
&lt;code&gt;php
cp /home/zph/sample.git/hooks/post-update.sample /home/zph/sample.git/hooks/post-update
&lt;/code&gt;
13.打开post-update，先清空内容，然后进行编辑如下
```php
#!/bin/bash&lt;/p&gt;

&lt;h1 id=&quot;httpblogcsdnnetzph1234articledetails50509885&quot;&gt;如果想要发送邮件则开启下面两行，关于发送邮件请访问 http://blog.csdn.NET/zph1234/article/details/50509885&lt;/h1&gt;

&lt;h1 id=&quot;vargit-show&quot;&gt;var=&lt;code&gt;git show&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;#PHP /var/www/html/mail.php “$var”&lt;/p&gt;

&lt;p&gt;cd /usr/share/nginx/html/sample
unset GIT_DIR&lt;/p&gt;

&lt;p&gt;git checkout master
git pull
&lt;code&gt;
14.出于安全考虑,只让克隆提交版本库，不让登陆终端
&lt;/code&gt;php
$ which git-shell
/usr/bin/git-shell&lt;/p&gt;

&lt;p&gt;vi /etc/passwd&lt;/p&gt;

&lt;p&gt;ph:x:1000:1000:zhangpenghui:/home/zph:/usr/bin/git-shell&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript实现拖拽预览，AJAX小文件上传</title>
   <link href="http://127.0.0.1/javascript/2009/01/19/js/"/>
   <updated>2009-01-19T06:14:54+08:00</updated>
   <id>http://127.0.0.1/javascript/2009/01/19/js</id>
   <content type="html">&lt;p&gt;本地上传，提前预览（图片，视频）&lt;/p&gt;

&lt;p&gt;1.html中div标签预览显示，button标签触发上传事件。&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div  id=&quot;drop_area&quot; style=&quot;border:3px dashed silver;width:200px; height:200px&quot;&amp;gt;将图片拖拽到此&amp;lt;/div&amp;gt;  
&amp;lt;button onclick=&quot;xhr2()&quot;&amp;gt;ajax上传&amp;lt;/button&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.禁止浏览器打开文件行为&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.addEventListener(&quot;drop&quot;,function(e){  //拖离   
    e.preventDefault();      
})  
document.addEventListener(&quot;dragleave&quot;,function(e){  //拖后放   
    e.preventDefault();      
})  
document.addEventListener(&quot;dragenter&quot;,function(e){  //拖进  
    e.preventDefault();      
})  
document.addEventListener(&quot;dragover&quot;,function(e){  //拖来拖去    
    e.preventDefault();      
})  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.拖拽,预览文件&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var box = document.getElementById(&#39;drop_area&#39;); //拖拽区域     
box.addEventListener(&quot;drop&quot;,function(e){           
    var fileList = e.dataTransfer.files; //获取文件对象    
    //检测是否是拖拽文件到页面的操作            
    if(fileList.length == 0){                
        return false;            
    }             
    //拖拉图片到浏览器，可以实现预览功能    
    //规定视频格式  
    Array.prototype.S=String.fromCharCode(2);  
    Array.prototype.in_array=function(e){  
        var r=new RegExp(this.S+e+this.S);  
        return (r.test(this.S+this.join(this.S)+this.S));  
    };  
    var video_type=[&quot;video/mp4&quot;,&quot;video/ogg&quot;];  
      
    //创建一个url连接,供src属性引用  
    var fileurl = window.URL.createObjectURL(fileList[0]);                
    if(fileList[0].type.indexOf(&#39;image&#39;) === 0){  //如果是图片  
        var str=&quot;&amp;lt;img width=&#39;200px&#39; height=&#39;200px&#39; src=&#39;&quot;+fileurl+&quot;&#39;&amp;gt;&quot;;  
        document.getElementById(&#39;drop_area&#39;).innerHTML=str;                   
    }else if(video_type.in_array(fileList[0].type)){   //如果是规定格式内的视频                    
        var str=&quot;&amp;lt;video width=&#39;200px&#39; height=&#39;200px&#39; controls=&#39;controls&#39; src=&#39;&quot;+fileurl+&quot;&#39;&amp;gt;&amp;lt;/video&amp;gt;&quot;;  
        document.getElementById(&#39;drop_area&#39;).innerHTML=str;        
    }else{ //其他格式，输出文件名  
        //alert(&quot;不预览&quot;);  
        var str=&quot;文件名字:&quot;+fileList[0].name;  
        document.getElementById(&#39;drop_area&#39;).innerHTML=str;      
    }         
    resultfile = fileList[0];             
},false);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.ajax上传&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function xhr2(){  
    var xhr = new XMLHttpRequest();//第一步  
    //新建一个FormData对象  
    var formData = new FormData(); //++++++++++  
    //追加文件数据  
    formData.append(&#39;file&#39;, resultfile);  
    //post方式  
    xhr.open(&#39;POST&#39;, &#39;xhr2.php&#39;); //第二步骤  
    //发送请求  
    xhr.send(formData);  //第三步骤  
    //ajax返回  
    xhr.onreadystatechange = function(){ //第四步  
　　　　if ( xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200 ) {  
　　　　　　console.log( xhr.responseText );        
　　　　}  
　　};  
    //设置超时时间  
    xhr.timeout = 10000;  
    xhr.ontimeout = function(event){  
　　　　alert(&#39;请求超时！&#39;);  
　　}           
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.php保存文件&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
    print_r($_FILES[&quot;file&quot;]);  
    $name = $_FILES[&quot;file&quot;][&quot;name&quot;]; //中文可能乱码使用iconv函数  
    move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],iconv(&quot;UTF-8&quot;,&quot;gb2312&quot;,$name));  
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>php发送邮件email</title>
   <link href="http://127.0.0.1/php/2009/01/18/email/"/>
   <updated>2009-01-18T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2009/01/18/email</id>
   <content type="html">&lt;p&gt;1.phpmailer,很好用，无论原生还是放到框架下，都没问题，phpmailer下载地址 https://github.com/PHPMailer/PHPMailer&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
header(&quot;content-type:text/html;charset=utf-8&quot;);  
include(&quot;class.phpmailer.php&quot;);  
include(&quot;class.smtp.php&quot;);  
$mail = new PHPMailer();   
$mail-&amp;gt;IsSMTP(); // send via SMTP   
$mail-&amp;gt;Host = &quot;smtp.163.com&quot;; // SMTP servers   
$mail-&amp;gt;SMTPAuth = true; // turn on SMTP authentication   
$mail-&amp;gt;Username = &quot;*********&quot;; // SMTP username 注意：普通邮件认证不需要加 @域名   
$mail-&amp;gt;Password = &quot;*****&quot;; // SMTP password   
$mail-&amp;gt;From = &quot;******@163.com&quot;; // 发件人邮箱   
$mail-&amp;gt;FromName = &quot;zph&quot;; // 发件人   
$mail-&amp;gt;CharSet = &quot;utf-8&quot;; // 这里指定字符集！   
$mail-&amp;gt;Encoding = &quot;base64&quot;;   
$mail-&amp;gt;AddAddress(&quot;******@163.com&quot;,&quot;toyou&quot;); // 收件人邮箱和姓名   
$mail-&amp;gt;AddReplyTo(&quot;******@163.com&quot;,&quot;wo&quot;);   
//$mail-&amp;gt;WordWrap = 50; // set word wrap 换行字数   
//$mail-&amp;gt;AddAttachment(&quot;/var/tmp/file.tar.gz&quot;); // attachment 附件   
//$mail-&amp;gt;AddAttachment(&quot;/tmp/image.jpg&quot;, &quot;new.jpg&quot;);   
$mail-&amp;gt;IsHTML(true); // send as HTML   
// 邮件主题   
$subject=&quot;测试&quot;;  
$mail-&amp;gt;Subject = $subject;   
// 邮件内容   
$mail-&amp;gt;Body = &quot;   
&amp;lt;p&amp;gt;点击激活&amp;lt;/p&amp;gt;   
&amp;lt;a href=&#39;#&#39;&amp;gt;点击激活&amp;lt;/a&amp;gt;  
&quot;;   
$mail-&amp;gt;AltBody =&quot;text/html&quot;;   
if(!$mail-&amp;gt;Send())   
{   
echo &quot;邮件发送有误 &amp;lt;p&amp;gt;&quot;;   
echo &quot;邮件错误信息: &quot; . $mail-&amp;gt;ErrorInfo;   
exit;   
}   
else {   
echo &quot;邮件发送成功!&amp;lt;br /&amp;gt;&quot;;   
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.当使用PHP原生mail()函数的时候，需要安装sendmail，Linux一般已经安装sendmail，可以直接使用mail(),如果是windows需要先安装。&lt;/p&gt;

&lt;p&gt;3.当使用ci框架的时候，如下&lt;/p&gt;

&lt;p&gt;[php]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function sendemail()  
{     
    $config = array(&#39;protocol&#39;=&amp;gt;&#39;smtp&#39;,  
        &#39;smtp_host&#39; =&amp;gt; &#39;smtp.163.com&#39;,  
        &#39;smtp_user&#39; =&amp;gt; &#39;yourname&#39;,  
        &#39;smtp_pass&#39; =&amp;gt; &#39;*****&#39;,  
        &#39;smtp_port&#39; =&amp;gt; &#39;25&#39;,  
        &#39;_smtp_auth&#39; =&amp;gt; TRUE,  
        &#39;wordwrap&#39; =&amp;gt; TRUE,  
        &#39;charset&#39; =&amp;gt; &#39;iso-8859-1&#39;  
  
    );  
    $this-&amp;gt;load-&amp;gt;library(&#39;email&#39;, $config);  
    $this-&amp;gt;email-&amp;gt;from(&#39;m13323262052@163.com&#39;, &#39;Your Name&#39;);  
    $this-&amp;gt;email-&amp;gt;to(&#39;m13323262052@163.com&#39;);  
    $this-&amp;gt;email-&amp;gt;subject(&#39;Email Test&#39;);  
    $this-&amp;gt;email-&amp;gt;message(&#39;Testing the email class.&#39;);  
    $this-&amp;gt;email-&amp;gt;send();  
}  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>html5解决大文件断点续传 </title>
   <link href="http://127.0.0.1/javacsript/2009/01/17/html/"/>
   <updated>2009-01-17T06:14:54+08:00</updated>
   <id>http://127.0.0.1/javacsript/2009/01/17/html</id>
   <content type="html">&lt;p&gt;js代码
[html] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;  
&amp;lt;html&amp;gt;  
    &amp;lt;head&amp;gt;  
        &amp;lt;meta charset=&quot;UTF-8&quot;/&amp;gt;  
        &amp;lt;title&amp;gt;xhr2&amp;lt;/title&amp;gt;  
    &amp;lt;/head&amp;gt;  
    &amp;lt;body&amp;gt;  
        &amp;lt;div  id=&quot;drop_area&quot; style=&quot;border:3px dashed silver;width:200px; height:200px&quot;&amp;gt;  
            将图片拖拽到此  
        &amp;lt;/div&amp;gt;  
          
        &amp;lt;progress value=&quot;0&quot; max=&quot;10&quot; id=&quot;prouploadfile&quot;&amp;gt;&amp;lt;/progress&amp;gt;  
          
        &amp;lt;span id=&quot;persent&quot;&amp;gt;0%&amp;lt;/span&amp;gt;  
        &amp;lt;br /&amp;gt;  
        &amp;lt;!--&amp;lt;button onclick=&quot;xhr2()&quot;&amp;gt;ajax上传&amp;lt;/button&amp;gt;--&amp;gt;     
        &amp;lt;button onclick=&quot;stopup()&quot; id=&quot;stop&quot;&amp;gt;上传&amp;lt;/button&amp;gt;      
        &amp;lt;script&amp;gt;  
        //拖拽上传开始  
        //-1.禁止浏览器打开文件行为  
        document.addEventListener(&quot;drop&quot;,function(e){  //拖离   
            e.preventDefault();      
        })  
        document.addEventListener(&quot;dragleave&quot;,function(e){  //拖后放   
            e.preventDefault();      
        })  
        document.addEventListener(&quot;dragenter&quot;,function(e){  //拖进  
            e.preventDefault();      
        })  
        document.addEventListener(&quot;dragover&quot;,function(e){  //拖来拖去    
            e.preventDefault();      
        })  
        //上传进度  
        var pro = document.getElementById(&#39;prouploadfile&#39;);  
        var persent = document.getElementById(&#39;persent&#39;);  
        function clearpro(){  
            pro.value=0;  
            persent.innerHTML=&quot;0%&quot;;  
        }  
          
        //2.拖拽  
        var stopbutton = document.getElementById(&#39;stop&#39;);  
          
        var resultfile=&quot;&quot;  
        var box = document.getElementById(&#39;drop_area&#39;); //拖拽区域     
        box.addEventListener(&quot;drop&quot;,function(e){           
            var fileList = e.dataTransfer.files; //获取文件对象    
            console.log(fileList)  
            //检测是否是拖拽文件到页面的操作            
            if(fileList.length == 0){                
                return false;            
            }             
            //拖拉图片到浏览器，可以实现预览功能    
            //规定视频格式  
            //in_array  
            Array.prototype.S=String.fromCharCode(2);  
            Array.prototype.in_array=function(e){  
                var r=new RegExp(this.S+e+this.S);  
                return (r.test(this.S+this.join(this.S)+this.S));  
            };  
            var video_type=[&quot;video/mp4&quot;,&quot;video/ogg&quot;];  
              
            //创建一个url连接,供src属性引用  
            var fileurl = window.URL.createObjectURL(fileList[0]);                
            if(fileList[0].type.indexOf(&#39;image&#39;) === 0){  //如果是图片  
                var str=&quot;&amp;lt;img width=&#39;200px&#39; height=&#39;200px&#39; src=&#39;&quot;+fileurl+&quot;&#39;&amp;gt;&quot;;  
                document.getElementById(&#39;drop_area&#39;).innerHTML=str;                   
            }else if(video_type.in_array(fileList[0].type)){   //如果是规定格式内的视频                    
                var str=&quot;&amp;lt;video width=&#39;200px&#39; height=&#39;200px&#39; controls=&#39;controls&#39; src=&#39;&quot;+fileurl+&quot;&#39;&amp;gt;&amp;lt;/video&amp;gt;&quot;;  
                document.getElementById(&#39;drop_area&#39;).innerHTML=str;        
            }else{ //其他格式，输出文件名  
                //alert(&quot;不预览&quot;);  
                var str=&quot;文件名字:&quot;+fileList[0].name;  
                document.getElementById(&#39;drop_area&#39;).innerHTML=str;      
            }         
            resultfile = fileList[0];     
            console.log(resultfile);      
              
            //切片计算  
            filesize= resultfile.size;  
            setsize=500*1024;  
            filecount = filesize/setsize;  
            //console.log(filecount)  
            //定义进度条  
            pro.max=parseInt(Math.ceil(filecount));   
              
              
              
            i =getCookie(resultfile.name);  
            i = (i!=null &amp;amp;&amp;amp; i!=&quot;&quot;)?parseInt(i):0  
              
            if(Math.floor(filecount)&amp;lt;i){  
                alert(&quot;已经完成&quot;);  
                pro.value=i+1;  
                persent.innerHTML=&quot;100%&quot;;  
              
            }else{  
                alert(i);  
                pro.value=i;  
                p=parseInt(i)*100/Math.ceil(filecount)  
                persent.innerHTML=parseInt(p)+&quot;%&quot;;  
            }  
              
        },false);    
          
        //3.ajax上传  
  
        var stop=1;  
        function xhr2(){  
            if(stop==1){  
                return false;  
            }  
            if(resultfile==&quot;&quot;){  
                alert(&quot;请选择文件&quot;)  
                return false;  
            }  
            i=getCookie(resultfile.name);  
            console.log(i)  
            i = (i!=null &amp;amp;&amp;amp; i!=&quot;&quot;)?parseInt(i):0  
              
            if(Math.floor(filecount)&amp;lt;parseInt(i)){  
                alert(&quot;已经完成&quot;);  
                return false;  
            }else{  
                //alert(i)  
            }  
            var xhr = new XMLHttpRequest();//第一步  
            //新建一个FormData对象  
            var formData = new FormData(); //++++++++++  
            //追加文件数据  
              
            //改变进度条  
            pro.value=i+1;  
            p=parseInt(i+1)*100/Math.ceil(filecount)  
            persent.innerHTML=parseInt(p)+&quot;%&quot;;  
            //进度条  
              
              
            if((filesize-i*setsize)&amp;gt;setsize){  
                blobfile= resultfile.slice(i*setsize,(i+1)*setsize);  
            }else{  
                blobfile= resultfile.slice(i*setsize,filesize);  
                formData.append(&#39;lastone&#39;, Math.floor(filecount));  
            }  
                formData.append(&#39;file&#39;, blobfile);  
                //return false;  
                formData.append(&#39;blobname&#39;, i); //++++++++++  
    　　      formData.append(&#39;filename&#39;, resultfile.name); //++++++++++  
                //post方式  
                xhr.open(&#39;POST&#39;, &#39;xhr2.php&#39;); //第二步骤  
                //发送请求  
                xhr.send(formData);  //第三步骤  
                stopbutton.innerHTML = &quot;暂停&quot;  
                //ajax返回  
                xhr.onreadystatechange = function(){ //第四步  
            　　　　if ( xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200 ) {  
            　　　　　　console.log( xhr.responseText );  
                        if(i&amp;lt;filecount){  
                            xhr2();  
                        }else{  
                            i=0;  
                        }         
            　　　　}  
            　　};  
                //设置超时时间  
                xhr.timeout = 20000;  
                xhr.ontimeout = function(event){  
            　　　　alert(&#39;请求超时，网络拥堵！低于25K/s&#39;);  
            　　}           
                  
                i=i+1;  
                setCookie(resultfile.name,i,365)  
                  
        }  
          
        //设置cookie  
        function setCookie(c_name,value,expiredays)  
        {  
            var exdate=new Date()  
            exdate.setDate(exdate.getDate()+expiredays)  
            document.cookie=c_name+ &quot;=&quot; +escape(value)+  
            ((expiredays==null) ? &quot;&quot; : &quot;;expires=&quot;+exdate.toGMTString()+&quot;;path=/&quot;)  
        }  
        //获取cookie  
        function getCookie(c_name)  
        {  
        if (document.cookie.length&amp;gt;0)  
          {  
          c_start=document.cookie.indexOf(c_name + &quot;=&quot;)  
          if (c_start!=-1)  
            {   
            c_start=c_start + c_name.length+1   
            c_end=document.cookie.indexOf(&quot;;&quot;,c_start)  
            if (c_end==-1) c_end=document.cookie.length  
            return unescape(document.cookie.substring(c_start,c_end))  
            }   
          }  
        return &quot;&quot;  
        }  
          
          
        function stopup(){  
            if(stop==1){  
                stop = 0  
                  
                xhr2();  
            }else{  
                stop = 1  
                stopbutton.innerHTML = &quot;继续&quot;  
                  
            }  
              
        }  
        &amp;lt;/script&amp;gt;  
    &amp;lt;/body&amp;gt;  
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP代码&lt;/p&gt;

&lt;p&gt;[php] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php  
//$name=$_POST[&#39;username&#39;];  
$dir=$_POST[&#39;filename&#39;];  
$dir=&quot;uploads/&quot;.md5($dir);  
file_exists($dir) or mkdir($dir,0777,true);  
  
  
$path=$dir.&quot;/&quot;.$_POST[&#39;blobname&#39;];  
  
  
//print_r($_FILES[&quot;file&quot;]);  
move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],$path);  
  
if(isset($_POST[&#39;lastone&#39;])){  
    echo $_POST[&#39;lastone&#39;];  
    $count=$_POST[&#39;lastone&#39;];  
      
    $fp   = fopen($_POST[&#39;filename&#39;],&quot;abw&quot;);  
    for($i=0;$i&amp;lt;=$count;$i++){  
        $handle = fopen($dir.&quot;/&quot;.$i,&quot;rb&quot;);    
        fwrite($fp,fread($handle,filesize($dir.&quot;/&quot;.$i)));    
        fclose($handle);      
    }  
    fclose($fp);  
}  
      
      
?&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title> inotify+rsync安装配置,文件同步 </title>
   <link href="http://127.0.0.1/linux/2009/01/16/rsync/"/>
   <updated>2009-01-16T06:14:54+08:00</updated>
   <id>http://127.0.0.1/linux/2009/01/16/rsync</id>
   <content type="html">&lt;p&gt;1.两台机器192.168.1.2，192.168.1.3，想把192.168.1.2的数据同步到192.168.1.3中&lt;/p&gt;

&lt;p&gt;2.测试开始，可以先关闭防火墙和内核Linux的selinux的防火墙,避免防火墙影响（两台服务器均操作）&lt;/p&gt;

&lt;p&gt;关闭防火墙，例如centos7，其他系统版本自己查询如何关闭&lt;/p&gt;

&lt;p&gt;[python] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl stop firewalld.service #停止firewall  
$ systemctl disable firewalld.service #禁止firewall开机启动  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关闭linux的selinux防火墙&lt;/p&gt;

&lt;p&gt;永久性关闭：生效需要重启&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/selinux/config  
SELINUX=disabled  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;临时性关闭：生效无需重启&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ setenforce 0  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.安装rsync（两台服务器均操作）&lt;/p&gt;

&lt;p&gt;前往rsync官网下载最新版本 http://rsync.samba.org/ftp/rsync/src  找到最新的rsync-&lt;em&gt;.&lt;/em&gt;.*.tar.gz&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar zxvf rsync-*.*.*.tar.gz  
$ cd rsync-*.*.*  
$ ./configure --prefix=/usr/local/rsync  
$ make &amp;amp;&amp;amp; make install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.配置rsyncd.conf (192.168.1.3)
[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pid文件的存放位置  
pid file = /var/run/rsync.pid  
#日志文件位置，启动rsync后自动产生这个文件，无需提前创建  
log file = /var/log/rsync.log  
#支持max connections参数的锁文件  
lock file=/var/run/rsync.lock  
#用户认证配置文件，里面保存用户名称和密码  
secrets file = /etc/rsync.pw  
#rsync启动时欢迎信息页面文件位置  
motd file = /etc/rsyncd.motd  
transfer logging = yes  
log format = %t %a %m %f %b  
syslog facility = local3  
#自定义名称  
[data]  
#设置需要同步的目录  
path = /data/test/  
#模块名称与[data]自定义名称相同  
comment = data  
exclude = blank.png ; spinner.gif ; downsimple.png ; rails.png ; WEB-INF/  
#默认端口  
port = 873  
#设置rsync运行权限为root  
uid = root  
#设置rsync运行权限为root  
gid = root  
#设置超时时间  
timeout = 600  
#最大连接数  
max connections = 200  
#默认为true，修改为no，增加对目录文件软连接的备份  
use chroot = no  
#设置rsync服务端文件为读写权限  
read only = no  
#不显示rsync服务端资源列表  
list = no  
#允许进行数据同步的客户端IP地址  
hosts allow = 192.168.1.2  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.可选：可以设置多个目录(192.168.1.3)
[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#增加test1目录  
[test1]  
path = /data/test1  
list = yes  
ignore errors  
comment = ucweb-file system  
secrets file = /etc/rsync.pw  
exclude = blank.png ; spinner.gif ; downsimple.png ; rails.png ; WEB-INF/  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.建立密码认证文件(192.168.1.3)&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/rsync.pw  
root:123456  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置rsyncd.motd文件，开始传送的时候会显示（192.168.1.3）&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/rsyncd.motd  
###############################  
#                             #  
#        start rsync          #  
#                             #  
###############################  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.启动rsync（两台服务器均操作）&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/local/rsync/bin/rsync --daemon --config=/etc/rsyncd.conf  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开机启动rsync&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;/usr/local/rsync/bin/rsync --daemon --config=/etc/rsyncd.conf&#39;&amp;gt;&amp;gt;/etc/rc.d/rc.local  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6.建立密码认证文件（192.168.1.2）
[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi /etc/rsync.pw  
123456  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7.测试开始（在192.168.1.2）&lt;/p&gt;

&lt;p&gt;先打开192.168.1.2上的/data/test/创建一个test.PHP测试文件，执行下面的命令&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /usr/local/rsync/bin/rsync -avH --port=873 --progress --delete /data/test/ root@192.168.1.3::data --password-file=/etc/rsync.pw  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看192.168.1.3上/data/test目录下是否有同步过来的test.php&lt;/p&gt;

&lt;p&gt;8.安装inotify-tools（192.168.1.2）
[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://cloud.github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz  
$ tar zxvf inotify-tools-3.14.tar.gz   
$ cd inotify-tools-3.14  
$ ./configure --prefix=/usr/local/inotify  
$ make &amp;amp;&amp;amp; make install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9.查看是否安装成功&lt;/p&gt;

&lt;p&gt;[plain] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ll /usr/local/inotify/bin/inotifywa*  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10.新建一个inotify.sh设置文件同步/root/inotify.sh,如果下面代码不管用可参考https://github.com/rvoicilas/inotify-tools/wiki#info&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;/p&gt;

&lt;h1 id=&quot;get-the-current-path&quot;&gt;get the current path&lt;/h1&gt;
&lt;p&gt;CURPATH=&lt;code&gt;pwd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;/usr/local/inotify/bin/inotifywait -mr –timefmt ‘%d/%m/%y %H:%M’ –format ‘%T %w %f’ \
-e close_write /data/test | while read date time dir file; do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   FILECHANGE=${dir}${file}
   # convert absolute path to relative
   FILECHANGEREL=`echo &quot;$FILECHANGE&quot; | sed &#39;s_&#39;$CURPATH&#39;/__&#39;`


   rsync -avH --port=873 --progress --delete /data/test/ root@192.168.1.3::data --password-file=/etc/rsync.pw
    echo &quot;At ${time} on ${date}, file $FILECHANGE was backed up via rsync&quot; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11.可执行权限与后台无输出运行
chmod 777 /root/inotify.sh&lt;/p&gt;

&lt;p&gt;[php] view plain copy
在CODE上查看代码片派生到我的代码片&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh /root/inotify.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;  
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>curl模拟post请求提交</title>
   <link href="http://127.0.0.1/php/2009/01/11/curl/"/>
   <updated>2009-01-11T06:14:54+08:00</updated>
   <id>http://127.0.0.1/php/2009/01/11/curl</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#i-classfa--fa-useri-&quot; id=&quot;markdown-toc-i-classfa--fa-useri-&quot;&gt;&lt;i class=&quot;fa  fa-user&quot;&gt;&lt;/i&gt; 请求接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#i-classfa-fa-eyei-cookie&quot; id=&quot;markdown-toc-i-classfa-fa-eyei-cookie&quot;&gt;&lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 请求接口（当cookie认证登陆的时候）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;i-classfa--fa-useri-&quot;&gt;&lt;i class=&quot;fa  fa-user&quot;&gt;&lt;/i&gt; 请求接口&lt;/h2&gt;

&lt;p&gt;```php
    header(‘content-type:text/html;charset=utf-8’);&lt;br /&gt;
    function curlPost($url,$data,$method){&lt;br /&gt;
        $ch = curl_init();   //1.初始化&lt;br /&gt;
        curl_setopt($ch, CURLOPT_URL, $url); //2.请求地址&lt;br /&gt;
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);//3.请求方式&lt;br /&gt;
        //4.参数如下&lt;br /&gt;
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);//https&lt;br /&gt;
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);&lt;br /&gt;
        curl_setopt($ch, CURLOPT_USERAGENT, ‘Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)’);//模拟浏览器&lt;br /&gt;
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);&lt;br /&gt;
        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);&lt;br /&gt;
            curl_setopt($ch, CURLOPT_HTTPHEADER,array(‘Accept-Encoding: gzip, deflate’));//gzip解压内容&lt;br /&gt;
            curl_setopt($ch, CURLOPT_ENCODING, ‘gzip,deflate’);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    if($method==&quot;POST&quot;){//5.post方式的时候添加数据  
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);  
    }  
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  
    $tmpInfo = curl_exec($ch);//6.执行  
  
    if (curl_errno($ch)) {//7.如果出错  
        return curl_error($ch);  
    }  
    curl_close($ch);//8.关闭  
    return $tmpInfo;  
}  
$data=array(&#39;name&#39; =&amp;gt; &#39;1234&#39;);  
$url=&quot;http://www.sohu.com/&quot;;  
  
$method=&quot;GET&quot;;  
$file=curlPost($url,$data,$method);  
$file=mb_convert_encoding($file,&#39;UTF-8&#39;,&#39;GBK&#39;);  
echo $file;   ```
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;i-classfa-fa-eyei-cookie&quot;&gt;&lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 请求接口（当cookie认证登陆的时候）&lt;/h2&gt;
&lt;p&gt;```php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    &lt;?php  
        $cookie_file = tempnam(&#39;./temp&#39;,&#39;cookie&#39;);  
        function weixinPost($url,$data,$method,$setcooke=false,$cookie_file=false){  
            $ch = curl_init();   //1.初始化  
            curl_setopt($ch, CURLOPT_URL, $url); //2.请求地址  
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);//3.请求方式  
            //4.参数如下      
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);  
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);  
            curl_setopt($ch, CURLOPT_USERAGENT, &#39;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#39;);  
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);  
            curl_setopt($ch, CURLOPT_AUTOREFERER, 1);  
              
            if($method==&quot;POST&quot;){//5.post方式的时候添加数据     
                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);  
            }  
            if($setcooke==true){  
                curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie_file);  
            }else{  
                curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie_file);  
            }  
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  
            $tmpInfo = curl_exec($ch);//6.执行  
      
            if (curl_errno($ch)) {//7.如果出错  
                return curl_error($ch);  
            }  
            curl_close($ch);//8.关闭  
            return $tmpInfo;  
        }  
        $data=array(&#39;username&#39; =&gt; &#39;***&#39;,&#39;password&#39;=&gt;&#39;***&#39;);  
        $url=&quot;http://www.xinxinj.com/login.php&quot;;  
        $method=&quot;POST&quot;;  
        $file=weixinPost($url,$data,$method,true,$cookie_file);  
        echo $file;  
              
        $url=&quot;http://www.xinxinj.com/admin.php&quot;;  
        $method=&quot;GET&quot;;  
        $file=weixinPost($url,$data,$method,false,$cookie_file);  
        echo $file;  
              
    ?&gt;  
```
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 

</feed>
